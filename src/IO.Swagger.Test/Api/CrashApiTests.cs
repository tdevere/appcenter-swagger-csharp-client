/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CrashApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CrashApiTests
    {
        private CrashApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CrashApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CrashApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CrashApi
            //Assert.IsInstanceOfType(typeof(CrashApi), instance, "instance is a CrashApi");
        }

        /// <summary>
        /// Test CrashGroupsGet
        /// </summary>
        [Test]
        public void CrashGroupsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string crashGroupId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.CrashGroupsGet(crashGroupId, ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20070> (response, "response is InlineResponse20070");
        }
        /// <summary>
        /// Test CrashGroupsGetStacktrace
        /// </summary>
        [Test]
        public void CrashGroupsGetStacktraceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string crashGroupId = null;
            //string ownerName = null;
            //string appName = null;
            //bool? groupingOnly = null;
            //var response = instance.CrashGroupsGetStacktrace(crashGroupId, ownerName, appName, groupingOnly);
            //Assert.IsInstanceOf<Stacktrace> (response, "response is Stacktrace");
        }
        /// <summary>
        /// Test CrashGroupsList
        /// </summary>
        [Test]
        public void CrashGroupsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //DateTime? lastOccurrenceFrom = null;
            //DateTime? lastOccurrenceTo = null;
            //string appVersion = null;
            //string groupType = null;
            //string groupStatus = null;
            //string groupTextSearch = null;
            //string orderby = null;
            //string continuationToken = null;
            //var response = instance.CrashGroupsList(ownerName, appName, lastOccurrenceFrom, lastOccurrenceTo, appVersion, groupType, groupStatus, groupTextSearch, orderby, continuationToken);
            //Assert.IsInstanceOf<InlineResponse20071> (response, "response is InlineResponse20071");
        }
        /// <summary>
        /// Test CrashGroupsUpdate
        /// </summary>
        [Test]
        public void CrashGroupsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CrashGroupsCrashGroupIdBody body = null;
            //string crashGroupId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.CrashGroupsUpdate(body, crashGroupId, ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20070> (response, "response is InlineResponse20070");
        }
        /// <summary>
        /// Test CrashesDelete
        /// </summary>
        [Test]
        public void CrashesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string crashGroupId = null;
            //string crashId = null;
            //string ownerName = null;
            //string appName = null;
            //bool? retentionDelete = null;
            //var response = instance.CrashesDelete(crashGroupId, crashId, ownerName, appName, retentionDelete);
            //Assert.IsInstanceOf<InlineResponse20069> (response, "response is InlineResponse20069");
        }
        /// <summary>
        /// Test CrashesGet
        /// </summary>
        [Test]
        public void CrashesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string crashGroupId = null;
            //string crashId = null;
            //string ownerName = null;
            //string appName = null;
            //bool? includeReport = null;
            //bool? includeLog = null;
            //bool? includeDetails = null;
            //bool? includeStacktrace = null;
            //bool? groupingOnly = null;
            //var response = instance.CrashesGet(crashGroupId, crashId, ownerName, appName, includeReport, includeLog, includeDetails, includeStacktrace, groupingOnly);
            //Assert.IsInstanceOf<Crash> (response, "response is Crash");
        }
        /// <summary>
        /// Test CrashesGetAppCrashesInfo
        /// </summary>
        [Test]
        public void CrashesGetAppCrashesInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.CrashesGetAppCrashesInfo(ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20064> (response, "response is InlineResponse20064");
        }
        /// <summary>
        /// Test CrashesGetAppVersions
        /// </summary>
        [Test]
        public void CrashesGetAppVersionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.CrashesGetAppVersions(ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20018>> (response, "response is List<InlineResponse20018>");
        }
        /// <summary>
        /// Test CrashesGetCrashAttachmentLocation
        /// </summary>
        [Test]
        public void CrashesGetCrashAttachmentLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string crashId = null;
            //string attachmentId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.CrashesGetCrashAttachmentLocation(crashId, attachmentId, ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20066> (response, "response is InlineResponse20066");
        }
        /// <summary>
        /// Test CrashesGetCrashTextAttachmentContent
        /// </summary>
        [Test]
        public void CrashesGetCrashTextAttachmentContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string crashId = null;
            //string attachmentId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.CrashesGetCrashTextAttachmentContent(crashId, attachmentId, ownerName, appName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test CrashesGetNativeCrash
        /// </summary>
        [Test]
        public void CrashesGetNativeCrashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string crashGroupId = null;
            //string crashId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.CrashesGetNativeCrash(crashGroupId, crashId, ownerName, appName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test CrashesGetNativeCrashDownload
        /// </summary>
        [Test]
        public void CrashesGetNativeCrashDownloadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string crashGroupId = null;
            //string crashId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.CrashesGetNativeCrashDownload(crashGroupId, crashId, ownerName, appName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test CrashesGetRawCrashLocation
        /// </summary>
        [Test]
        public void CrashesGetRawCrashLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string crashGroupId = null;
            //string crashId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.CrashesGetRawCrashLocation(crashGroupId, crashId, ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20068> (response, "response is InlineResponse20068");
        }
        /// <summary>
        /// Test CrashesGetStacktrace
        /// </summary>
        [Test]
        public void CrashesGetStacktraceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string crashGroupId = null;
            //string crashId = null;
            //string ownerName = null;
            //string appName = null;
            //bool? groupingOnly = null;
            //var response = instance.CrashesGetStacktrace(crashGroupId, crashId, ownerName, appName, groupingOnly);
            //Assert.IsInstanceOf<Stacktrace> (response, "response is Stacktrace");
        }
        /// <summary>
        /// Test CrashesList
        /// </summary>
        [Test]
        public void CrashesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string crashGroupId = null;
            //string ownerName = null;
            //string appName = null;
            //bool? includeReport = null;
            //bool? includeLog = null;
            //DateTime? dateFrom = null;
            //DateTime? dateTo = null;
            //string appVersion = null;
            //string errorType = null;
            //var response = instance.CrashesList(crashGroupId, ownerName, appName, includeReport, includeLog, dateFrom, dateTo, appVersion, errorType);
            //Assert.IsInstanceOf<List<Crash>> (response, "response is List<Crash>");
        }
        /// <summary>
        /// Test CrashesListAttachments
        /// </summary>
        [Test]
        public void CrashesListAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string crashId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.CrashesListAttachments(crashId, ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20067>> (response, "response is List<InlineResponse20067>");
        }
        /// <summary>
        /// Test MissingSymbolGroupsGet
        /// </summary>
        [Test]
        public void MissingSymbolGroupsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbolGroupId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.MissingSymbolGroupsGet(symbolGroupId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test MissingSymbolGroupsInfo
        /// </summary>
        [Test]
        public void MissingSymbolGroupsInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.MissingSymbolGroupsInfo(ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test MissingSymbolGroupsList
        /// </summary>
        [Test]
        public void MissingSymbolGroupsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.MissingSymbolGroupsList(top, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test SymbolUploadsComplete
        /// </summary>
        [Test]
        public void SymbolUploadsCompleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SymbolUploadsSymbolUploadIdBody body = null;
            //string symbolUploadId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.SymbolUploadsComplete(body, symbolUploadId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test SymbolUploadsCreate
        /// </summary>
        [Test]
        public void SymbolUploadsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AppNameSymbolUploadsBody body = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.SymbolUploadsCreate(body, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test SymbolUploadsDelete
        /// </summary>
        [Test]
        public void SymbolUploadsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbolUploadId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.SymbolUploadsDelete(symbolUploadId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test SymbolUploadsGet
        /// </summary>
        [Test]
        public void SymbolUploadsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbolUploadId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.SymbolUploadsGet(symbolUploadId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test SymbolUploadsGetLocation
        /// </summary>
        [Test]
        public void SymbolUploadsGetLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbolUploadId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.SymbolUploadsGetLocation(symbolUploadId, ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20029> (response, "response is InlineResponse20029");
        }
        /// <summary>
        /// Test SymbolUploadsList
        /// </summary>
        [Test]
        public void SymbolUploadsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //long? top = null;
            //string status = null;
            //string symbolType = null;
            //var response = instance.SymbolUploadsList(ownerName, appName, top, status, symbolType);
            //Assert.IsInstanceOf<List<InlineResponse20030>> (response, "response is List<InlineResponse20030>");
        }
        /// <summary>
        /// Test SymbolsGet
        /// </summary>
        [Test]
        public void SymbolsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbolId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.SymbolsGet(symbolId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test SymbolsGetLocation
        /// </summary>
        [Test]
        public void SymbolsGetLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbolId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.SymbolsGetLocation(symbolId, ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20027> (response, "response is InlineResponse20027");
        }
        /// <summary>
        /// Test SymbolsGetStatus
        /// </summary>
        [Test]
        public void SymbolsGetStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbolId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.SymbolsGetStatus(symbolId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test SymbolsIgnore
        /// </summary>
        [Test]
        public void SymbolsIgnoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbolId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.SymbolsIgnore(symbolId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test SymbolsList
        /// </summary>
        [Test]
        public void SymbolsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.SymbolsList(ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20028>> (response, "response is List<InlineResponse20028>");
        }
    }

}
