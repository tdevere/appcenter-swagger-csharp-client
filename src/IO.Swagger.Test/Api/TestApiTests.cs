/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TestApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TestApiTests
    {
        private TestApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TestApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TestApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TestApi
            //Assert.IsInstanceOfType(typeof(TestApi), instance, "instance is a TestApi");
        }

        /// <summary>
        /// Test TestArchiveTestRun
        /// </summary>
        [Test]
        public void TestArchiveTestRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? testRunId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestArchiveTestRun(testRunId, ownerName, appName);
            //Assert.IsInstanceOf<TestRun1> (response, "response is TestRun1");
        }
        /// <summary>
        /// Test TestCreateDeviceSelection
        /// </summary>
        [Test]
        public void TestCreateDeviceSelectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeviceList body = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestCreateDeviceSelection(body, ownerName, appName);
            //Assert.IsInstanceOf<DeviceSelection> (response, "response is DeviceSelection");
        }
        /// <summary>
        /// Test TestCreateDeviceSetOfOwner
        /// </summary>
        [Test]
        public void TestCreateDeviceSetOfOwnerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeviceSetUpdateInformation3 body = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestCreateDeviceSetOfOwner(body, ownerName, appName);
            //Assert.IsInstanceOf<DeviceSet> (response, "response is DeviceSet");
        }
        /// <summary>
        /// Test TestCreateDeviceSetOfUser
        /// </summary>
        [Test]
        public void TestCreateDeviceSetOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeviceSetUpdateInformation1 body = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestCreateDeviceSetOfUser(body, ownerName, appName);
            //Assert.IsInstanceOf<DeviceSet> (response, "response is DeviceSet");
        }
        /// <summary>
        /// Test TestCreateSubscription
        /// </summary>
        [Test]
        public void TestCreateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestCreateSubscription(ownerName, appName);
            //Assert.IsInstanceOf<Subscription1> (response, "response is Subscription1");
        }
        /// <summary>
        /// Test TestCreateTestRun
        /// </summary>
        [Test]
        public void TestCreateTestRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //instance.TestCreateTestRun(ownerName, appName);
            
        }
        /// <summary>
        /// Test TestCreateTestSeries
        /// </summary>
        [Test]
        public void TestCreateTestSeriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NameOfTheTestSeries1 body = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestCreateTestSeries(body, ownerName, appName);
            //Assert.IsInstanceOf<TestSeries> (response, "response is TestSeries");
        }
        /// <summary>
        /// Test TestDeleteDeviceSetOfOwner
        /// </summary>
        [Test]
        public void TestDeleteDeviceSetOfOwnerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //string ownerName = null;
            //string appName = null;
            //instance.TestDeleteDeviceSetOfOwner(id, ownerName, appName);
            
        }
        /// <summary>
        /// Test TestDeleteDeviceSetOfUser
        /// </summary>
        [Test]
        public void TestDeleteDeviceSetOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //string ownerName = null;
            //string appName = null;
            //instance.TestDeleteDeviceSetOfUser(id, ownerName, appName);
            
        }
        /// <summary>
        /// Test TestDeleteTestSeries
        /// </summary>
        [Test]
        public void TestDeleteTestSeriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string testSeriesSlug = null;
            //string ownerName = null;
            //string appName = null;
            //instance.TestDeleteTestSeries(testSeriesSlug, ownerName, appName);
            
        }
        /// <summary>
        /// Test TestGdprExportAccount
        /// </summary>
        [Test]
        public void TestGdprExportAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TestGdprExportAccount();
            //Assert.IsInstanceOf<InlineResponse20099> (response, "response is InlineResponse20099");
        }
        /// <summary>
        /// Test TestGdprExportAccounts
        /// </summary>
        [Test]
        public void TestGdprExportAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TestGdprExportAccounts();
            //Assert.IsInstanceOf<InlineResponse20026> (response, "response is InlineResponse20026");
        }
        /// <summary>
        /// Test TestGdprExportApp
        /// </summary>
        [Test]
        public void TestGdprExportAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGdprExportApp(ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20025> (response, "response is InlineResponse20025");
        }
        /// <summary>
        /// Test TestGdprExportApps
        /// </summary>
        [Test]
        public void TestGdprExportAppsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGdprExportApps(ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20026> (response, "response is InlineResponse20026");
        }
        /// <summary>
        /// Test TestGdprExportFeatureFlag
        /// </summary>
        [Test]
        public void TestGdprExportFeatureFlagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TestGdprExportFeatureFlag();
            //Assert.IsInstanceOf<InlineResponse20098> (response, "response is InlineResponse20098");
        }
        /// <summary>
        /// Test TestGdprExportFileSetFile
        /// </summary>
        [Test]
        public void TestGdprExportFileSetFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGdprExportFileSetFile(ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20024> (response, "response is InlineResponse20024");
        }
        /// <summary>
        /// Test TestGdprExportHashFile
        /// </summary>
        [Test]
        public void TestGdprExportHashFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGdprExportHashFile(ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20023> (response, "response is InlineResponse20023");
        }
        /// <summary>
        /// Test TestGdprExportPipelineTest
        /// </summary>
        [Test]
        public void TestGdprExportPipelineTestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGdprExportPipelineTest(ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20022> (response, "response is InlineResponse20022");
        }
        /// <summary>
        /// Test TestGdprExportTestRun
        /// </summary>
        [Test]
        public void TestGdprExportTestRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGdprExportTestRun(ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20021> (response, "response is InlineResponse20021");
        }
        /// <summary>
        /// Test TestGetAllTestRunsForSeries
        /// </summary>
        [Test]
        public void TestGetAllTestRunsForSeriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string testSeriesSlug = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGetAllTestRunsForSeries(testSeriesSlug, ownerName, appName);
            //Assert.IsInstanceOf<List<TestRun>> (response, "response is List<TestRun>");
        }
        /// <summary>
        /// Test TestGetAllTestSeries
        /// </summary>
        [Test]
        public void TestGetAllTestSeriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //string query = null;
            //var response = instance.TestGetAllTestSeries(ownerName, appName, query);
            //Assert.IsInstanceOf<List<TestSeries1>> (response, "response is List<TestSeries1>");
        }
        /// <summary>
        /// Test TestGetDeviceConfigurations
        /// </summary>
        [Test]
        public void TestGetDeviceConfigurationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //Guid? appUploadId = null;
            //var response = instance.TestGetDeviceConfigurations(ownerName, appName, appUploadId);
            //Assert.IsInstanceOf<List<InlineResponse20061>> (response, "response is List<InlineResponse20061>");
        }
        /// <summary>
        /// Test TestGetDeviceSetOfOwner
        /// </summary>
        [Test]
        public void TestGetDeviceSetOfOwnerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGetDeviceSetOfOwner(id, ownerName, appName);
            //Assert.IsInstanceOf<DeviceSet> (response, "response is DeviceSet");
        }
        /// <summary>
        /// Test TestGetDeviceSetOfUser
        /// </summary>
        [Test]
        public void TestGetDeviceSetOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGetDeviceSetOfUser(id, ownerName, appName);
            //Assert.IsInstanceOf<DeviceSet> (response, "response is DeviceSet");
        }
        /// <summary>
        /// Test TestGetSubscriptions
        /// </summary>
        [Test]
        public void TestGetSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGetSubscriptions(ownerName, appName);
            //Assert.IsInstanceOf<Subscription1> (response, "response is Subscription1");
        }
        /// <summary>
        /// Test TestGetTestReport
        /// </summary>
        [Test]
        public void TestGetTestReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? testRunId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGetTestReport(testRunId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test TestGetTestRun
        /// </summary>
        [Test]
        public void TestGetTestRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? testRunId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGetTestRun(testRunId, ownerName, appName);
            //Assert.IsInstanceOf<TestRun1> (response, "response is TestRun1");
        }
        /// <summary>
        /// Test TestGetTestRunState
        /// </summary>
        [Test]
        public void TestGetTestRunStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string testRunId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGetTestRunState(testRunId, ownerName, appName);
            //Assert.IsInstanceOf<TestRunState> (response, "response is TestRunState");
        }
        /// <summary>
        /// Test TestGetTestRuns
        /// </summary>
        [Test]
        public void TestGetTestRunsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestGetTestRuns(ownerName, appName);
            //Assert.IsInstanceOf<List<TestRun>> (response, "response is List<TestRun>");
        }
        /// <summary>
        /// Test TestListDeviceSetsOfOwner
        /// </summary>
        [Test]
        public void TestListDeviceSetsOfOwnerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestListDeviceSetsOfOwner(ownerName, appName);
            //Assert.IsInstanceOf<List<DeviceSet2>> (response, "response is List<DeviceSet2>");
        }
        /// <summary>
        /// Test TestListDeviceSetsOfUser
        /// </summary>
        [Test]
        public void TestListDeviceSetsOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestListDeviceSetsOfUser(ownerName, appName);
            //Assert.IsInstanceOf<List<DeviceSet1>> (response, "response is List<DeviceSet1>");
        }
        /// <summary>
        /// Test TestPatchTestSeries
        /// </summary>
        [Test]
        public void TestPatchTestSeriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NameOfTheTestSeries body = null;
            //string testSeriesSlug = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestPatchTestSeries(body, testSeriesSlug, ownerName, appName);
            //Assert.IsInstanceOf<TestSeries> (response, "response is TestSeries");
        }
        /// <summary>
        /// Test TestStartTestRun
        /// </summary>
        [Test]
        public void TestStartTestRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TestCloudStartTestRunOptions body = null;
            //string testRunId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestStartTestRun(body, testRunId, ownerName, appName);
            //Assert.IsInstanceOf<TestCloudTestRunStartResult> (response, "response is TestCloudTestRunStartResult");
        }
        /// <summary>
        /// Test TestStartUploadingFile
        /// </summary>
        [Test]
        public void TestStartUploadingFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string testRunId = null;
            //string ownerName = null;
            //string appName = null;
            //instance.TestStartUploadingFile(testRunId, ownerName, appName);
            
        }
        /// <summary>
        /// Test TestStopTestRun
        /// </summary>
        [Test]
        public void TestStopTestRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string testRunId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestStopTestRun(testRunId, ownerName, appName);
            //Assert.IsInstanceOf<TestRun1> (response, "response is TestRun1");
        }
        /// <summary>
        /// Test TestUpdateDeviceSetOfOwner
        /// </summary>
        [Test]
        public void TestUpdateDeviceSetOfOwnerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeviceSetUpdateInformation2 body = null;
            //Guid? id = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestUpdateDeviceSetOfOwner(body, id, ownerName, appName);
            //Assert.IsInstanceOf<DeviceSet> (response, "response is DeviceSet");
        }
        /// <summary>
        /// Test TestUpdateDeviceSetOfUser
        /// </summary>
        [Test]
        public void TestUpdateDeviceSetOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeviceSetUpdateInformation body = null;
            //Guid? id = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestUpdateDeviceSetOfUser(body, id, ownerName, appName);
            //Assert.IsInstanceOf<DeviceSet> (response, "response is DeviceSet");
        }
        /// <summary>
        /// Test TestUploadHash
        /// </summary>
        [Test]
        public void TestUploadHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TestCloudFileHash1 body = null;
            //string testRunId = null;
            //string ownerName = null;
            //string appName = null;
            //instance.TestUploadHash(body, testRunId, ownerName, appName);
            
        }
        /// <summary>
        /// Test TestUploadHashesBatch
        /// </summary>
        [Test]
        public void TestUploadHashesBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<TestCloudFileHash> body = null;
            //string testRunId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.TestUploadHashesBatch(body, testRunId, ownerName, appName);
            //Assert.IsInstanceOf<List<TestCloudFileHashResponse>> (response, "response is List<TestCloudFileHashResponse>");
        }
    }

}
