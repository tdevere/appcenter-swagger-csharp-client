/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DistributeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DistributeApiTests
    {
        private DistributeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DistributeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DistributeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DistributeApi
            //Assert.IsInstanceOfType(typeof(DistributeApi), instance, "instance is a DistributeApi");
        }

        /// <summary>
        /// Test AppleMappingCreate
        /// </summary>
        [Test]
        public void AppleMappingCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AppNameAppleMappingBody body = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.AppleMappingCreate(body, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test AppleMappingDelete
        /// </summary>
        [Test]
        public void AppleMappingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //string body = null;
            //instance.AppleMappingDelete(ownerName, appName, body);
            
        }
        /// <summary>
        /// Test AppleMappingGet
        /// </summary>
        [Test]
        public void AppleMappingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.AppleMappingGet(ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test AppleMappingTestFlightGroups
        /// </summary>
        [Test]
        public void AppleMappingTestFlightGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.AppleMappingTestFlightGroups(ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20074>> (response, "response is List<InlineResponse20074>");
        }
        /// <summary>
        /// Test DevicesDeviceDetails
        /// </summary>
        [Test]
        public void DevicesDeviceDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceUdid = null;
            //var response = instance.DevicesDeviceDetails(deviceUdid);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DevicesGetReleaseUpdateDevicesStatus
        /// </summary>
        [Test]
        public void DevicesGetReleaseUpdateDevicesStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string releaseId = null;
            //string resignId = null;
            //string ownerName = null;
            //string appName = null;
            //bool? includeProvisioningProfile = null;
            //var response = instance.DevicesGetReleaseUpdateDevicesStatus(releaseId, resignId, ownerName, appName, includeProvisioningProfile);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DevicesList
        /// </summary>
        [Test]
        public void DevicesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string distributionGroupName = null;
            //string ownerName = null;
            //string appName = null;
            //decimal? releaseId = null;
            //var response = instance.DevicesList(distributionGroupName, ownerName, appName, releaseId);
            //Assert.IsInstanceOf<List<InlineResponse2003>> (response, "response is List<InlineResponse2003>");
        }
        /// <summary>
        /// Test DevicesListCsvFormat
        /// </summary>
        [Test]
        public void DevicesListCsvFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string distributionGroupName = null;
            //string ownerName = null;
            //string appName = null;
            //bool? unprovisionedOnly = null;
            //List<string> udids = null;
            //instance.DevicesListCsvFormat(distributionGroupName, ownerName, appName, unprovisionedOnly, udids);
            
        }
        /// <summary>
        /// Test DevicesRegisterUserForDevice
        /// </summary>
        [Test]
        public void DevicesRegisterUserForDeviceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DevicesRegisterBody body = null;
            //string userId = null;
            //var response = instance.DevicesRegisterUserForDevice(body, userId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DevicesRemoveUserDevice
        /// </summary>
        [Test]
        public void DevicesRemoveUserDeviceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceUdid = null;
            //instance.DevicesRemoveUserDevice(deviceUdid);
            
        }
        /// <summary>
        /// Test DevicesUserDevicesList
        /// </summary>
        [Test]
        public void DevicesUserDevicesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DevicesUserDevicesList();
            //Assert.IsInstanceOf<List<InlineResponse2003>> (response, "response is List<InlineResponse2003>");
        }
        /// <summary>
        /// Test DistibutionReleasesInstallAnalytics
        /// </summary>
        [Test]
        public void DistibutionReleasesInstallAnalyticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AppNameInstallAnalyticsBody body = null;
            //string ownerName = null;
            //string appName = null;
            //instance.DistibutionReleasesInstallAnalytics(body, ownerName, appName);
            
        }
        /// <summary>
        /// Test ProvisioningProfile
        /// </summary>
        [Test]
        public void ProvisioningProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? releaseId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.ProvisioningProfile(releaseId, ownerName, appName);
            //Assert.IsInstanceOf<ProvisioningProfileResponse> (response, "response is ProvisioningProfileResponse");
        }
        /// <summary>
        /// Test ReleasesAddDistributionGroup
        /// </summary>
        [Test]
        public void ReleasesAddDistributionGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReleaseIdGroupsBody body = null;
            //int? releaseId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.ReleasesAddDistributionGroup(body, releaseId, ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse2011> (response, "response is InlineResponse2011");
        }
        /// <summary>
        /// Test ReleasesAddStore
        /// </summary>
        [Test]
        public void ReleasesAddStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReleaseIdStoresBody body = null;
            //int? releaseId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.ReleasesAddStore(body, releaseId, ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse2012> (response, "response is InlineResponse2012");
        }
        /// <summary>
        /// Test ReleasesAddTesters
        /// </summary>
        [Test]
        public void ReleasesAddTestersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReleaseIdTestersBody body = null;
            //int? releaseId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.ReleasesAddTesters(body, releaseId, ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse2011> (response, "response is InlineResponse2011");
        }
        /// <summary>
        /// Test ReleasesAvailableToTester
        /// </summary>
        [Test]
        public void ReleasesAvailableToTesterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //bool? publishedOnly = null;
            //var response = instance.ReleasesAvailableToTester(ownerName, appName, publishedOnly);
            //Assert.IsInstanceOf<List<InlineResponse20033>> (response, "response is List<InlineResponse20033>");
        }
        /// <summary>
        /// Test ReleasesCreateReleaseUpload
        /// </summary>
        [Test]
        public void ReleasesCreateReleaseUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //UploadsReleasesBody body = null;
            //var response = instance.ReleasesCreateReleaseUpload(ownerName, appName, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ReleasesDelete
        /// </summary>
        [Test]
        public void ReleasesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? releaseId = null;
            //string ownerName = null;
            //string appName = null;
            //instance.ReleasesDelete(releaseId, ownerName, appName);
            
        }
        /// <summary>
        /// Test ReleasesDeleteDistributionGroup
        /// </summary>
        [Test]
        public void ReleasesDeleteDistributionGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? releaseId = null;
            //string groupId = null;
            //string ownerName = null;
            //string appName = null;
            //instance.ReleasesDeleteDistributionGroup(releaseId, groupId, ownerName, appName);
            
        }
        /// <summary>
        /// Test ReleasesDeleteDistributionStore
        /// </summary>
        [Test]
        public void ReleasesDeleteDistributionStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? releaseId = null;
            //string storeId = null;
            //string ownerName = null;
            //string appName = null;
            //instance.ReleasesDeleteDistributionStore(releaseId, storeId, ownerName, appName);
            
        }
        /// <summary>
        /// Test ReleasesDeleteDistributionTester
        /// </summary>
        [Test]
        public void ReleasesDeleteDistributionTesterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? releaseId = null;
            //string testerId = null;
            //string ownerName = null;
            //string appName = null;
            //instance.ReleasesDeleteDistributionTester(releaseId, testerId, ownerName, appName);
            
        }
        /// <summary>
        /// Test ReleasesDeleteTesterFromDestinations
        /// </summary>
        [Test]
        public void ReleasesDeleteTesterFromDestinationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string testerId = null;
            //string ownerName = null;
            //string appName = null;
            //instance.ReleasesDeleteTesterFromDestinations(testerId, ownerName, appName);
            
        }
        /// <summary>
        /// Test ReleasesDeleteWithDistributionGroupId
        /// </summary>
        [Test]
        public void ReleasesDeleteWithDistributionGroupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //string distributionGroupName = null;
            //int? releaseId = null;
            //instance.ReleasesDeleteWithDistributionGroupId(ownerName, appName, distributionGroupName, releaseId);
            
        }
        /// <summary>
        /// Test ReleasesGetIosManifest
        /// </summary>
        [Test]
        public void ReleasesGetIosManifestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? releaseId = null;
            //string token = null;
            //instance.ReleasesGetIosManifest(appId, releaseId, token);
            
        }
        /// <summary>
        /// Test ReleasesGetLatestByDistributionGroup
        /// </summary>
        [Test]
        public void ReleasesGetLatestByDistributionGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //string distributionGroupName = null;
            //string releaseId = null;
            //var response = instance.ReleasesGetLatestByDistributionGroup(ownerName, appName, distributionGroupName, releaseId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ReleasesGetLatestByHash
        /// </summary>
        [Test]
        public void ReleasesGetLatestByHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appSecret = null;
            //string releaseHash = null;
            //string udid = null;
            //var response = instance.ReleasesGetLatestByHash(appSecret, releaseHash, udid);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ReleasesGetLatestByPublicDistributionGroup
        /// </summary>
        [Test]
        public void ReleasesGetLatestByPublicDistributionGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appSecret = null;
            //string distributionGroupId = null;
            //var response = instance.ReleasesGetLatestByPublicDistributionGroup(appSecret, distributionGroupId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ReleasesGetLatestByUser
        /// </summary>
        [Test]
        public void ReleasesGetLatestByUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string releaseId = null;
            //string ownerName = null;
            //string appName = null;
            //string udid = null;
            //bool? isInstallPage = null;
            //var response = instance.ReleasesGetLatestByUser(releaseId, ownerName, appName, udid, isInstallPage);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ReleasesGetLatestPrivateRelease
        /// </summary>
        [Test]
        public void ReleasesGetLatestPrivateReleaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appSecret = null;
            //string udid = null;
            //var response = instance.ReleasesGetLatestPrivateRelease(appSecret, udid);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ReleasesGetLatestPublicRelease
        /// </summary>
        [Test]
        public void ReleasesGetLatestPublicReleaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appSecret = null;
            //var response = instance.ReleasesGetLatestPublicRelease(appSecret);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ReleasesGetPublicGroupsForReleaseByHash
        /// </summary>
        [Test]
        public void ReleasesGetPublicGroupsForReleaseByHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appSecret = null;
            //string releaseHash = null;
            //var response = instance.ReleasesGetPublicGroupsForReleaseByHash(appSecret, releaseHash);
            //Assert.IsInstanceOf<List<InlineResponse2004>> (response, "response is List<InlineResponse2004>");
        }
        /// <summary>
        /// Test ReleasesGetReleaseUploadStatus
        /// </summary>
        [Test]
        public void ReleasesGetReleaseUploadStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? uploadId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.ReleasesGetReleaseUploadStatus(uploadId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ReleasesGetSparkleFeed
        /// </summary>
        [Test]
        public void ReleasesGetSparkleFeedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appSecret = null;
            //instance.ReleasesGetSparkleFeed(appSecret);
            
        }
        /// <summary>
        /// Test ReleasesList
        /// </summary>
        [Test]
        public void ReleasesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //bool? publishedOnly = null;
            //string scope = null;
            //decimal? top = null;
            //decimal? releaseId = null;
            //var response = instance.ReleasesList(ownerName, appName, publishedOnly, scope, top, releaseId);
            //Assert.IsInstanceOf<List<InlineResponse20034>> (response, "response is List<InlineResponse20034>");
        }
        /// <summary>
        /// Test ReleasesListByDistributionGroup
        /// </summary>
        [Test]
        public void ReleasesListByDistributionGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string distributionGroupName = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.ReleasesListByDistributionGroup(distributionGroupName, ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20059>> (response, "response is List<InlineResponse20059>");
        }
        /// <summary>
        /// Test ReleasesListLatest
        /// </summary>
        [Test]
        public void ReleasesListLatestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.ReleasesListLatest(ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20034>> (response, "response is List<InlineResponse20034>");
        }
        /// <summary>
        /// Test ReleasesPutDistributionGroup
        /// </summary>
        [Test]
        public void ReleasesPutDistributionGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? releaseId = null;
            //Guid? groupId = null;
            //string ownerName = null;
            //string appName = null;
            //GroupsGroupIdBody body = null;
            //instance.ReleasesPutDistributionGroup(releaseId, groupId, ownerName, appName, body);
            
        }
        /// <summary>
        /// Test ReleasesPutDistributionTester
        /// </summary>
        [Test]
        public void ReleasesPutDistributionTesterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? releaseId = null;
            //Guid? testerId = null;
            //string ownerName = null;
            //string appName = null;
            //TestersTesterIdBody body = null;
            //instance.ReleasesPutDistributionTester(releaseId, testerId, ownerName, appName, body);
            
        }
        /// <summary>
        /// Test ReleasesUpdate
        /// </summary>
        [Test]
        public void ReleasesUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReleasesReleaseIdBody1 body = null;
            //int? releaseId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.ReleasesUpdate(body, releaseId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ReleasesUpdateDetails
        /// </summary>
        [Test]
        public void ReleasesUpdateDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReleasesReleaseIdBody body = null;
            //int? releaseId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.ReleasesUpdateDetails(body, releaseId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ReleasesUpdateReleaseUploadStatus
        /// </summary>
        [Test]
        public void ReleasesUpdateReleaseUploadStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReleasesUploadIdBody body = null;
            //Guid? uploadId = null;
            //string ownerName = null;
            //string appName = null;
            //bool? extract = null;
            //var response = instance.ReleasesUpdateReleaseUploadStatus(body, uploadId, ownerName, appName, extract);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test StoreNotificationsGetNotificationByAppId
        /// </summary>
        [Test]
        public void StoreNotificationsGetNotificationByAppIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.StoreNotificationsGetNotificationByAppId(ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test StoreReleasePublishLogsGet
        /// </summary>
        [Test]
        public void StoreReleasePublishLogsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeName = null;
            //string releaseId = null;
            //string ownerName = null;
            //string appName = null;
            //instance.StoreReleasePublishLogsGet(storeName, releaseId, ownerName, appName);
            
        }
        /// <summary>
        /// Test StoreReleasesDelete
        /// </summary>
        [Test]
        public void StoreReleasesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeName = null;
            //string releaseId = null;
            //string ownerName = null;
            //string appName = null;
            //string body = null;
            //instance.StoreReleasesDelete(storeName, releaseId, ownerName, appName, body);
            
        }
        /// <summary>
        /// Test StoreReleasesGet
        /// </summary>
        [Test]
        public void StoreReleasesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeName = null;
            //string releaseId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.StoreReleasesGet(storeName, releaseId, ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20056>> (response, "response is List<InlineResponse20056>");
        }
        /// <summary>
        /// Test StoreReleasesGetLatest
        /// </summary>
        [Test]
        public void StoreReleasesGetLatestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeName = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.StoreReleasesGetLatest(storeName, ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20056>> (response, "response is List<InlineResponse20056>");
        }
        /// <summary>
        /// Test StoreReleasesGetPublishError
        /// </summary>
        [Test]
        public void StoreReleasesGetPublishErrorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeName = null;
            //decimal? releaseId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.StoreReleasesGetPublishError(storeName, releaseId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test StoreReleasesGetRealTimeStatusByReleaseId
        /// </summary>
        [Test]
        public void StoreReleasesGetRealTimeStatusByReleaseIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeName = null;
            //decimal? releaseId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.StoreReleasesGetRealTimeStatusByReleaseId(storeName, releaseId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test StoreReleasesList
        /// </summary>
        [Test]
        public void StoreReleasesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeName = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.StoreReleasesList(storeName, ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20057>> (response, "response is List<InlineResponse20057>");
        }
        /// <summary>
        /// Test StoresCreate
        /// </summary>
        [Test]
        public void StoresCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AppNameDistributionStoresBody body = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.StoresCreate(body, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test StoresDelete
        /// </summary>
        [Test]
        public void StoresDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeName = null;
            //string ownerName = null;
            //string appName = null;
            //string body = null;
            //instance.StoresDelete(storeName, ownerName, appName, body);
            
        }
        /// <summary>
        /// Test StoresGet
        /// </summary>
        [Test]
        public void StoresGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeName = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.StoresGet(storeName, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test StoresList
        /// </summary>
        [Test]
        public void StoresListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.StoresList(ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20058>> (response, "response is List<InlineResponse20058>");
        }
        /// <summary>
        /// Test StoresPatch
        /// </summary>
        [Test]
        public void StoresPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DistributionStoresStoreNameBody body = null;
            //string storeName = null;
            //string ownerName = null;
            //string appName = null;
            //instance.StoresPatch(body, storeName, ownerName, appName);
            
        }
    }

}
