/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccountApiTests
    {
        private AccountApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountApi
            //Assert.IsInstanceOfType(typeof(AccountApi), instance, "instance is a AccountApi");
        }

        /// <summary>
        /// Test AppApiTokensDelete
        /// </summary>
        [Test]
        public void AppApiTokensDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //string apiTokenId = null;
            //instance.AppApiTokensDelete(ownerName, appName, apiTokenId);
            
        }
        /// <summary>
        /// Test AppApiTokensList
        /// </summary>
        [Test]
        public void AppApiTokensListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.AppApiTokensList(ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20075>> (response, "response is List<InlineResponse20075>");
        }
        /// <summary>
        /// Test AppApiTokensNew
        /// </summary>
        [Test]
        public void AppApiTokensNewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //AppNameApiTokensBody body = null;
            //var response = instance.AppApiTokensNew(ownerName, appName, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test AppInvitationsAccept
        /// </summary>
        [Test]
        public void AppInvitationsAcceptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string invitationToken = null;
            //Object body = null;
            //instance.AppInvitationsAccept(invitationToken, body);
            
        }
        /// <summary>
        /// Test AppInvitationsCreate
        /// </summary>
        [Test]
        public void AppInvitationsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //AppNameInvitationsBody body = null;
            //instance.AppInvitationsCreate(ownerName, appName, body);
            
        }
        /// <summary>
        /// Test AppInvitationsCreateByEmail
        /// </summary>
        [Test]
        public void AppInvitationsCreateByEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //string userEmail = null;
            //InvitationsUserEmailBody body = null;
            //instance.AppInvitationsCreateByEmail(ownerName, appName, userEmail, body);
            
        }
        /// <summary>
        /// Test AppInvitationsDelete
        /// </summary>
        [Test]
        public void AppInvitationsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //string userEmail = null;
            //instance.AppInvitationsDelete(ownerName, appName, userEmail);
            
        }
        /// <summary>
        /// Test AppInvitationsList
        /// </summary>
        [Test]
        public void AppInvitationsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.AppInvitationsList(ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test AppInvitationsReject
        /// </summary>
        [Test]
        public void AppInvitationsRejectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string invitationToken = null;
            //Object body = null;
            //instance.AppInvitationsReject(invitationToken, body);
            
        }
        /// <summary>
        /// Test AppInvitationsUpdatePermissions
        /// </summary>
        [Test]
        public void AppInvitationsUpdatePermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InvitationsUserEmailBody1 body = null;
            //string ownerName = null;
            //string appName = null;
            //string userEmail = null;
            //instance.AppInvitationsUpdatePermissions(body, ownerName, appName, userEmail);
            
        }
        /// <summary>
        /// Test AppsCreate
        /// </summary>
        [Test]
        public void AppsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //V01AppsBody body = null;
            //var response = instance.AppsCreate(body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test AppsCreateForOrg
        /// </summary>
        [Test]
        public void AppsCreateForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrgNameAppsBody body = null;
            //string orgName = null;
            //var response = instance.AppsCreateForOrg(body, orgName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test AppsDelete
        /// </summary>
        [Test]
        public void AppsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appName = null;
            //string ownerName = null;
            //instance.AppsDelete(appName, ownerName);
            
        }
        /// <summary>
        /// Test AppsDeleteAvatar
        /// </summary>
        [Test]
        public void AppsDeleteAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.AppsDeleteAvatar(ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test AppsGet
        /// </summary>
        [Test]
        public void AppsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.AppsGet(ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test AppsGetForOrgUser
        /// </summary>
        [Test]
        public void AppsGetForOrgUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string userName = null;
            //var response = instance.AppsGetForOrgUser(orgName, userName);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        /// <summary>
        /// Test AppsGetTeams
        /// </summary>
        [Test]
        public void AppsGetTeamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appName = null;
            //string ownerName = null;
            //var response = instance.AppsGetTeams(appName, ownerName);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        /// <summary>
        /// Test AppsList
        /// </summary>
        [Test]
        public void AppsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orderBy = null;
            //var response = instance.AppsList(orderBy);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        /// <summary>
        /// Test AppsListForOrg
        /// </summary>
        [Test]
        public void AppsListForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //var response = instance.AppsListForOrg(orgName);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        /// <summary>
        /// Test AppsListTesters
        /// </summary>
        [Test]
        public void AppsListTestersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.AppsListTesters(ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20019>> (response, "response is List<InlineResponse20019>");
        }
        /// <summary>
        /// Test AppsRemoveUser
        /// </summary>
        [Test]
        public void AppsRemoveUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //string userEmail = null;
            //instance.AppsRemoveUser(ownerName, appName, userEmail);
            
        }
        /// <summary>
        /// Test AppsTransferOwnership
        /// </summary>
        [Test]
        public void AppsTransferOwnershipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //string destinationOwnerName = null;
            //Object body = null;
            //var response = instance.AppsTransferOwnership(ownerName, appName, destinationOwnerName, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test AppsTransferToOrg
        /// </summary>
        [Test]
        public void AppsTransferToOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //Object body = null;
            //var response = instance.AppsTransferToOrg(ownerName, appName, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test AppsUpdate
        /// </summary>
        [Test]
        public void AppsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appName = null;
            //string ownerName = null;
            //OwnerNameAppNameBody body = null;
            //var response = instance.AppsUpdate(appName, ownerName, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test AppsUpdateAvatar
        /// </summary>
        [Test]
        public void AppsUpdateAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //byte[] avatar = null;
            //var response = instance.AppsUpdateAvatar(ownerName, appName, avatar);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test AppsUpdateUserPermissions
        /// </summary>
        [Test]
        public void AppsUpdateUserPermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UsersUserEmailBody body = null;
            //string ownerName = null;
            //string appName = null;
            //string userEmail = null;
            //instance.AppsUpdateUserPermissions(body, ownerName, appName, userEmail);
            
        }
        /// <summary>
        /// Test AzureSubscriptionDeleteForApp
        /// </summary>
        [Test]
        public void AzureSubscriptionDeleteForAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? azureSubscriptionId = null;
            //string ownerName = null;
            //string appName = null;
            //instance.AzureSubscriptionDeleteForApp(azureSubscriptionId, ownerName, appName);
            
        }
        /// <summary>
        /// Test AzureSubscriptionLinkForApp
        /// </summary>
        [Test]
        public void AzureSubscriptionLinkForAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AppNameAzureSubscriptionsBody body = null;
            //string ownerName = null;
            //string appName = null;
            //instance.AzureSubscriptionLinkForApp(body, ownerName, appName);
            
        }
        /// <summary>
        /// Test AzureSubscriptionListForApp
        /// </summary>
        [Test]
        public void AzureSubscriptionListForAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.AzureSubscriptionListForApp(ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20011>> (response, "response is List<InlineResponse20011>");
        }
        /// <summary>
        /// Test AzureSubscriptionListForOrg
        /// </summary>
        [Test]
        public void AzureSubscriptionListForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //var response = instance.AzureSubscriptionListForOrg(orgName);
            //Assert.IsInstanceOf<List<InlineResponse20011>> (response, "response is List<InlineResponse20011>");
        }
        /// <summary>
        /// Test AzureSubscriptionListForUser
        /// </summary>
        [Test]
        public void AzureSubscriptionListForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AzureSubscriptionListForUser();
            //Assert.IsInstanceOf<List<InlineResponse20011>> (response, "response is List<InlineResponse20011>");
        }
        /// <summary>
        /// Test DistributionGroupInvitationsAcceptAll
        /// </summary>
        [Test]
        public void DistributionGroupInvitationsAcceptAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //instance.DistributionGroupInvitationsAcceptAll(body);
            
        }
        /// <summary>
        /// Test DistributionGroupsAddApps
        /// </summary>
        [Test]
        public void DistributionGroupsAddAppsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DistributionGroupNameAppsBody body = null;
            //string orgName = null;
            //string distributionGroupName = null;
            //instance.DistributionGroupsAddApps(body, orgName, distributionGroupName);
            
        }
        /// <summary>
        /// Test DistributionGroupsAddUser
        /// </summary>
        [Test]
        public void DistributionGroupsAddUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DistributionGroupNameMembersBody1 body = null;
            //string ownerName = null;
            //string appName = null;
            //string distributionGroupName = null;
            //var response = instance.DistributionGroupsAddUser(body, ownerName, appName, distributionGroupName);
            //Assert.IsInstanceOf<List<InlineResponse20010>> (response, "response is List<InlineResponse20010>");
        }
        /// <summary>
        /// Test DistributionGroupsAddUsersForOrg
        /// </summary>
        [Test]
        public void DistributionGroupsAddUsersForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DistributionGroupNameMembersBody body = null;
            //string orgName = null;
            //string distributionGroupName = null;
            //var response = instance.DistributionGroupsAddUsersForOrg(body, orgName, distributionGroupName);
            //Assert.IsInstanceOf<List<InlineResponse20010>> (response, "response is List<InlineResponse20010>");
        }
        /// <summary>
        /// Test DistributionGroupsBulkDeleteApps
        /// </summary>
        [Test]
        public void DistributionGroupsBulkDeleteAppsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AppsBulkDeleteBody body = null;
            //string orgName = null;
            //string distributionGroupName = null;
            //instance.DistributionGroupsBulkDeleteApps(body, orgName, distributionGroupName);
            
        }
        /// <summary>
        /// Test DistributionGroupsBulkDeleteUsers
        /// </summary>
        [Test]
        public void DistributionGroupsBulkDeleteUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MembersBulkDeleteBody body = null;
            //string orgName = null;
            //string distributionGroupName = null;
            //instance.DistributionGroupsBulkDeleteUsers(body, orgName, distributionGroupName);
            
        }
        /// <summary>
        /// Test DistributionGroupsCreate
        /// </summary>
        [Test]
        public void DistributionGroupsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AppNameDistributionGroupsBody body = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.DistributionGroupsCreate(body, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DistributionGroupsCreateForOrg
        /// </summary>
        [Test]
        public void DistributionGroupsCreateForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrgNameDistributionGroupsBody body = null;
            //string orgName = null;
            //var response = instance.DistributionGroupsCreateForOrg(body, orgName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DistributionGroupsDelete
        /// </summary>
        [Test]
        public void DistributionGroupsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appName = null;
            //string ownerName = null;
            //string distributionGroupName = null;
            //instance.DistributionGroupsDelete(appName, ownerName, distributionGroupName);
            
        }
        /// <summary>
        /// Test DistributionGroupsDeleteForOrg
        /// </summary>
        [Test]
        public void DistributionGroupsDeleteForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string distributionGroupName = null;
            //instance.DistributionGroupsDeleteForOrg(orgName, distributionGroupName);
            
        }
        /// <summary>
        /// Test DistributionGroupsDetailsForOrg
        /// </summary>
        [Test]
        public void DistributionGroupsDetailsForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //decimal? appsLimit = null;
            //var response = instance.DistributionGroupsDetailsForOrg(orgName, appsLimit);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        /// <summary>
        /// Test DistributionGroupsGet
        /// </summary>
        [Test]
        public void DistributionGroupsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //string distributionGroupName = null;
            //var response = instance.DistributionGroupsGet(ownerName, appName, distributionGroupName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DistributionGroupsGetApps
        /// </summary>
        [Test]
        public void DistributionGroupsGetAppsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string distributionGroupName = null;
            //var response = instance.DistributionGroupsGetApps(orgName, distributionGroupName);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        /// <summary>
        /// Test DistributionGroupsGetForOrg
        /// </summary>
        [Test]
        public void DistributionGroupsGetForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string distributionGroupName = null;
            //var response = instance.DistributionGroupsGetForOrg(orgName, distributionGroupName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DistributionGroupsList
        /// </summary>
        [Test]
        public void DistributionGroupsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.DistributionGroupsList(ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse201>> (response, "response is List<InlineResponse201>");
        }
        /// <summary>
        /// Test DistributionGroupsListAllTestersForOrg
        /// </summary>
        [Test]
        public void DistributionGroupsListAllTestersForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //var response = instance.DistributionGroupsListAllTestersForOrg(orgName);
            //Assert.IsInstanceOf<List<InlineResponse2006>> (response, "response is List<InlineResponse2006>");
        }
        /// <summary>
        /// Test DistributionGroupsListForOrg
        /// </summary>
        [Test]
        public void DistributionGroupsListForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //var response = instance.DistributionGroupsListForOrg(orgName);
            //Assert.IsInstanceOf<List<InlineResponse201>> (response, "response is List<InlineResponse201>");
        }
        /// <summary>
        /// Test DistributionGroupsListUsers
        /// </summary>
        [Test]
        public void DistributionGroupsListUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //string distributionGroupName = null;
            //bool? excludePendingInvitations = null;
            //var response = instance.DistributionGroupsListUsers(ownerName, appName, distributionGroupName, excludePendingInvitations);
            //Assert.IsInstanceOf<List<InlineResponse2009>> (response, "response is List<InlineResponse2009>");
        }
        /// <summary>
        /// Test DistributionGroupsListUsersForOrg
        /// </summary>
        [Test]
        public void DistributionGroupsListUsersForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string distributionGroupName = null;
            //var response = instance.DistributionGroupsListUsersForOrg(orgName, distributionGroupName);
            //Assert.IsInstanceOf<List<InlineResponse2009>> (response, "response is List<InlineResponse2009>");
        }
        /// <summary>
        /// Test DistributionGroupsPatchForOrg
        /// </summary>
        [Test]
        public void DistributionGroupsPatchForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string distributionGroupName = null;
            //DistributionGroupsDistributionGroupNameBody body = null;
            //var response = instance.DistributionGroupsPatchForOrg(orgName, distributionGroupName, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DistributionGroupsRemoveUser
        /// </summary>
        [Test]
        public void DistributionGroupsRemoveUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MembersBulkDeleteBody1 body = null;
            //string ownerName = null;
            //string appName = null;
            //string distributionGroupName = null;
            //var response = instance.DistributionGroupsRemoveUser(body, ownerName, appName, distributionGroupName);
            //Assert.IsInstanceOf<List<InlineResponse20060>> (response, "response is List<InlineResponse20060>");
        }
        /// <summary>
        /// Test DistributionGroupsResendInvite
        /// </summary>
        [Test]
        public void DistributionGroupsResendInviteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DistributionGroupNameResendInviteBody1 body = null;
            //string ownerName = null;
            //string appName = null;
            //string distributionGroupName = null;
            //instance.DistributionGroupsResendInvite(body, ownerName, appName, distributionGroupName);
            
        }
        /// <summary>
        /// Test DistributionGroupsResendSharedInvite
        /// </summary>
        [Test]
        public void DistributionGroupsResendSharedInviteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DistributionGroupNameResendInviteBody body = null;
            //string orgName = null;
            //string distributionGroupName = null;
            //instance.DistributionGroupsResendSharedInvite(body, orgName, distributionGroupName);
            
        }
        /// <summary>
        /// Test DistributionGroupsUpdate
        /// </summary>
        [Test]
        public void DistributionGroupsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DistributionGroupsDistributionGroupNameBody1 body = null;
            //string ownerName = null;
            //string appName = null;
            //string distributionGroupName = null;
            //var response = instance.DistributionGroupsUpdate(body, ownerName, appName, distributionGroupName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test InvitationsSent
        /// </summary>
        [Test]
        public void InvitationsSentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.InvitationsSent();
            //Assert.IsInstanceOf<List<InlineResponse20014>> (response, "response is List<InlineResponse20014>");
        }
        /// <summary>
        /// Test OrgInvitations
        /// </summary>
        [Test]
        public void OrgInvitationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string email = null;
            //Object body = null;
            //instance.OrgInvitations(orgName, email, body);
            
        }
        /// <summary>
        /// Test OrgInvitationsAccept
        /// </summary>
        [Test]
        public void OrgInvitationsAcceptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string invitationToken = null;
            //Object body = null;
            //instance.OrgInvitationsAccept(invitationToken, body);
            
        }
        /// <summary>
        /// Test OrgInvitationsCreate
        /// </summary>
        [Test]
        public void OrgInvitationsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrgNameInvitationsBody body = null;
            //string orgName = null;
            //instance.OrgInvitationsCreate(body, orgName);
            
        }
        /// <summary>
        /// Test OrgInvitationsDelete
        /// </summary>
        [Test]
        public void OrgInvitationsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrgNameInvitationsBody1 body = null;
            //string orgName = null;
            //instance.OrgInvitationsDelete(body, orgName);
            
        }
        /// <summary>
        /// Test OrgInvitationsListPending
        /// </summary>
        [Test]
        public void OrgInvitationsListPendingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //var response = instance.OrgInvitationsListPending(orgName);
            //Assert.IsInstanceOf<List<InlineResponse2008>> (response, "response is List<InlineResponse2008>");
        }
        /// <summary>
        /// Test OrgInvitationsReject
        /// </summary>
        [Test]
        public void OrgInvitationsRejectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string invitationToken = null;
            //Object body = null;
            //instance.OrgInvitationsReject(invitationToken, body);
            
        }
        /// <summary>
        /// Test OrgInvitationsSendNewInvitation
        /// </summary>
        [Test]
        public void OrgInvitationsSendNewInvitationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string email = null;
            //EmailResendBody body = null;
            //instance.OrgInvitationsSendNewInvitation(orgName, email, body);
            
        }
        /// <summary>
        /// Test OrgInvitationsUpdate
        /// </summary>
        [Test]
        public void OrgInvitationsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InvitationsEmailBody body = null;
            //string orgName = null;
            //string email = null;
            //instance.OrgInvitationsUpdate(body, orgName, email);
            
        }
        /// <summary>
        /// Test OrganizationDeleteAvatar
        /// </summary>
        [Test]
        public void OrganizationDeleteAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //var response = instance.OrganizationDeleteAvatar(orgName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test OrganizationUpdateAvatar
        /// </summary>
        [Test]
        public void OrganizationUpdateAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //byte[] avatar = null;
            //var response = instance.OrganizationUpdateAvatar(orgName, avatar);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test OrganizationsCreateOrUpdate
        /// </summary>
        [Test]
        public void OrganizationsCreateOrUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //V01OrgsBody body = null;
            //var response = instance.OrganizationsCreateOrUpdate(body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test OrganizationsDelete
        /// </summary>
        [Test]
        public void OrganizationsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //instance.OrganizationsDelete(orgName);
            
        }
        /// <summary>
        /// Test OrganizationsGet
        /// </summary>
        [Test]
        public void OrganizationsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //var response = instance.OrganizationsGet(orgName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test OrganizationsList
        /// </summary>
        [Test]
        public void OrganizationsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.OrganizationsList();
            //Assert.IsInstanceOf<List<InlineResponse20013>> (response, "response is List<InlineResponse20013>");
        }
        /// <summary>
        /// Test OrganizationsListAdministered
        /// </summary>
        [Test]
        public void OrganizationsListAdministeredTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.OrganizationsListAdministered();
            //Assert.IsInstanceOf<InlineResponse20097> (response, "response is InlineResponse20097");
        }
        /// <summary>
        /// Test OrganizationsUpdate
        /// </summary>
        [Test]
        public void OrganizationsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrgsOrgNameBody body = null;
            //string orgName = null;
            //var response = instance.OrganizationsUpdate(body, orgName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test SharedconnectionConnections
        /// </summary>
        [Test]
        public void SharedconnectionConnectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SharedconnectionConnections();
            //Assert.IsInstanceOf<List<InlineResponse2001>> (response, "response is List<InlineResponse2001>");
        }
        /// <summary>
        /// Test TeamsAddApp
        /// </summary>
        [Test]
        public void TeamsAddAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamNameAppsBody body = null;
            //string orgName = null;
            //string teamName = null;
            //var response = instance.TeamsAddApp(body, orgName, teamName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test TeamsAddUser
        /// </summary>
        [Test]
        public void TeamsAddUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamNameUsersBody body = null;
            //string orgName = null;
            //string teamName = null;
            //var response = instance.TeamsAddUser(body, orgName, teamName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test TeamsCreateTeam
        /// </summary>
        [Test]
        public void TeamsCreateTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrgNameTeamsBody body = null;
            //string orgName = null;
            //var response = instance.TeamsCreateTeam(body, orgName);
            //Assert.IsInstanceOf<List<InlineResponse2007>> (response, "response is List<InlineResponse2007>");
        }
        /// <summary>
        /// Test TeamsDelete
        /// </summary>
        [Test]
        public void TeamsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string teamName = null;
            //instance.TeamsDelete(orgName, teamName);
            
        }
        /// <summary>
        /// Test TeamsGetTeam
        /// </summary>
        [Test]
        public void TeamsGetTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string teamName = null;
            //var response = instance.TeamsGetTeam(orgName, teamName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test TeamsGetUsers
        /// </summary>
        [Test]
        public void TeamsGetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string teamName = null;
            //var response = instance.TeamsGetUsers(orgName, teamName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test TeamsListAll
        /// </summary>
        [Test]
        public void TeamsListAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //var response = instance.TeamsListAll(orgName);
            //Assert.IsInstanceOf<List<InlineResponse2007>> (response, "response is List<InlineResponse2007>");
        }
        /// <summary>
        /// Test TeamsListApps
        /// </summary>
        [Test]
        public void TeamsListAppsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string teamName = null;
            //var response = instance.TeamsListApps(orgName, teamName);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        /// <summary>
        /// Test TeamsRemoveApp
        /// </summary>
        [Test]
        public void TeamsRemoveAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string teamName = null;
            //string appName = null;
            //instance.TeamsRemoveApp(orgName, teamName, appName);
            
        }
        /// <summary>
        /// Test TeamsRemoveUser
        /// </summary>
        [Test]
        public void TeamsRemoveUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string teamName = null;
            //string userName = null;
            //instance.TeamsRemoveUser(orgName, teamName, userName);
            
        }
        /// <summary>
        /// Test TeamsUpdate
        /// </summary>
        [Test]
        public void TeamsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamsTeamNameBody body = null;
            //string orgName = null;
            //string teamName = null;
            //var response = instance.TeamsUpdate(body, orgName, teamName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test TeamsUpdatePermissions
        /// </summary>
        [Test]
        public void TeamsUpdatePermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AppsAppNameBody body = null;
            //string orgName = null;
            //string teamName = null;
            //string appName = null;
            //var response = instance.TeamsUpdatePermissions(body, orgName, teamName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UserApiTokensDelete
        /// </summary>
        [Test]
        public void UserApiTokensDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiTokenId = null;
            //instance.UserApiTokensDelete(apiTokenId);
            
        }
        /// <summary>
        /// Test UserApiTokensList
        /// </summary>
        [Test]
        public void UserApiTokensListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserApiTokensList();
            //Assert.IsInstanceOf<List<InlineResponse20075>> (response, "response is List<InlineResponse20075>");
        }
        /// <summary>
        /// Test UserApiTokensNew
        /// </summary>
        [Test]
        public void UserApiTokensNewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //V01ApiTokensBody body = null;
            //var response = instance.UserApiTokensNew(body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UsersGet
        /// </summary>
        [Test]
        public void UsersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UsersGet();
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UsersGetForOrg
        /// </summary>
        [Test]
        public void UsersGetForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string userName = null;
            //var response = instance.UsersGetForOrg(orgName, userName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UsersGetUserMetadata
        /// </summary>
        [Test]
        public void UsersGetUserMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UsersGetUserMetadata();
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UsersList
        /// </summary>
        [Test]
        public void UsersListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.UsersList(ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20019>> (response, "response is List<InlineResponse20019>");
        }
        /// <summary>
        /// Test UsersListForOrg
        /// </summary>
        [Test]
        public void UsersListForOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //var response = instance.UsersListForOrg(orgName);
            //Assert.IsInstanceOf<List<InlineResponse2005>> (response, "response is List<InlineResponse2005>");
        }
        /// <summary>
        /// Test UsersRemoveFromOrg
        /// </summary>
        [Test]
        public void UsersRemoveFromOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgName = null;
            //string userName = null;
            //instance.UsersRemoveFromOrg(orgName, userName);
            
        }
        /// <summary>
        /// Test UsersUpdate
        /// </summary>
        [Test]
        public void UsersUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //V01UserBody body = null;
            //var response = instance.UsersUpdate(body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UsersUpdateOrgRole
        /// </summary>
        [Test]
        public void UsersUpdateOrgRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UsersUserNameBody body = null;
            //string orgName = null;
            //string userName = null;
            //var response = instance.UsersUpdateOrgRole(body, orgName, userName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
    }

}
