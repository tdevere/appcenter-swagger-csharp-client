/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing BuildApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BuildApiTests
    {
        private BuildApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BuildApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BuildApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BuildApi
            //Assert.IsInstanceOfType(typeof(BuildApi), instance, "instance is a BuildApi");
        }

        /// <summary>
        /// Test BranchConfigurationsCreate
        /// </summary>
        [Test]
        public void BranchConfigurationsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> body = null;
            //string branch = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BranchConfigurationsCreate(body, branch, ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20072> (response, "response is InlineResponse20072");
        }
        /// <summary>
        /// Test BranchConfigurationsDelete
        /// </summary>
        [Test]
        public void BranchConfigurationsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string branch = null;
            //string ownerName = null;
            //string appName = null;
            //Object body = null;
            //var response = instance.BranchConfigurationsDelete(branch, ownerName, appName, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test BranchConfigurationsGet
        /// </summary>
        [Test]
        public void BranchConfigurationsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string branch = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BranchConfigurationsGet(branch, ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20072> (response, "response is InlineResponse20072");
        }
        /// <summary>
        /// Test BranchConfigurationsUpdate
        /// </summary>
        [Test]
        public void BranchConfigurationsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> body = null;
            //string branch = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BranchConfigurationsUpdate(body, branch, ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20072> (response, "response is InlineResponse20072");
        }
        /// <summary>
        /// Test BuildConfigurationsGet
        /// </summary>
        [Test]
        public void BuildConfigurationsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string branch = null;
            //string ownerName = null;
            //string appName = null;
            //string format = null;
            //var response = instance.BuildConfigurationsGet(branch, ownerName, appName, format);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test BuildsCreate
        /// </summary>
        [Test]
        public void BuildsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string branch = null;
            //string ownerName = null;
            //string appName = null;
            //BranchBuildsBody body = null;
            //var response = instance.BuildsCreate(branch, ownerName, appName, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test BuildsDistribute
        /// </summary>
        [Test]
        public void BuildsDistributeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BuildIdDistributeBody body = null;
            //int? buildId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BuildsDistribute(body, buildId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test BuildsGet
        /// </summary>
        [Test]
        public void BuildsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? buildId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BuildsGet(buildId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test BuildsGetDownloadUri
        /// </summary>
        [Test]
        public void BuildsGetDownloadUriTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? buildId = null;
            //string downloadType = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BuildsGetDownloadUri(buildId, downloadType, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test BuildsGetLog
        /// </summary>
        [Test]
        public void BuildsGetLogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? buildId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BuildsGetLog(buildId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test BuildsGetStatusByAppId
        /// </summary>
        [Test]
        public void BuildsGetStatusByAppIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BuildsGetStatusByAppId(ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test BuildsListBranches
        /// </summary>
        [Test]
        public void BuildsListBranchesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BuildsListBranches(ownerName, appName);
            //Assert.IsInstanceOf<List<Dictionary<string, Object>>> (response, "response is List<Dictionary<string, Object>>");
        }
        /// <summary>
        /// Test BuildsListByBranch
        /// </summary>
        [Test]
        public void BuildsListByBranchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string branch = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BuildsListByBranch(branch, ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20073>> (response, "response is List<InlineResponse20073>");
        }
        /// <summary>
        /// Test BuildsListToolsetProjects
        /// </summary>
        [Test]
        public void BuildsListToolsetProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string branch = null;
            //string os = null;
            //string platform = null;
            //string ownerName = null;
            //string appName = null;
            //int? maxSearchDepth = null;
            //var response = instance.BuildsListToolsetProjects(branch, os, platform, ownerName, appName, maxSearchDepth);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test BuildsListToolsets
        /// </summary>
        [Test]
        public void BuildsListToolsetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //string tools = null;
            //var response = instance.BuildsListToolsets(ownerName, appName, tools);
            //Assert.IsInstanceOf<InlineResponse20020> (response, "response is InlineResponse20020");
        }
        /// <summary>
        /// Test BuildsListXamarinSDKBundles
        /// </summary>
        [Test]
        public void BuildsListXamarinSDKBundlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BuildsListXamarinSDKBundles(ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20017>> (response, "response is List<InlineResponse20017>");
        }
        /// <summary>
        /// Test BuildsListXcodeVersions
        /// </summary>
        [Test]
        public void BuildsListXcodeVersionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BuildsListXcodeVersions(ownerName, appName);
            //Assert.IsInstanceOf<List<InlineResponse20016>> (response, "response is List<InlineResponse20016>");
        }
        /// <summary>
        /// Test BuildsUpdate
        /// </summary>
        [Test]
        public void BuildsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BuildsBuildIdBody body = null;
            //int? buildId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BuildsUpdate(body, buildId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test BuildsWebhook
        /// </summary>
        [Test]
        public void BuildsWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //instance.BuildsWebhook(body);
            
        }
        /// <summary>
        /// Test CommitsListByShaList
        /// </summary>
        [Test]
        public void CommitsListByShaListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> hashes = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.CommitsListByShaList(hashes, ownerName, appName);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        /// <summary>
        /// Test FileAssetsCreate
        /// </summary>
        [Test]
        public void FileAssetsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //Object body = null;
            //var response = instance.FileAssetsCreate(ownerName, appName, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test RepositoriesList
        /// </summary>
        [Test]
        public void RepositoriesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sourceHost = null;
            //string ownerName = null;
            //string appName = null;
            //string vstsAccountName = null;
            //string vstsProjectId = null;
            //string serviceConnectionId = null;
            //string form = null;
            //var response = instance.RepositoriesList(sourceHost, ownerName, appName, vstsAccountName, vstsProjectId, serviceConnectionId, form);
            //Assert.IsInstanceOf<List<InlineResponse20031>> (response, "response is List<InlineResponse20031>");
        }
        /// <summary>
        /// Test RepositoryConfigurationsCreateOrUpdate
        /// </summary>
        [Test]
        public void RepositoryConfigurationsCreateOrUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AppNameRepoConfigBody body = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.RepositoryConfigurationsCreateOrUpdate(body, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test RepositoryConfigurationsDelete
        /// </summary>
        [Test]
        public void RepositoryConfigurationsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.RepositoryConfigurationsDelete(ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test RepositoryConfigurationsList
        /// </summary>
        [Test]
        public void RepositoryConfigurationsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //bool? includeInactive = null;
            //var response = instance.RepositoryConfigurationsList(ownerName, appName, includeInactive);
            //Assert.IsInstanceOf<List<InlineResponse20032>> (response, "response is List<InlineResponse20032>");
        }
    }

}
