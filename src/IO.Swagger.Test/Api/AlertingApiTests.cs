/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AlertingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AlertingApiTests
    {
        private AlertingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AlertingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AlertingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AlertingApi
            //Assert.IsInstanceOfType(typeof(AlertingApi), instance, "instance is a AlertingApi");
        }

        /// <summary>
        /// Test BugTrackerGetRepoIssueFromCrash
        /// </summary>
        [Test]
        public void BugTrackerGetRepoIssueFromCrashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string crashGroupId = null;
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BugTrackerGetRepoIssueFromCrash(crashGroupId, ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test BugtrackerGetSettings
        /// </summary>
        [Test]
        public void BugtrackerGetSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.BugtrackerGetSettings(ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test NotificationsGetAppEmailSettings
        /// </summary>
        [Test]
        public void NotificationsGetAppEmailSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.NotificationsGetAppEmailSettings(ownerName, appName);
            //Assert.IsInstanceOf<InlineResponse20035> (response, "response is InlineResponse20035");
        }
        /// <summary>
        /// Test NotificationsGetUserEmailSettings
        /// </summary>
        [Test]
        public void NotificationsGetUserEmailSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.NotificationsGetUserEmailSettings();
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        /// <summary>
        /// Test WebhooksList
        /// </summary>
        [Test]
        public void WebhooksListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ownerName = null;
            //string appName = null;
            //var response = instance.WebhooksList(ownerName, appName);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
    }

}
