/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITestApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logically deletes a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestRun1</returns>
        TestRun1 TestArchiveTestRun (Guid? testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logically deletes a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestRun1</returns>
        ApiResponse<TestRun1> TestArchiveTestRunWithHttpInfo (Guid? testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a short ID for a list of devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSelection</returns>
        DeviceSelection TestCreateDeviceSelection (DeviceList body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a short ID for a list of devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSelection</returns>
        ApiResponse<DeviceSelection> TestCreateDeviceSelectionWithHttpInfo (DeviceList body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSet</returns>
        DeviceSet TestCreateDeviceSetOfOwner (DeviceSetUpdateInformation3 body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSet</returns>
        ApiResponse<DeviceSet> TestCreateDeviceSetOfOwnerWithHttpInfo (DeviceSetUpdateInformation3 body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSet</returns>
        DeviceSet TestCreateDeviceSetOfUser (DeviceSetUpdateInformation1 body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSet</returns>
        ApiResponse<DeviceSet> TestCreateDeviceSetOfUserWithHttpInfo (DeviceSetUpdateInformation1 body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accept a free trial subscription
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Subscription1</returns>
        Subscription1 TestCreateSubscription (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accept a free trial subscription
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Subscription1</returns>
        ApiResponse<Subscription1> TestCreateSubscriptionWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void TestCreateTestRun (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TestCreateTestRunWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates new test series for an application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestSeries</returns>
        TestSeries TestCreateTestSeries (NameOfTheTestSeries1 body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates new test series for an application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestSeries</returns>
        ApiResponse<TestSeries> TestCreateTestSeriesWithHttpInfo (NameOfTheTestSeries1 body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void TestDeleteDeviceSetOfOwner (Guid? id, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TestDeleteDeviceSetOfOwnerWithHttpInfo (Guid? id, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void TestDeleteDeviceSetOfUser (Guid? id, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TestDeleteDeviceSetOfUserWithHttpInfo (Guid? id, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single test series
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void TestDeleteTestSeries (string testSeriesSlug, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single test series
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TestDeleteTestSeriesWithHttpInfo (string testSeriesSlug, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists account data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20099</returns>
        InlineResponse20099 TestGdprExportAccount ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists account data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20099</returns>
        ApiResponse<InlineResponse20099> TestGdprExportAccountWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the endpoints available for Test accounts data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 TestGdprExportAccounts ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the endpoints available for Test accounts data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> TestGdprExportAccountsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists app data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 TestGdprExportApp (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists app data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> TestGdprExportAppWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the endpoints available for Test apps data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 TestGdprExportApps (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the endpoints available for Test apps data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> TestGdprExportAppsWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists feature flag data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20098</returns>
        InlineResponse20098 TestGdprExportFeatureFlag ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists feature flag data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20098</returns>
        ApiResponse<InlineResponse20098> TestGdprExportFeatureFlagWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists file set file data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 TestGdprExportFileSetFile (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists file set file data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> TestGdprExportFileSetFileWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists hash file data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 TestGdprExportHashFile (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists hash file data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> TestGdprExportHashFileWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists pipeline test data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 TestGdprExportPipelineTest (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists pipeline test data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> TestGdprExportPipelineTestWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists test run data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 TestGdprExportTestRun (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists test run data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> TestGdprExportTestRunWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns list of all test runs for a given test series
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;TestRun&gt;</returns>
        List<TestRun> TestGetAllTestRunsForSeries (string testSeriesSlug, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns list of all test runs for a given test series
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;TestRun&gt;</returns>
        ApiResponse<List<TestRun>> TestGetAllTestRunsForSeriesWithHttpInfo (string testSeriesSlug, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns list of all test series for an application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="query">A query string to filter test series (optional)</param>
        /// <returns>List&lt;TestSeries1&gt;</returns>
        List<TestSeries1> TestGetAllTestSeries (string ownerName, string appName, string query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns list of all test series for an application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="query">A query string to filter test series (optional)</param>
        /// <returns>ApiResponse of List&lt;TestSeries1&gt;</returns>
        ApiResponse<List<TestSeries1>> TestGetAllTestSeriesWithHttpInfo (string ownerName, string appName, string query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of available devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="appUploadId">The ID of the test run (optional)</param>
        /// <returns>List&lt;InlineResponse20061&gt;</returns>
        List<InlineResponse20061> TestGetDeviceConfigurations (string ownerName, string appName, Guid? appUploadId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of available devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="appUploadId">The ID of the test run (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20061&gt;</returns>
        ApiResponse<List<InlineResponse20061>> TestGetDeviceConfigurationsWithHttpInfo (string ownerName, string appName, Guid? appUploadId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSet</returns>
        DeviceSet TestGetDeviceSetOfOwner (Guid? id, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSet</returns>
        ApiResponse<DeviceSet> TestGetDeviceSetOfOwnerWithHttpInfo (Guid? id, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSet</returns>
        DeviceSet TestGetDeviceSetOfUser (Guid? id, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSet</returns>
        ApiResponse<DeviceSet> TestGetDeviceSetOfUserWithHttpInfo (Guid? id, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the currently active subscriptions, if any
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Subscription1</returns>
        Subscription1 TestGetSubscriptions (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the currently active subscriptions, if any
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Subscription1</returns>
        ApiResponse<Subscription1> TestGetSubscriptionsWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single test report
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object TestGetTestReport (Guid? testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single test report
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TestGetTestReportWithHttpInfo (Guid? testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single test runs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestRun1</returns>
        TestRun1 TestGetTestRun (Guid? testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single test runs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestRun1</returns>
        ApiResponse<TestRun1> TestGetTestRunWithHttpInfo (Guid? testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets state of the test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestRunState</returns>
        TestRunState TestGetTestRunState (string testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets state of the test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestRunState</returns>
        ApiResponse<TestRunState> TestGetTestRunStateWithHttpInfo (string testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of test runs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;TestRun&gt;</returns>
        List<TestRun> TestGetTestRuns (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of test runs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;TestRun&gt;</returns>
        ApiResponse<List<TestRun>> TestGetTestRunsWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists device sets belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;DeviceSet2&gt;</returns>
        List<DeviceSet2> TestListDeviceSetsOfOwner (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists device sets belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;DeviceSet2&gt;</returns>
        ApiResponse<List<DeviceSet2>> TestListDeviceSetsOfOwnerWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists device sets belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;DeviceSet1&gt;</returns>
        List<DeviceSet1> TestListDeviceSetsOfUser (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists device sets belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;DeviceSet1&gt;</returns>
        ApiResponse<List<DeviceSet1>> TestListDeviceSetsOfUserWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates name and slug of a test series
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestSeries</returns>
        TestSeries TestPatchTestSeries (NameOfTheTestSeries body, string testSeriesSlug, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates name and slug of a test series
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestSeries</returns>
        ApiResponse<TestSeries> TestPatchTestSeriesWithHttpInfo (NameOfTheTestSeries body, string testSeriesSlug, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Option required to start the test run</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestCloudTestRunStartResult</returns>
        TestCloudTestRunStartResult TestStartTestRun (TestCloudStartTestRunOptions body, string testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Option required to start the test run</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestCloudTestRunStartResult</returns>
        ApiResponse<TestCloudTestRunStartResult> TestStartTestRunWithHttpInfo (TestCloudStartTestRunOptions body, string testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Uploads file for a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void TestStartUploadingFile (string testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Uploads file for a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TestStartUploadingFileWithHttpInfo (string testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop a test run execution
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run to be stopped</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestRun1</returns>
        TestRun1 TestStopTestRun (string testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop a test run execution
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run to be stopped</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestRun1</returns>
        ApiResponse<TestRun1> TestStopTestRunWithHttpInfo (string testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSet</returns>
        DeviceSet TestUpdateDeviceSetOfOwner (DeviceSetUpdateInformation2 body, Guid? id, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSet</returns>
        ApiResponse<DeviceSet> TestUpdateDeviceSetOfOwnerWithHttpInfo (DeviceSetUpdateInformation2 body, Guid? id, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSet</returns>
        DeviceSet TestUpdateDeviceSetOfUser (DeviceSetUpdateInformation body, Guid? id, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSet</returns>
        ApiResponse<DeviceSet> TestUpdateDeviceSetOfUserWithHttpInfo (DeviceSetUpdateInformation body, Guid? id, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds file with the given hash to a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void TestUploadHash (TestCloudFileHash1 body, string testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds file with the given hash to a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TestUploadHashWithHttpInfo (TestCloudFileHash1 body, string testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds file with the given hash to a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;TestCloudFileHashResponse&gt;</returns>
        List<TestCloudFileHashResponse> TestUploadHashesBatch (List<TestCloudFileHash> body, string testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds file with the given hash to a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;TestCloudFileHashResponse&gt;</returns>
        ApiResponse<List<TestCloudFileHashResponse>> TestUploadHashesBatchWithHttpInfo (List<TestCloudFileHash> body, string testRunId, string ownerName, string appName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logically deletes a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestRun1</returns>
        System.Threading.Tasks.Task<TestRun1> TestArchiveTestRunAsync (Guid? testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logically deletes a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestRun1)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestRun1>> TestArchiveTestRunAsyncWithHttpInfo (Guid? testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a short ID for a list of devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSelection</returns>
        System.Threading.Tasks.Task<DeviceSelection> TestCreateDeviceSelectionAsync (DeviceList body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a short ID for a list of devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSelection)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceSelection>> TestCreateDeviceSelectionAsyncWithHttpInfo (DeviceList body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSet</returns>
        System.Threading.Tasks.Task<DeviceSet> TestCreateDeviceSetOfOwnerAsync (DeviceSetUpdateInformation3 body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceSet>> TestCreateDeviceSetOfOwnerAsyncWithHttpInfo (DeviceSetUpdateInformation3 body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSet</returns>
        System.Threading.Tasks.Task<DeviceSet> TestCreateDeviceSetOfUserAsync (DeviceSetUpdateInformation1 body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceSet>> TestCreateDeviceSetOfUserAsyncWithHttpInfo (DeviceSetUpdateInformation1 body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accept a free trial subscription
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Subscription1</returns>
        System.Threading.Tasks.Task<Subscription1> TestCreateSubscriptionAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accept a free trial subscription
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Subscription1)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription1>> TestCreateSubscriptionAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TestCreateTestRunAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestCreateTestRunAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates new test series for an application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestSeries</returns>
        System.Threading.Tasks.Task<TestSeries> TestCreateTestSeriesAsync (NameOfTheTestSeries1 body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates new test series for an application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestSeries)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestSeries>> TestCreateTestSeriesAsyncWithHttpInfo (NameOfTheTestSeries1 body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TestDeleteDeviceSetOfOwnerAsync (Guid? id, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestDeleteDeviceSetOfOwnerAsyncWithHttpInfo (Guid? id, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TestDeleteDeviceSetOfUserAsync (Guid? id, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestDeleteDeviceSetOfUserAsyncWithHttpInfo (Guid? id, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single test series
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TestDeleteTestSeriesAsync (string testSeriesSlug, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single test series
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestDeleteTestSeriesAsyncWithHttpInfo (string testSeriesSlug, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists account data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20099</returns>
        System.Threading.Tasks.Task<InlineResponse20099> TestGdprExportAccountAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists account data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20099)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20099>> TestGdprExportAccountAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the endpoints available for Test accounts data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> TestGdprExportAccountsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the endpoints available for Test accounts data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> TestGdprExportAccountsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists app data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> TestGdprExportAppAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists app data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> TestGdprExportAppAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the endpoints available for Test apps data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> TestGdprExportAppsAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all the endpoints available for Test apps data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> TestGdprExportAppsAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists feature flag data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20098</returns>
        System.Threading.Tasks.Task<InlineResponse20098> TestGdprExportFeatureFlagAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists feature flag data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20098)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20098>> TestGdprExportFeatureFlagAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists file set file data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> TestGdprExportFileSetFileAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists file set file data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> TestGdprExportFileSetFileAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists hash file data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> TestGdprExportHashFileAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists hash file data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> TestGdprExportHashFileAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists pipeline test data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> TestGdprExportPipelineTestAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists pipeline test data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> TestGdprExportPipelineTestAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists test run data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> TestGdprExportTestRunAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists test run data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> TestGdprExportTestRunAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns list of all test runs for a given test series
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;TestRun&gt;</returns>
        System.Threading.Tasks.Task<List<TestRun>> TestGetAllTestRunsForSeriesAsync (string testSeriesSlug, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns list of all test runs for a given test series
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;TestRun&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TestRun>>> TestGetAllTestRunsForSeriesAsyncWithHttpInfo (string testSeriesSlug, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns list of all test series for an application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="query">A query string to filter test series (optional)</param>
        /// <returns>Task of List&lt;TestSeries1&gt;</returns>
        System.Threading.Tasks.Task<List<TestSeries1>> TestGetAllTestSeriesAsync (string ownerName, string appName, string query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns list of all test series for an application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="query">A query string to filter test series (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TestSeries1&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TestSeries1>>> TestGetAllTestSeriesAsyncWithHttpInfo (string ownerName, string appName, string query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of available devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="appUploadId">The ID of the test run (optional)</param>
        /// <returns>Task of List&lt;InlineResponse20061&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20061>> TestGetDeviceConfigurationsAsync (string ownerName, string appName, Guid? appUploadId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of available devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="appUploadId">The ID of the test run (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20061&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20061>>> TestGetDeviceConfigurationsAsyncWithHttpInfo (string ownerName, string appName, Guid? appUploadId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSet</returns>
        System.Threading.Tasks.Task<DeviceSet> TestGetDeviceSetOfOwnerAsync (Guid? id, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceSet>> TestGetDeviceSetOfOwnerAsyncWithHttpInfo (Guid? id, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSet</returns>
        System.Threading.Tasks.Task<DeviceSet> TestGetDeviceSetOfUserAsync (Guid? id, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceSet>> TestGetDeviceSetOfUserAsyncWithHttpInfo (Guid? id, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the currently active subscriptions, if any
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Subscription1</returns>
        System.Threading.Tasks.Task<Subscription1> TestGetSubscriptionsAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the currently active subscriptions, if any
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Subscription1)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription1>> TestGetSubscriptionsAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single test report
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TestGetTestReportAsync (Guid? testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single test report
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestGetTestReportAsyncWithHttpInfo (Guid? testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single test runs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestRun1</returns>
        System.Threading.Tasks.Task<TestRun1> TestGetTestRunAsync (Guid? testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single test runs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestRun1)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestRun1>> TestGetTestRunAsyncWithHttpInfo (Guid? testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets state of the test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestRunState</returns>
        System.Threading.Tasks.Task<TestRunState> TestGetTestRunStateAsync (string testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets state of the test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestRunState)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestRunState>> TestGetTestRunStateAsyncWithHttpInfo (string testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of test runs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;TestRun&gt;</returns>
        System.Threading.Tasks.Task<List<TestRun>> TestGetTestRunsAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of test runs
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;TestRun&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TestRun>>> TestGetTestRunsAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists device sets belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;DeviceSet2&gt;</returns>
        System.Threading.Tasks.Task<List<DeviceSet2>> TestListDeviceSetsOfOwnerAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists device sets belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceSet2&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeviceSet2>>> TestListDeviceSetsOfOwnerAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists device sets belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;DeviceSet1&gt;</returns>
        System.Threading.Tasks.Task<List<DeviceSet1>> TestListDeviceSetsOfUserAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists device sets belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceSet1&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeviceSet1>>> TestListDeviceSetsOfUserAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates name and slug of a test series
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestSeries</returns>
        System.Threading.Tasks.Task<TestSeries> TestPatchTestSeriesAsync (NameOfTheTestSeries body, string testSeriesSlug, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates name and slug of a test series
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestSeries)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestSeries>> TestPatchTestSeriesAsyncWithHttpInfo (NameOfTheTestSeries body, string testSeriesSlug, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Option required to start the test run</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestCloudTestRunStartResult</returns>
        System.Threading.Tasks.Task<TestCloudTestRunStartResult> TestStartTestRunAsync (TestCloudStartTestRunOptions body, string testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Option required to start the test run</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestCloudTestRunStartResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestCloudTestRunStartResult>> TestStartTestRunAsyncWithHttpInfo (TestCloudStartTestRunOptions body, string testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Uploads file for a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TestStartUploadingFileAsync (string testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Uploads file for a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestStartUploadingFileAsyncWithHttpInfo (string testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop a test run execution
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run to be stopped</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestRun1</returns>
        System.Threading.Tasks.Task<TestRun1> TestStopTestRunAsync (string testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop a test run execution
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run to be stopped</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestRun1)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestRun1>> TestStopTestRunAsyncWithHttpInfo (string testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSet</returns>
        System.Threading.Tasks.Task<DeviceSet> TestUpdateDeviceSetOfOwnerAsync (DeviceSetUpdateInformation2 body, Guid? id, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a device set belonging to the owner
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceSet>> TestUpdateDeviceSetOfOwnerAsyncWithHttpInfo (DeviceSetUpdateInformation2 body, Guid? id, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSet</returns>
        System.Threading.Tasks.Task<DeviceSet> TestUpdateDeviceSetOfUserAsync (DeviceSetUpdateInformation body, Guid? id, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a device set belonging to the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceSet>> TestUpdateDeviceSetOfUserAsyncWithHttpInfo (DeviceSetUpdateInformation body, Guid? id, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds file with the given hash to a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TestUploadHashAsync (TestCloudFileHash1 body, string testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds file with the given hash to a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestUploadHashAsyncWithHttpInfo (TestCloudFileHash1 body, string testRunId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds file with the given hash to a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;TestCloudFileHashResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TestCloudFileHashResponse>> TestUploadHashesBatchAsync (List<TestCloudFileHash> body, string testRunId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds file with the given hash to a test run
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;TestCloudFileHashResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TestCloudFileHashResponse>>> TestUploadHashesBatchAsyncWithHttpInfo (List<TestCloudFileHash> body, string testRunId, string ownerName, string appName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TestApi : ITestApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TestApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TestApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestApi"/> class
        /// </summary>
        /// <returns></returns>
        public TestApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TestApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Logically deletes a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestRun1</returns>
        public TestRun1 TestArchiveTestRun (Guid? testRunId, string ownerName, string appName)
        {
             ApiResponse<TestRun1> localVarResponse = TestArchiveTestRunWithHttpInfo(testRunId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Logically deletes a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestRun1</returns>
        public ApiResponse< TestRun1 > TestArchiveTestRunWithHttpInfo (Guid? testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestArchiveTestRun");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestArchiveTestRun");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestArchiveTestRun");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestArchiveTestRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestRun1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestRun1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestRun1)));
        }

        /// <summary>
        ///  Logically deletes a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestRun1</returns>
        public async System.Threading.Tasks.Task<TestRun1> TestArchiveTestRunAsync (Guid? testRunId, string ownerName, string appName)
        {
             ApiResponse<TestRun1> localVarResponse = await TestArchiveTestRunAsyncWithHttpInfo(testRunId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Logically deletes a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestRun1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TestRun1>> TestArchiveTestRunAsyncWithHttpInfo (Guid? testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestArchiveTestRun");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestArchiveTestRun");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestArchiveTestRun");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestArchiveTestRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestRun1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestRun1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestRun1)));
        }

        /// <summary>
        ///  Creates a short ID for a list of devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSelection</returns>
        public DeviceSelection TestCreateDeviceSelection (DeviceList body, string ownerName, string appName)
        {
             ApiResponse<DeviceSelection> localVarResponse = TestCreateDeviceSelectionWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a short ID for a list of devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSelection</returns>
        public ApiResponse< DeviceSelection > TestCreateDeviceSelectionWithHttpInfo (DeviceList body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestCreateDeviceSelection");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestCreateDeviceSelection");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestCreateDeviceSelection");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/device_selection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestCreateDeviceSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSelection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSelection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSelection)));
        }

        /// <summary>
        ///  Creates a short ID for a list of devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSelection</returns>
        public async System.Threading.Tasks.Task<DeviceSelection> TestCreateDeviceSelectionAsync (DeviceList body, string ownerName, string appName)
        {
             ApiResponse<DeviceSelection> localVarResponse = await TestCreateDeviceSelectionAsyncWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a short ID for a list of devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSelection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceSelection>> TestCreateDeviceSelectionAsyncWithHttpInfo (DeviceList body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestCreateDeviceSelection");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestCreateDeviceSelection");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestCreateDeviceSelection");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/device_selection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestCreateDeviceSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSelection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSelection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSelection)));
        }

        /// <summary>
        ///  Creates a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSet</returns>
        public DeviceSet TestCreateDeviceSetOfOwner (DeviceSetUpdateInformation3 body, string ownerName, string appName)
        {
             ApiResponse<DeviceSet> localVarResponse = TestCreateDeviceSetOfOwnerWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSet</returns>
        public ApiResponse< DeviceSet > TestCreateDeviceSetOfOwnerWithHttpInfo (DeviceSetUpdateInformation3 body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestCreateDeviceSetOfOwner");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestCreateDeviceSetOfOwner");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestCreateDeviceSetOfOwner");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestCreateDeviceSetOfOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSet)));
        }

        /// <summary>
        ///  Creates a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSet</returns>
        public async System.Threading.Tasks.Task<DeviceSet> TestCreateDeviceSetOfOwnerAsync (DeviceSetUpdateInformation3 body, string ownerName, string appName)
        {
             ApiResponse<DeviceSet> localVarResponse = await TestCreateDeviceSetOfOwnerAsyncWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceSet>> TestCreateDeviceSetOfOwnerAsyncWithHttpInfo (DeviceSetUpdateInformation3 body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestCreateDeviceSetOfOwner");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestCreateDeviceSetOfOwner");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestCreateDeviceSetOfOwner");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestCreateDeviceSetOfOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSet)));
        }

        /// <summary>
        ///  Creates a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSet</returns>
        public DeviceSet TestCreateDeviceSetOfUser (DeviceSetUpdateInformation1 body, string ownerName, string appName)
        {
             ApiResponse<DeviceSet> localVarResponse = TestCreateDeviceSetOfUserWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSet</returns>
        public ApiResponse< DeviceSet > TestCreateDeviceSetOfUserWithHttpInfo (DeviceSetUpdateInformation1 body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestCreateDeviceSetOfUser");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestCreateDeviceSetOfUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestCreateDeviceSetOfUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestCreateDeviceSetOfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSet)));
        }

        /// <summary>
        ///  Creates a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSet</returns>
        public async System.Threading.Tasks.Task<DeviceSet> TestCreateDeviceSetOfUserAsync (DeviceSetUpdateInformation1 body, string ownerName, string appName)
        {
             ApiResponse<DeviceSet> localVarResponse = await TestCreateDeviceSetOfUserAsyncWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceSet>> TestCreateDeviceSetOfUserAsyncWithHttpInfo (DeviceSetUpdateInformation1 body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestCreateDeviceSetOfUser");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestCreateDeviceSetOfUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestCreateDeviceSetOfUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestCreateDeviceSetOfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSet)));
        }

        /// <summary>
        ///  Accept a free trial subscription
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Subscription1</returns>
        public Subscription1 TestCreateSubscription (string ownerName, string appName)
        {
             ApiResponse<Subscription1> localVarResponse = TestCreateSubscriptionWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Accept a free trial subscription
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Subscription1</returns>
        public ApiResponse< Subscription1 > TestCreateSubscriptionWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestCreateSubscription");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestCreateSubscription");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestCreateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscription1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription1)));
        }

        /// <summary>
        ///  Accept a free trial subscription
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Subscription1</returns>
        public async System.Threading.Tasks.Task<Subscription1> TestCreateSubscriptionAsync (string ownerName, string appName)
        {
             ApiResponse<Subscription1> localVarResponse = await TestCreateSubscriptionAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Accept a free trial subscription
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Subscription1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription1>> TestCreateSubscriptionAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestCreateSubscription");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestCreateSubscription");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestCreateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscription1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription1)));
        }

        /// <summary>
        ///  Creates a new test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void TestCreateTestRun (string ownerName, string appName)
        {
             TestCreateTestRunWithHttpInfo(ownerName, appName);
        }

        /// <summary>
        ///  Creates a new test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TestCreateTestRunWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestCreateTestRun");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestCreateTestRun");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestCreateTestRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Creates a new test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TestCreateTestRunAsync (string ownerName, string appName)
        {
             await TestCreateTestRunAsyncWithHttpInfo(ownerName, appName);

        }

        /// <summary>
        ///  Creates a new test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TestCreateTestRunAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestCreateTestRun");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestCreateTestRun");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestCreateTestRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Creates new test series for an application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestSeries</returns>
        public TestSeries TestCreateTestSeries (NameOfTheTestSeries1 body, string ownerName, string appName)
        {
             ApiResponse<TestSeries> localVarResponse = TestCreateTestSeriesWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates new test series for an application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestSeries</returns>
        public ApiResponse< TestSeries > TestCreateTestSeriesWithHttpInfo (NameOfTheTestSeries1 body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestCreateTestSeries");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestCreateTestSeries");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestCreateTestSeries");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestCreateTestSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestSeries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestSeries) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestSeries)));
        }

        /// <summary>
        ///  Creates new test series for an application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestSeries</returns>
        public async System.Threading.Tasks.Task<TestSeries> TestCreateTestSeriesAsync (NameOfTheTestSeries1 body, string ownerName, string appName)
        {
             ApiResponse<TestSeries> localVarResponse = await TestCreateTestSeriesAsyncWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates new test series for an application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestSeries)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TestSeries>> TestCreateTestSeriesAsyncWithHttpInfo (NameOfTheTestSeries1 body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestCreateTestSeries");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestCreateTestSeries");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestCreateTestSeries");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestCreateTestSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestSeries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestSeries) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestSeries)));
        }

        /// <summary>
        ///  Deletes a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void TestDeleteDeviceSetOfOwner (Guid? id, string ownerName, string appName)
        {
             TestDeleteDeviceSetOfOwnerWithHttpInfo(id, ownerName, appName);
        }

        /// <summary>
        ///  Deletes a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TestDeleteDeviceSetOfOwnerWithHttpInfo (Guid? id, string ownerName, string appName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TestApi->TestDeleteDeviceSetOfOwner");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestDeleteDeviceSetOfOwner");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestDeleteDeviceSetOfOwner");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestDeleteDeviceSetOfOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TestDeleteDeviceSetOfOwnerAsync (Guid? id, string ownerName, string appName)
        {
             await TestDeleteDeviceSetOfOwnerAsyncWithHttpInfo(id, ownerName, appName);

        }

        /// <summary>
        ///  Deletes a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TestDeleteDeviceSetOfOwnerAsyncWithHttpInfo (Guid? id, string ownerName, string appName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TestApi->TestDeleteDeviceSetOfOwner");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestDeleteDeviceSetOfOwner");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestDeleteDeviceSetOfOwner");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestDeleteDeviceSetOfOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void TestDeleteDeviceSetOfUser (Guid? id, string ownerName, string appName)
        {
             TestDeleteDeviceSetOfUserWithHttpInfo(id, ownerName, appName);
        }

        /// <summary>
        ///  Deletes a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TestDeleteDeviceSetOfUserWithHttpInfo (Guid? id, string ownerName, string appName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TestApi->TestDeleteDeviceSetOfUser");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestDeleteDeviceSetOfUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestDeleteDeviceSetOfUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestDeleteDeviceSetOfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TestDeleteDeviceSetOfUserAsync (Guid? id, string ownerName, string appName)
        {
             await TestDeleteDeviceSetOfUserAsyncWithHttpInfo(id, ownerName, appName);

        }

        /// <summary>
        ///  Deletes a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TestDeleteDeviceSetOfUserAsyncWithHttpInfo (Guid? id, string ownerName, string appName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TestApi->TestDeleteDeviceSetOfUser");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestDeleteDeviceSetOfUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestDeleteDeviceSetOfUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestDeleteDeviceSetOfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes a single test series
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void TestDeleteTestSeries (string testSeriesSlug, string ownerName, string appName)
        {
             TestDeleteTestSeriesWithHttpInfo(testSeriesSlug, ownerName, appName);
        }

        /// <summary>
        ///  Deletes a single test series
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TestDeleteTestSeriesWithHttpInfo (string testSeriesSlug, string ownerName, string appName)
        {
            // verify the required parameter 'testSeriesSlug' is set
            if (testSeriesSlug == null)
                throw new ApiException(400, "Missing required parameter 'testSeriesSlug' when calling TestApi->TestDeleteTestSeries");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestDeleteTestSeries");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestDeleteTestSeries");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testSeriesSlug != null) localVarPathParams.Add("test_series_slug", this.Configuration.ApiClient.ParameterToString(testSeriesSlug)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestDeleteTestSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes a single test series
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TestDeleteTestSeriesAsync (string testSeriesSlug, string ownerName, string appName)
        {
             await TestDeleteTestSeriesAsyncWithHttpInfo(testSeriesSlug, ownerName, appName);

        }

        /// <summary>
        ///  Deletes a single test series
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TestDeleteTestSeriesAsyncWithHttpInfo (string testSeriesSlug, string ownerName, string appName)
        {
            // verify the required parameter 'testSeriesSlug' is set
            if (testSeriesSlug == null)
                throw new ApiException(400, "Missing required parameter 'testSeriesSlug' when calling TestApi->TestDeleteTestSeries");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestDeleteTestSeries");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestDeleteTestSeries");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testSeriesSlug != null) localVarPathParams.Add("test_series_slug", this.Configuration.ApiClient.ParameterToString(testSeriesSlug)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestDeleteTestSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Lists account data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20099</returns>
        public InlineResponse20099 TestGdprExportAccount ()
        {
             ApiResponse<InlineResponse20099> localVarResponse = TestGdprExportAccountWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists account data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20099</returns>
        public ApiResponse< InlineResponse20099 > TestGdprExportAccountWithHttpInfo ()
        {

            var localVarPath = "/v0.1/account/test/export/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20099>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20099) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20099)));
        }

        /// <summary>
        ///  Lists account data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20099</returns>
        public async System.Threading.Tasks.Task<InlineResponse20099> TestGdprExportAccountAsync ()
        {
             ApiResponse<InlineResponse20099> localVarResponse = await TestGdprExportAccountAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists account data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20099)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20099>> TestGdprExportAccountAsyncWithHttpInfo ()
        {

            var localVarPath = "/v0.1/account/test/export/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20099>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20099) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20099)));
        }

        /// <summary>
        ///  Lists all the endpoints available for Test accounts data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 TestGdprExportAccounts ()
        {
             ApiResponse<InlineResponse20026> localVarResponse = TestGdprExportAccountsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all the endpoints available for Test accounts data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse< InlineResponse20026 > TestGdprExportAccountsWithHttpInfo ()
        {

            var localVarPath = "/v0.1/account/test/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        ///  Lists all the endpoints available for Test accounts data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> TestGdprExportAccountsAsync ()
        {
             ApiResponse<InlineResponse20026> localVarResponse = await TestGdprExportAccountsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all the endpoints available for Test accounts data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> TestGdprExportAccountsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v0.1/account/test/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        ///  Lists app data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 TestGdprExportApp (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20025> localVarResponse = TestGdprExportAppWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists app data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public ApiResponse< InlineResponse20025 > TestGdprExportAppWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGdprExportApp");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGdprExportApp");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20025) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        ///  Lists app data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025> TestGdprExportAppAsync (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20025> localVarResponse = await TestGdprExportAppAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists app data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> TestGdprExportAppAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGdprExportApp");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGdprExportApp");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20025) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        ///  Lists all the endpoints available for Test apps data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 TestGdprExportApps (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20026> localVarResponse = TestGdprExportAppsWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all the endpoints available for Test apps data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse< InlineResponse20026 > TestGdprExportAppsWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGdprExportApps");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGdprExportApps");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        ///  Lists all the endpoints available for Test apps data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> TestGdprExportAppsAsync (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20026> localVarResponse = await TestGdprExportAppsAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all the endpoints available for Test apps data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> TestGdprExportAppsAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGdprExportApps");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGdprExportApps");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        ///  Lists feature flag data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20098</returns>
        public InlineResponse20098 TestGdprExportFeatureFlag ()
        {
             ApiResponse<InlineResponse20098> localVarResponse = TestGdprExportFeatureFlagWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists feature flag data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20098</returns>
        public ApiResponse< InlineResponse20098 > TestGdprExportFeatureFlagWithHttpInfo ()
        {

            var localVarPath = "/v0.1/account/test/export/featureFlags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportFeatureFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20098>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20098) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20098)));
        }

        /// <summary>
        ///  Lists feature flag data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20098</returns>
        public async System.Threading.Tasks.Task<InlineResponse20098> TestGdprExportFeatureFlagAsync ()
        {
             ApiResponse<InlineResponse20098> localVarResponse = await TestGdprExportFeatureFlagAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists feature flag data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20098)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20098>> TestGdprExportFeatureFlagAsyncWithHttpInfo ()
        {

            var localVarPath = "/v0.1/account/test/export/featureFlags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportFeatureFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20098>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20098) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20098)));
        }

        /// <summary>
        ///  Lists file set file data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 TestGdprExportFileSetFile (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20024> localVarResponse = TestGdprExportFileSetFileWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists file set file data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public ApiResponse< InlineResponse20024 > TestGdprExportFileSetFileWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGdprExportFileSetFile");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGdprExportFileSetFile");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportFileSetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20024) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        ///  Lists file set file data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> TestGdprExportFileSetFileAsync (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20024> localVarResponse = await TestGdprExportFileSetFileAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists file set file data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> TestGdprExportFileSetFileAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGdprExportFileSetFile");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGdprExportFileSetFile");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportFileSetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20024) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        ///  Lists hash file data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 TestGdprExportHashFile (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20023> localVarResponse = TestGdprExportHashFileWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists hash file data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public ApiResponse< InlineResponse20023 > TestGdprExportHashFileWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGdprExportHashFile");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGdprExportHashFile");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportHashFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20023) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        ///  Lists hash file data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> TestGdprExportHashFileAsync (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20023> localVarResponse = await TestGdprExportHashFileAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists hash file data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> TestGdprExportHashFileAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGdprExportHashFile");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGdprExportHashFile");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportHashFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20023) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        ///  Lists pipeline test data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 TestGdprExportPipelineTest (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20022> localVarResponse = TestGdprExportPipelineTestWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists pipeline test data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public ApiResponse< InlineResponse20022 > TestGdprExportPipelineTestWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGdprExportPipelineTest");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGdprExportPipelineTest");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportPipelineTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        ///  Lists pipeline test data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> TestGdprExportPipelineTestAsync (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20022> localVarResponse = await TestGdprExportPipelineTestAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists pipeline test data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> TestGdprExportPipelineTestAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGdprExportPipelineTest");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGdprExportPipelineTest");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportPipelineTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        ///  Lists test run data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 TestGdprExportTestRun (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20021> localVarResponse = TestGdprExportTestRunWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists test run data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public ApiResponse< InlineResponse20021 > TestGdprExportTestRunWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGdprExportTestRun");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGdprExportTestRun");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportTestRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        ///  Lists test run data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> TestGdprExportTestRunAsync (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20021> localVarResponse = await TestGdprExportTestRunAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists test run data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> TestGdprExportTestRunAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGdprExportTestRun");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGdprExportTestRun");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGdprExportTestRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        ///  Returns list of all test runs for a given test series
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;TestRun&gt;</returns>
        public List<TestRun> TestGetAllTestRunsForSeries (string testSeriesSlug, string ownerName, string appName)
        {
             ApiResponse<List<TestRun>> localVarResponse = TestGetAllTestRunsForSeriesWithHttpInfo(testSeriesSlug, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns list of all test runs for a given test series
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;TestRun&gt;</returns>
        public ApiResponse< List<TestRun> > TestGetAllTestRunsForSeriesWithHttpInfo (string testSeriesSlug, string ownerName, string appName)
        {
            // verify the required parameter 'testSeriesSlug' is set
            if (testSeriesSlug == null)
                throw new ApiException(400, "Missing required parameter 'testSeriesSlug' when calling TestApi->TestGetAllTestRunsForSeries");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetAllTestRunsForSeries");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetAllTestRunsForSeries");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testSeriesSlug != null) localVarPathParams.Add("test_series_slug", this.Configuration.ApiClient.ParameterToString(testSeriesSlug)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetAllTestRunsForSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TestRun>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TestRun>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TestRun>)));
        }

        /// <summary>
        ///  Returns list of all test runs for a given test series
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;TestRun&gt;</returns>
        public async System.Threading.Tasks.Task<List<TestRun>> TestGetAllTestRunsForSeriesAsync (string testSeriesSlug, string ownerName, string appName)
        {
             ApiResponse<List<TestRun>> localVarResponse = await TestGetAllTestRunsForSeriesAsyncWithHttpInfo(testSeriesSlug, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns list of all test runs for a given test series
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;TestRun&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TestRun>>> TestGetAllTestRunsForSeriesAsyncWithHttpInfo (string testSeriesSlug, string ownerName, string appName)
        {
            // verify the required parameter 'testSeriesSlug' is set
            if (testSeriesSlug == null)
                throw new ApiException(400, "Missing required parameter 'testSeriesSlug' when calling TestApi->TestGetAllTestRunsForSeries");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetAllTestRunsForSeries");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetAllTestRunsForSeries");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testSeriesSlug != null) localVarPathParams.Add("test_series_slug", this.Configuration.ApiClient.ParameterToString(testSeriesSlug)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetAllTestRunsForSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TestRun>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TestRun>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TestRun>)));
        }

        /// <summary>
        ///  Returns list of all test series for an application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="query">A query string to filter test series (optional)</param>
        /// <returns>List&lt;TestSeries1&gt;</returns>
        public List<TestSeries1> TestGetAllTestSeries (string ownerName, string appName, string query = null)
        {
             ApiResponse<List<TestSeries1>> localVarResponse = TestGetAllTestSeriesWithHttpInfo(ownerName, appName, query);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns list of all test series for an application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="query">A query string to filter test series (optional)</param>
        /// <returns>ApiResponse of List&lt;TestSeries1&gt;</returns>
        public ApiResponse< List<TestSeries1> > TestGetAllTestSeriesWithHttpInfo (string ownerName, string appName, string query = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetAllTestSeries");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetAllTestSeries");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetAllTestSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TestSeries1>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TestSeries1>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TestSeries1>)));
        }

        /// <summary>
        ///  Returns list of all test series for an application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="query">A query string to filter test series (optional)</param>
        /// <returns>Task of List&lt;TestSeries1&gt;</returns>
        public async System.Threading.Tasks.Task<List<TestSeries1>> TestGetAllTestSeriesAsync (string ownerName, string appName, string query = null)
        {
             ApiResponse<List<TestSeries1>> localVarResponse = await TestGetAllTestSeriesAsyncWithHttpInfo(ownerName, appName, query);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns list of all test series for an application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="query">A query string to filter test series (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TestSeries1&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TestSeries1>>> TestGetAllTestSeriesAsyncWithHttpInfo (string ownerName, string appName, string query = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetAllTestSeries");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetAllTestSeries");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetAllTestSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TestSeries1>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TestSeries1>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TestSeries1>)));
        }

        /// <summary>
        ///  Returns a list of available devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="appUploadId">The ID of the test run (optional)</param>
        /// <returns>List&lt;InlineResponse20061&gt;</returns>
        public List<InlineResponse20061> TestGetDeviceConfigurations (string ownerName, string appName, Guid? appUploadId = null)
        {
             ApiResponse<List<InlineResponse20061>> localVarResponse = TestGetDeviceConfigurationsWithHttpInfo(ownerName, appName, appUploadId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of available devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="appUploadId">The ID of the test run (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20061&gt;</returns>
        public ApiResponse< List<InlineResponse20061> > TestGetDeviceConfigurationsWithHttpInfo (string ownerName, string appName, Guid? appUploadId = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetDeviceConfigurations");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetDeviceConfigurations");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/device_configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (appUploadId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_upload_id", appUploadId)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetDeviceConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20061>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20061>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20061>)));
        }

        /// <summary>
        ///  Returns a list of available devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="appUploadId">The ID of the test run (optional)</param>
        /// <returns>Task of List&lt;InlineResponse20061&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20061>> TestGetDeviceConfigurationsAsync (string ownerName, string appName, Guid? appUploadId = null)
        {
             ApiResponse<List<InlineResponse20061>> localVarResponse = await TestGetDeviceConfigurationsAsyncWithHttpInfo(ownerName, appName, appUploadId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of available devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="appUploadId">The ID of the test run (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20061&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20061>>> TestGetDeviceConfigurationsAsyncWithHttpInfo (string ownerName, string appName, Guid? appUploadId = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetDeviceConfigurations");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetDeviceConfigurations");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/device_configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (appUploadId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_upload_id", appUploadId)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetDeviceConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20061>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20061>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20061>)));
        }

        /// <summary>
        ///  Gets a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSet</returns>
        public DeviceSet TestGetDeviceSetOfOwner (Guid? id, string ownerName, string appName)
        {
             ApiResponse<DeviceSet> localVarResponse = TestGetDeviceSetOfOwnerWithHttpInfo(id, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSet</returns>
        public ApiResponse< DeviceSet > TestGetDeviceSetOfOwnerWithHttpInfo (Guid? id, string ownerName, string appName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TestApi->TestGetDeviceSetOfOwner");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetDeviceSetOfOwner");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetDeviceSetOfOwner");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetDeviceSetOfOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSet)));
        }

        /// <summary>
        ///  Gets a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSet</returns>
        public async System.Threading.Tasks.Task<DeviceSet> TestGetDeviceSetOfOwnerAsync (Guid? id, string ownerName, string appName)
        {
             ApiResponse<DeviceSet> localVarResponse = await TestGetDeviceSetOfOwnerAsyncWithHttpInfo(id, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceSet>> TestGetDeviceSetOfOwnerAsyncWithHttpInfo (Guid? id, string ownerName, string appName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TestApi->TestGetDeviceSetOfOwner");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetDeviceSetOfOwner");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetDeviceSetOfOwner");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetDeviceSetOfOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSet)));
        }

        /// <summary>
        ///  Gets a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSet</returns>
        public DeviceSet TestGetDeviceSetOfUser (Guid? id, string ownerName, string appName)
        {
             ApiResponse<DeviceSet> localVarResponse = TestGetDeviceSetOfUserWithHttpInfo(id, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSet</returns>
        public ApiResponse< DeviceSet > TestGetDeviceSetOfUserWithHttpInfo (Guid? id, string ownerName, string appName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TestApi->TestGetDeviceSetOfUser");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetDeviceSetOfUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetDeviceSetOfUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetDeviceSetOfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSet)));
        }

        /// <summary>
        ///  Gets a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSet</returns>
        public async System.Threading.Tasks.Task<DeviceSet> TestGetDeviceSetOfUserAsync (Guid? id, string ownerName, string appName)
        {
             ApiResponse<DeviceSet> localVarResponse = await TestGetDeviceSetOfUserAsyncWithHttpInfo(id, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceSet>> TestGetDeviceSetOfUserAsyncWithHttpInfo (Guid? id, string ownerName, string appName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TestApi->TestGetDeviceSetOfUser");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetDeviceSetOfUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetDeviceSetOfUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetDeviceSetOfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSet)));
        }

        /// <summary>
        ///  Get information about the currently active subscriptions, if any
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Subscription1</returns>
        public Subscription1 TestGetSubscriptions (string ownerName, string appName)
        {
             ApiResponse<Subscription1> localVarResponse = TestGetSubscriptionsWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about the currently active subscriptions, if any
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Subscription1</returns>
        public ApiResponse< Subscription1 > TestGetSubscriptionsWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetSubscriptions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetSubscriptions");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscription1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription1)));
        }

        /// <summary>
        ///  Get information about the currently active subscriptions, if any
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Subscription1</returns>
        public async System.Threading.Tasks.Task<Subscription1> TestGetSubscriptionsAsync (string ownerName, string appName)
        {
             ApiResponse<Subscription1> localVarResponse = await TestGetSubscriptionsAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get information about the currently active subscriptions, if any
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Subscription1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription1>> TestGetSubscriptionsAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetSubscriptions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetSubscriptions");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscription1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription1)));
        }

        /// <summary>
        ///  Returns a single test report
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object TestGetTestReport (Guid? testRunId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = TestGetTestReportWithHttpInfo(testRunId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a single test report
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TestGetTestReportWithHttpInfo (Guid? testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestGetTestReport");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetTestReport");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetTestReport");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetTestReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a single test report
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TestGetTestReportAsync (Guid? testRunId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await TestGetTestReportAsyncWithHttpInfo(testRunId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a single test report
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TestGetTestReportAsyncWithHttpInfo (Guid? testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestGetTestReport");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetTestReport");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetTestReport");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetTestReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a single test runs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestRun1</returns>
        public TestRun1 TestGetTestRun (Guid? testRunId, string ownerName, string appName)
        {
             ApiResponse<TestRun1> localVarResponse = TestGetTestRunWithHttpInfo(testRunId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a single test runs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestRun1</returns>
        public ApiResponse< TestRun1 > TestGetTestRunWithHttpInfo (Guid? testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestGetTestRun");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetTestRun");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetTestRun");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetTestRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestRun1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestRun1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestRun1)));
        }

        /// <summary>
        ///  Returns a single test runs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestRun1</returns>
        public async System.Threading.Tasks.Task<TestRun1> TestGetTestRunAsync (Guid? testRunId, string ownerName, string appName)
        {
             ApiResponse<TestRun1> localVarResponse = await TestGetTestRunAsyncWithHttpInfo(testRunId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a single test runs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestRun1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TestRun1>> TestGetTestRunAsyncWithHttpInfo (Guid? testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestGetTestRun");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetTestRun");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetTestRun");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetTestRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestRun1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestRun1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestRun1)));
        }

        /// <summary>
        ///  Gets state of the test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestRunState</returns>
        public TestRunState TestGetTestRunState (string testRunId, string ownerName, string appName)
        {
             ApiResponse<TestRunState> localVarResponse = TestGetTestRunStateWithHttpInfo(testRunId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets state of the test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestRunState</returns>
        public ApiResponse< TestRunState > TestGetTestRunStateWithHttpInfo (string testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestGetTestRunState");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetTestRunState");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetTestRunState");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetTestRunState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestRunState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestRunState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestRunState)));
        }

        /// <summary>
        ///  Gets state of the test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestRunState</returns>
        public async System.Threading.Tasks.Task<TestRunState> TestGetTestRunStateAsync (string testRunId, string ownerName, string appName)
        {
             ApiResponse<TestRunState> localVarResponse = await TestGetTestRunStateAsyncWithHttpInfo(testRunId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets state of the test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestRunState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TestRunState>> TestGetTestRunStateAsyncWithHttpInfo (string testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestGetTestRunState");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetTestRunState");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetTestRunState");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetTestRunState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestRunState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestRunState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestRunState)));
        }

        /// <summary>
        ///  Returns a list of test runs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;TestRun&gt;</returns>
        public List<TestRun> TestGetTestRuns (string ownerName, string appName)
        {
             ApiResponse<List<TestRun>> localVarResponse = TestGetTestRunsWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of test runs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;TestRun&gt;</returns>
        public ApiResponse< List<TestRun> > TestGetTestRunsWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetTestRuns");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetTestRuns");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetTestRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TestRun>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TestRun>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TestRun>)));
        }

        /// <summary>
        ///  Returns a list of test runs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;TestRun&gt;</returns>
        public async System.Threading.Tasks.Task<List<TestRun>> TestGetTestRunsAsync (string ownerName, string appName)
        {
             ApiResponse<List<TestRun>> localVarResponse = await TestGetTestRunsAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of test runs
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;TestRun&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TestRun>>> TestGetTestRunsAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestGetTestRuns");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestGetTestRuns");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestGetTestRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TestRun>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TestRun>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TestRun>)));
        }

        /// <summary>
        ///  Lists device sets belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;DeviceSet2&gt;</returns>
        public List<DeviceSet2> TestListDeviceSetsOfOwner (string ownerName, string appName)
        {
             ApiResponse<List<DeviceSet2>> localVarResponse = TestListDeviceSetsOfOwnerWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists device sets belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;DeviceSet2&gt;</returns>
        public ApiResponse< List<DeviceSet2> > TestListDeviceSetsOfOwnerWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestListDeviceSetsOfOwner");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestListDeviceSetsOfOwner");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestListDeviceSetsOfOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceSet2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeviceSet2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceSet2>)));
        }

        /// <summary>
        ///  Lists device sets belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;DeviceSet2&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeviceSet2>> TestListDeviceSetsOfOwnerAsync (string ownerName, string appName)
        {
             ApiResponse<List<DeviceSet2>> localVarResponse = await TestListDeviceSetsOfOwnerAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists device sets belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceSet2&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeviceSet2>>> TestListDeviceSetsOfOwnerAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestListDeviceSetsOfOwner");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestListDeviceSetsOfOwner");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestListDeviceSetsOfOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceSet2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeviceSet2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceSet2>)));
        }

        /// <summary>
        ///  Lists device sets belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;DeviceSet1&gt;</returns>
        public List<DeviceSet1> TestListDeviceSetsOfUser (string ownerName, string appName)
        {
             ApiResponse<List<DeviceSet1>> localVarResponse = TestListDeviceSetsOfUserWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists device sets belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;DeviceSet1&gt;</returns>
        public ApiResponse< List<DeviceSet1> > TestListDeviceSetsOfUserWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestListDeviceSetsOfUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestListDeviceSetsOfUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestListDeviceSetsOfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceSet1>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeviceSet1>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceSet1>)));
        }

        /// <summary>
        ///  Lists device sets belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;DeviceSet1&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeviceSet1>> TestListDeviceSetsOfUserAsync (string ownerName, string appName)
        {
             ApiResponse<List<DeviceSet1>> localVarResponse = await TestListDeviceSetsOfUserAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists device sets belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceSet1&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeviceSet1>>> TestListDeviceSetsOfUserAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestListDeviceSetsOfUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestListDeviceSetsOfUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestListDeviceSetsOfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceSet1>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeviceSet1>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceSet1>)));
        }

        /// <summary>
        ///  Updates name and slug of a test series
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestSeries</returns>
        public TestSeries TestPatchTestSeries (NameOfTheTestSeries body, string testSeriesSlug, string ownerName, string appName)
        {
             ApiResponse<TestSeries> localVarResponse = TestPatchTestSeriesWithHttpInfo(body, testSeriesSlug, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates name and slug of a test series
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestSeries</returns>
        public ApiResponse< TestSeries > TestPatchTestSeriesWithHttpInfo (NameOfTheTestSeries body, string testSeriesSlug, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestPatchTestSeries");
            // verify the required parameter 'testSeriesSlug' is set
            if (testSeriesSlug == null)
                throw new ApiException(400, "Missing required parameter 'testSeriesSlug' when calling TestApi->TestPatchTestSeries");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestPatchTestSeries");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestPatchTestSeries");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testSeriesSlug != null) localVarPathParams.Add("test_series_slug", this.Configuration.ApiClient.ParameterToString(testSeriesSlug)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestPatchTestSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestSeries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestSeries) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestSeries)));
        }

        /// <summary>
        ///  Updates name and slug of a test series
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestSeries</returns>
        public async System.Threading.Tasks.Task<TestSeries> TestPatchTestSeriesAsync (NameOfTheTestSeries body, string testSeriesSlug, string ownerName, string appName)
        {
             ApiResponse<TestSeries> localVarResponse = await TestPatchTestSeriesAsyncWithHttpInfo(body, testSeriesSlug, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates name and slug of a test series
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="testSeriesSlug">The slug of the test series</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestSeries)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TestSeries>> TestPatchTestSeriesAsyncWithHttpInfo (NameOfTheTestSeries body, string testSeriesSlug, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestPatchTestSeries");
            // verify the required parameter 'testSeriesSlug' is set
            if (testSeriesSlug == null)
                throw new ApiException(400, "Missing required parameter 'testSeriesSlug' when calling TestApi->TestPatchTestSeries");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestPatchTestSeries");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestPatchTestSeries");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testSeriesSlug != null) localVarPathParams.Add("test_series_slug", this.Configuration.ApiClient.ParameterToString(testSeriesSlug)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestPatchTestSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestSeries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestSeries) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestSeries)));
        }

        /// <summary>
        ///  Starts test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Option required to start the test run</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestCloudTestRunStartResult</returns>
        public TestCloudTestRunStartResult TestStartTestRun (TestCloudStartTestRunOptions body, string testRunId, string ownerName, string appName)
        {
             ApiResponse<TestCloudTestRunStartResult> localVarResponse = TestStartTestRunWithHttpInfo(body, testRunId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Starts test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Option required to start the test run</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestCloudTestRunStartResult</returns>
        public ApiResponse< TestCloudTestRunStartResult > TestStartTestRunWithHttpInfo (TestCloudStartTestRunOptions body, string testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestStartTestRun");
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestStartTestRun");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestStartTestRun");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestStartTestRun");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestStartTestRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestCloudTestRunStartResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestCloudTestRunStartResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestCloudTestRunStartResult)));
        }

        /// <summary>
        ///  Starts test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Option required to start the test run</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestCloudTestRunStartResult</returns>
        public async System.Threading.Tasks.Task<TestCloudTestRunStartResult> TestStartTestRunAsync (TestCloudStartTestRunOptions body, string testRunId, string ownerName, string appName)
        {
             ApiResponse<TestCloudTestRunStartResult> localVarResponse = await TestStartTestRunAsyncWithHttpInfo(body, testRunId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Starts test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Option required to start the test run</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestCloudTestRunStartResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TestCloudTestRunStartResult>> TestStartTestRunAsyncWithHttpInfo (TestCloudStartTestRunOptions body, string testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestStartTestRun");
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestStartTestRun");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestStartTestRun");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestStartTestRun");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestStartTestRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestCloudTestRunStartResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestCloudTestRunStartResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestCloudTestRunStartResult)));
        }

        /// <summary>
        ///  Uploads file for a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void TestStartUploadingFile (string testRunId, string ownerName, string appName)
        {
             TestStartUploadingFileWithHttpInfo(testRunId, ownerName, appName);
        }

        /// <summary>
        ///  Uploads file for a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TestStartUploadingFileWithHttpInfo (string testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestStartUploadingFile");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestStartUploadingFile");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestStartUploadingFile");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestStartUploadingFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Uploads file for a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TestStartUploadingFileAsync (string testRunId, string ownerName, string appName)
        {
             await TestStartUploadingFileAsyncWithHttpInfo(testRunId, ownerName, appName);

        }

        /// <summary>
        ///  Uploads file for a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TestStartUploadingFileAsyncWithHttpInfo (string testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestStartUploadingFile");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestStartUploadingFile");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestStartUploadingFile");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestStartUploadingFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Stop a test run execution
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run to be stopped</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>TestRun1</returns>
        public TestRun1 TestStopTestRun (string testRunId, string ownerName, string appName)
        {
             ApiResponse<TestRun1> localVarResponse = TestStopTestRunWithHttpInfo(testRunId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Stop a test run execution
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run to be stopped</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of TestRun1</returns>
        public ApiResponse< TestRun1 > TestStopTestRunWithHttpInfo (string testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestStopTestRun");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestStopTestRun");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestStopTestRun");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestStopTestRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestRun1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestRun1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestRun1)));
        }

        /// <summary>
        ///  Stop a test run execution
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run to be stopped</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of TestRun1</returns>
        public async System.Threading.Tasks.Task<TestRun1> TestStopTestRunAsync (string testRunId, string ownerName, string appName)
        {
             ApiResponse<TestRun1> localVarResponse = await TestStopTestRunAsyncWithHttpInfo(testRunId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Stop a test run execution
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testRunId">The ID of the test run to be stopped</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (TestRun1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TestRun1>> TestStopTestRunAsyncWithHttpInfo (string testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestStopTestRun");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestStopTestRun");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestStopTestRun");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestStopTestRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestRun1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TestRun1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestRun1)));
        }

        /// <summary>
        ///  Updates a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSet</returns>
        public DeviceSet TestUpdateDeviceSetOfOwner (DeviceSetUpdateInformation2 body, Guid? id, string ownerName, string appName)
        {
             ApiResponse<DeviceSet> localVarResponse = TestUpdateDeviceSetOfOwnerWithHttpInfo(body, id, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSet</returns>
        public ApiResponse< DeviceSet > TestUpdateDeviceSetOfOwnerWithHttpInfo (DeviceSetUpdateInformation2 body, Guid? id, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestUpdateDeviceSetOfOwner");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TestApi->TestUpdateDeviceSetOfOwner");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestUpdateDeviceSetOfOwner");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestUpdateDeviceSetOfOwner");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestUpdateDeviceSetOfOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSet)));
        }

        /// <summary>
        ///  Updates a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSet</returns>
        public async System.Threading.Tasks.Task<DeviceSet> TestUpdateDeviceSetOfOwnerAsync (DeviceSetUpdateInformation2 body, Guid? id, string ownerName, string appName)
        {
             ApiResponse<DeviceSet> localVarResponse = await TestUpdateDeviceSetOfOwnerAsyncWithHttpInfo(body, id, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates a device set belonging to the owner
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceSet>> TestUpdateDeviceSetOfOwnerAsyncWithHttpInfo (DeviceSetUpdateInformation2 body, Guid? id, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestUpdateDeviceSetOfOwner");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TestApi->TestUpdateDeviceSetOfOwner");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestUpdateDeviceSetOfOwner");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestUpdateDeviceSetOfOwner");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestUpdateDeviceSetOfOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSet)));
        }

        /// <summary>
        ///  Updates a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DeviceSet</returns>
        public DeviceSet TestUpdateDeviceSetOfUser (DeviceSetUpdateInformation body, Guid? id, string ownerName, string appName)
        {
             ApiResponse<DeviceSet> localVarResponse = TestUpdateDeviceSetOfUserWithHttpInfo(body, id, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DeviceSet</returns>
        public ApiResponse< DeviceSet > TestUpdateDeviceSetOfUserWithHttpInfo (DeviceSetUpdateInformation body, Guid? id, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestUpdateDeviceSetOfUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TestApi->TestUpdateDeviceSetOfUser");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestUpdateDeviceSetOfUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestUpdateDeviceSetOfUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestUpdateDeviceSetOfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSet)));
        }

        /// <summary>
        ///  Updates a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DeviceSet</returns>
        public async System.Threading.Tasks.Task<DeviceSet> TestUpdateDeviceSetOfUserAsync (DeviceSetUpdateInformation body, Guid? id, string ownerName, string appName)
        {
             ApiResponse<DeviceSet> localVarResponse = await TestUpdateDeviceSetOfUserAsyncWithHttpInfo(body, id, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates a device set belonging to the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id">The UUID of the device set</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DeviceSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceSet>> TestUpdateDeviceSetOfUserAsyncWithHttpInfo (DeviceSetUpdateInformation body, Guid? id, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestUpdateDeviceSetOfUser");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TestApi->TestUpdateDeviceSetOfUser");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestUpdateDeviceSetOfUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestUpdateDeviceSetOfUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestUpdateDeviceSetOfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceSet)));
        }

        /// <summary>
        ///  Adds file with the given hash to a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void TestUploadHash (TestCloudFileHash1 body, string testRunId, string ownerName, string appName)
        {
             TestUploadHashWithHttpInfo(body, testRunId, ownerName, appName);
        }

        /// <summary>
        ///  Adds file with the given hash to a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TestUploadHashWithHttpInfo (TestCloudFileHash1 body, string testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestUploadHash");
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestUploadHash");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestUploadHash");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestUploadHash");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestUploadHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Adds file with the given hash to a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TestUploadHashAsync (TestCloudFileHash1 body, string testRunId, string ownerName, string appName)
        {
             await TestUploadHashAsyncWithHttpInfo(body, testRunId, ownerName, appName);

        }

        /// <summary>
        ///  Adds file with the given hash to a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TestUploadHashAsyncWithHttpInfo (TestCloudFileHash1 body, string testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestUploadHash");
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestUploadHash");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestUploadHash");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestUploadHash");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestUploadHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Adds file with the given hash to a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;TestCloudFileHashResponse&gt;</returns>
        public List<TestCloudFileHashResponse> TestUploadHashesBatch (List<TestCloudFileHash> body, string testRunId, string ownerName, string appName)
        {
             ApiResponse<List<TestCloudFileHashResponse>> localVarResponse = TestUploadHashesBatchWithHttpInfo(body, testRunId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Adds file with the given hash to a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;TestCloudFileHashResponse&gt;</returns>
        public ApiResponse< List<TestCloudFileHashResponse> > TestUploadHashesBatchWithHttpInfo (List<TestCloudFileHash> body, string testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestUploadHashesBatch");
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestUploadHashesBatch");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestUploadHashesBatch");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestUploadHashesBatch");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestUploadHashesBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TestCloudFileHashResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TestCloudFileHashResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TestCloudFileHashResponse>)));
        }

        /// <summary>
        ///  Adds file with the given hash to a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;TestCloudFileHashResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TestCloudFileHashResponse>> TestUploadHashesBatchAsync (List<TestCloudFileHash> body, string testRunId, string ownerName, string appName)
        {
             ApiResponse<List<TestCloudFileHashResponse>> localVarResponse = await TestUploadHashesBatchAsyncWithHttpInfo(body, testRunId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Adds file with the given hash to a test run
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">File hash information</param>
        /// <param name="testRunId">The ID of the test run</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;TestCloudFileHashResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TestCloudFileHashResponse>>> TestUploadHashesBatchAsyncWithHttpInfo (List<TestCloudFileHash> body, string testRunId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TestApi->TestUploadHashesBatch");
            // verify the required parameter 'testRunId' is set
            if (testRunId == null)
                throw new ApiException(400, "Missing required parameter 'testRunId' when calling TestApi->TestUploadHashesBatch");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling TestApi->TestUploadHashesBatch");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling TestApi->TestUploadHashesBatch");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (testRunId != null) localVarPathParams.Add("test_run_id", this.Configuration.ApiClient.ParameterToString(testRunId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestUploadHashesBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TestCloudFileHashResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TestCloudFileHashResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TestCloudFileHashResponse>)));
        }

    }
}
