/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICrashApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20070</returns>
        InlineResponse20070 CrashGroupsGet (string crashGroupId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20070</returns>
        ApiResponse<InlineResponse20070> CrashGroupsGetWithHttpInfo (string crashGroupId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a stacktrace for a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Stacktrace</returns>
        Stacktrace CrashGroupsGetStacktrace (string crashGroupId, string ownerName, string appName, bool? groupingOnly = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a stacktrace for a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>ApiResponse of Stacktrace</returns>
        ApiResponse<Stacktrace> CrashGroupsGetStacktraceWithHttpInfo (string crashGroupId, string ownerName, string appName, bool? groupingOnly = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of crash groups and whether the list contains all available groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="lastOccurrenceFrom">Earliest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="lastOccurrenceTo">Latest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="groupStatus"> (optional)</param>
        /// <param name="groupTextSearch">A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)</param>
        /// <param name="orderby">the OData-like $orderby argument (optional, default to last_occurrence desc)</param>
        /// <param name="continuationToken">Cassandra request continuation token. The token is used for pagination. (optional)</param>
        /// <returns>InlineResponse20071</returns>
        InlineResponse20071 CrashGroupsList (string ownerName, string appName, DateTime? lastOccurrenceFrom = null, DateTime? lastOccurrenceTo = null, string appVersion = null, string groupType = null, string groupStatus = null, string groupTextSearch = null, string orderby = null, string continuationToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of crash groups and whether the list contains all available groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="lastOccurrenceFrom">Earliest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="lastOccurrenceTo">Latest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="groupStatus"> (optional)</param>
        /// <param name="groupTextSearch">A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)</param>
        /// <param name="orderby">the OData-like $orderby argument (optional, default to last_occurrence desc)</param>
        /// <param name="continuationToken">Cassandra request continuation token. The token is used for pagination. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20071</returns>
        ApiResponse<InlineResponse20071> CrashGroupsListWithHttpInfo (string ownerName, string appName, DateTime? lastOccurrenceFrom = null, DateTime? lastOccurrenceTo = null, string appVersion = null, string groupType = null, string groupStatus = null, string groupTextSearch = null, string orderby = null, string continuationToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group change object. All fields are optional and only provided fields will get updated.</param>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20070</returns>
        InlineResponse20070 CrashGroupsUpdate (CrashGroupsCrashGroupIdBody body, string crashGroupId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group change object. All fields are optional and only provided fields will get updated.</param>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20070</returns>
        ApiResponse<InlineResponse20070> CrashGroupsUpdateWithHttpInfo (CrashGroupsCrashGroupIdBody body, string crashGroupId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a specific crash and related attachments and blobs for an app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="retentionDelete">true in that case if the method should skip update counts (optional, default to false)</param>
        /// <returns>InlineResponse20069</returns>
        InlineResponse20069 CrashesDelete (string crashGroupId, string crashId, string ownerName, string appName, bool? retentionDelete = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a specific crash and related attachments and blobs for an app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="retentionDelete">true in that case if the method should skip update counts (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse20069</returns>
        ApiResponse<InlineResponse20069> CrashesDeleteWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName, bool? retentionDelete = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific crash for an app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="includeDetails">true if the crash should include in depth crash details (optional, default to false)</param>
        /// <param name="includeStacktrace">true if the crash should include the stacktrace information (optional, default to false)</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Crash</returns>
        Crash CrashesGet (string crashGroupId, string crashId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, bool? includeDetails = null, bool? includeStacktrace = null, bool? groupingOnly = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific crash for an app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="includeDetails">true if the crash should include in depth crash details (optional, default to false)</param>
        /// <param name="includeStacktrace">true if the crash should include the stacktrace information (optional, default to false)</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>ApiResponse of Crash</returns>
        ApiResponse<Crash> CrashesGetWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, bool? includeDetails = null, bool? includeStacktrace = null, bool? groupingOnly = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets whether the application has any crashes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20064</returns>
        InlineResponse20064 CrashesGetAppCrashesInfo (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets whether the application has any crashes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20064</returns>
        ApiResponse<InlineResponse20064> CrashesGetAppCrashesInfoWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of application versions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20018&gt;</returns>
        List<InlineResponse20018> CrashesGetAppVersions (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of application versions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20018&gt;</returns>
        ApiResponse<List<InlineResponse20018>> CrashesGetAppVersionsWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URI location to download crash attachment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20066</returns>
        InlineResponse20066 CrashesGetCrashAttachmentLocation (string crashId, string attachmentId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URI location to download crash attachment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20066</returns>
        ApiResponse<InlineResponse20066> CrashesGetCrashAttachmentLocationWithHttpInfo (string crashId, string attachmentId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content of the text attachment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>string</returns>
        string CrashesGetCrashTextAttachmentContent (string crashId, string attachmentId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content of the text attachment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CrashesGetCrashTextAttachmentContentWithHttpInfo (string crashId, string attachmentId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the native log of a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>string</returns>
        string CrashesGetNativeCrash (string crashGroupId, string crashId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the native log of a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CrashesGetNativeCrashWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the native log of a specific crash as a text attachment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>string</returns>
        string CrashesGetNativeCrashDownload (string crashGroupId, string crashId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the native log of a specific crash as a text attachment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CrashesGetNativeCrashDownloadWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URI location to download json of a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20068</returns>
        InlineResponse20068 CrashesGetRawCrashLocation (string crashGroupId, string crashId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URI location to download json of a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20068</returns>
        ApiResponse<InlineResponse20068> CrashesGetRawCrashLocationWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a stacktrace for a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Stacktrace</returns>
        Stacktrace CrashesGetStacktrace (string crashGroupId, string crashId, string ownerName, string appName, bool? groupingOnly = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a stacktrace for a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>ApiResponse of Stacktrace</returns>
        ApiResponse<Stacktrace> CrashesGetStacktraceWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName, bool? groupingOnly = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all crashes of a group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="errorType"> (optional)</param>
        /// <returns>List&lt;Crash&gt;</returns>
        List<Crash> CrashesList (string crashGroupId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, DateTime? dateFrom = null, DateTime? dateTo = null, string appVersion = null, string errorType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all crashes of a group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="errorType"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Crash&gt;</returns>
        ApiResponse<List<Crash>> CrashesListWithHttpInfo (string crashGroupId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, DateTime? dateFrom = null, DateTime? dateTo = null, string appVersion = null, string errorType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all attachments for a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20067&gt;</returns>
        List<InlineResponse20067> CrashesListAttachments (string crashId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all attachments for a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20067&gt;</returns>
        ApiResponse<List<InlineResponse20067>> CrashesListAttachmentsWithHttpInfo (string crashId, string ownerName, string appName);
        /// <summary>
        /// Gets missing symbol crash group by its id
        /// </summary>
        /// <remarks>
        /// Gets missing symbol crash group by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolGroupId">missing symbol crash group id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object MissingSymbolGroupsGet (string symbolGroupId, string ownerName, string appName);

        /// <summary>
        /// Gets missing symbol crash group by its id
        /// </summary>
        /// <remarks>
        /// Gets missing symbol crash group by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolGroupId">missing symbol crash group id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MissingSymbolGroupsGetWithHttpInfo (string symbolGroupId, string ownerName, string appName);
        /// <summary>
        /// Gets application level statistics for all missing symbol groups
        /// </summary>
        /// <remarks>
        /// Gets application level statistics for all missing symbol groups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object MissingSymbolGroupsInfo (string ownerName, string appName);

        /// <summary>
        /// Gets application level statistics for all missing symbol groups
        /// </summary>
        /// <remarks>
        /// Gets application level statistics for all missing symbol groups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MissingSymbolGroupsInfoWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// Gets top N (ordered by crash count) of crash groups by missing symbol
        /// </summary>
        /// <remarks>
        /// Gets top N (ordered by crash count) of crash groups by missing symbol
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">top N elements</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object MissingSymbolGroupsList (int? top, string ownerName, string appName);

        /// <summary>
        /// Gets top N (ordered by crash count) of crash groups by missing symbol
        /// </summary>
        /// <remarks>
        /// Gets top N (ordered by crash count) of crash groups by missing symbol
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">top N elements</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MissingSymbolGroupsListWithHttpInfo (int? top, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Commits or aborts the symbol upload process for a new set of symbols for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object SymbolUploadsComplete (SymbolUploadsSymbolUploadIdBody body, string symbolUploadId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Commits or aborts the symbol upload process for a new set of symbols for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SymbolUploadsCompleteWithHttpInfo (SymbolUploadsSymbolUploadIdBody body, string symbolUploadId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins the symbol upload process for a new set of symbols for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object SymbolUploadsCreate (AppNameSymbolUploadsBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins the symbol upload process for a new set of symbols for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SymbolUploadsCreateWithHttpInfo (AppNameSymbolUploadsBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a symbol upload by id for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object SymbolUploadsDelete (string symbolUploadId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a symbol upload by id for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SymbolUploadsDeleteWithHttpInfo (string symbolUploadId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a symbol upload by id for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object SymbolUploadsGet (string symbolUploadId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a symbol upload by id for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SymbolUploadsGetWithHttpInfo (string symbolUploadId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URL to download the symbol upload
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 SymbolUploadsGetLocation (string symbolUploadId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URL to download the symbol upload
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> SymbolUploadsGetLocationWithHttpInfo (string symbolUploadId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all uploads for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (optional, default to 30)</param>
        /// <param name="status">Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)</param>
        /// <param name="symbolType">The type of symbols (optional)</param>
        /// <returns>List&lt;InlineResponse20030&gt;</returns>
        List<InlineResponse20030> SymbolUploadsList (string ownerName, string appName, long? top = null, string status = null, string symbolType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all uploads for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (optional, default to 30)</param>
        /// <param name="status">Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)</param>
        /// <param name="symbolType">The type of symbols (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20030&gt;</returns>
        ApiResponse<List<InlineResponse20030>> SymbolUploadsListWithHttpInfo (string ownerName, string appName, long? top = null, string status = null, string symbolType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a particular symbol by id (uuid) for the provided application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object SymbolsGet (string symbolId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a particular symbol by id (uuid) for the provided application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SymbolsGetWithHttpInfo (string symbolId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URL to download the symbol
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 SymbolsGetLocation (string symbolId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URL to download the symbol
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> SymbolsGetLocationWithHttpInfo (string symbolId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a particular symbol by id (uuid) for the provided application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object SymbolsGetStatus (string symbolId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a particular symbol by id (uuid) for the provided application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SymbolsGetStatusWithHttpInfo (string symbolId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Marks a symbol by id (uuid) as ignored
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object SymbolsIgnore (string symbolId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Marks a symbol by id (uuid) as ignored
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SymbolsIgnoreWithHttpInfo (string symbolId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the list of all symbols for the provided application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20028&gt;</returns>
        List<InlineResponse20028> SymbolsList (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the list of all symbols for the provided application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20028&gt;</returns>
        ApiResponse<List<InlineResponse20028>> SymbolsListWithHttpInfo (string ownerName, string appName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20070</returns>
        System.Threading.Tasks.Task<InlineResponse20070> CrashGroupsGetAsync (string crashGroupId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20070)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20070>> CrashGroupsGetAsyncWithHttpInfo (string crashGroupId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a stacktrace for a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Task of Stacktrace</returns>
        System.Threading.Tasks.Task<Stacktrace> CrashGroupsGetStacktraceAsync (string crashGroupId, string ownerName, string appName, bool? groupingOnly = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a stacktrace for a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Stacktrace)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stacktrace>> CrashGroupsGetStacktraceAsyncWithHttpInfo (string crashGroupId, string ownerName, string appName, bool? groupingOnly = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of crash groups and whether the list contains all available groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="lastOccurrenceFrom">Earliest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="lastOccurrenceTo">Latest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="groupStatus"> (optional)</param>
        /// <param name="groupTextSearch">A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)</param>
        /// <param name="orderby">the OData-like $orderby argument (optional, default to last_occurrence desc)</param>
        /// <param name="continuationToken">Cassandra request continuation token. The token is used for pagination. (optional)</param>
        /// <returns>Task of InlineResponse20071</returns>
        System.Threading.Tasks.Task<InlineResponse20071> CrashGroupsListAsync (string ownerName, string appName, DateTime? lastOccurrenceFrom = null, DateTime? lastOccurrenceTo = null, string appVersion = null, string groupType = null, string groupStatus = null, string groupTextSearch = null, string orderby = null, string continuationToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of crash groups and whether the list contains all available groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="lastOccurrenceFrom">Earliest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="lastOccurrenceTo">Latest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="groupStatus"> (optional)</param>
        /// <param name="groupTextSearch">A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)</param>
        /// <param name="orderby">the OData-like $orderby argument (optional, default to last_occurrence desc)</param>
        /// <param name="continuationToken">Cassandra request continuation token. The token is used for pagination. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20071)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20071>> CrashGroupsListAsyncWithHttpInfo (string ownerName, string appName, DateTime? lastOccurrenceFrom = null, DateTime? lastOccurrenceTo = null, string appVersion = null, string groupType = null, string groupStatus = null, string groupTextSearch = null, string orderby = null, string continuationToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group change object. All fields are optional and only provided fields will get updated.</param>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20070</returns>
        System.Threading.Tasks.Task<InlineResponse20070> CrashGroupsUpdateAsync (CrashGroupsCrashGroupIdBody body, string crashGroupId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group change object. All fields are optional and only provided fields will get updated.</param>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20070)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20070>> CrashGroupsUpdateAsyncWithHttpInfo (CrashGroupsCrashGroupIdBody body, string crashGroupId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a specific crash and related attachments and blobs for an app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="retentionDelete">true in that case if the method should skip update counts (optional, default to false)</param>
        /// <returns>Task of InlineResponse20069</returns>
        System.Threading.Tasks.Task<InlineResponse20069> CrashesDeleteAsync (string crashGroupId, string crashId, string ownerName, string appName, bool? retentionDelete = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a specific crash and related attachments and blobs for an app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="retentionDelete">true in that case if the method should skip update counts (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse20069)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20069>> CrashesDeleteAsyncWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName, bool? retentionDelete = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific crash for an app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="includeDetails">true if the crash should include in depth crash details (optional, default to false)</param>
        /// <param name="includeStacktrace">true if the crash should include the stacktrace information (optional, default to false)</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Task of Crash</returns>
        System.Threading.Tasks.Task<Crash> CrashesGetAsync (string crashGroupId, string crashId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, bool? includeDetails = null, bool? includeStacktrace = null, bool? groupingOnly = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific crash for an app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="includeDetails">true if the crash should include in depth crash details (optional, default to false)</param>
        /// <param name="includeStacktrace">true if the crash should include the stacktrace information (optional, default to false)</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Crash)</returns>
        System.Threading.Tasks.Task<ApiResponse<Crash>> CrashesGetAsyncWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, bool? includeDetails = null, bool? includeStacktrace = null, bool? groupingOnly = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets whether the application has any crashes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20064</returns>
        System.Threading.Tasks.Task<InlineResponse20064> CrashesGetAppCrashesInfoAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets whether the application has any crashes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20064)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20064>> CrashesGetAppCrashesInfoAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of application versions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20018&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20018>> CrashesGetAppVersionsAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of application versions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20018&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20018>>> CrashesGetAppVersionsAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URI location to download crash attachment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20066</returns>
        System.Threading.Tasks.Task<InlineResponse20066> CrashesGetCrashAttachmentLocationAsync (string crashId, string attachmentId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URI location to download crash attachment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20066)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20066>> CrashesGetCrashAttachmentLocationAsyncWithHttpInfo (string crashId, string attachmentId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content of the text attachment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CrashesGetCrashTextAttachmentContentAsync (string crashId, string attachmentId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content of the text attachment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CrashesGetCrashTextAttachmentContentAsyncWithHttpInfo (string crashId, string attachmentId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the native log of a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CrashesGetNativeCrashAsync (string crashGroupId, string crashId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the native log of a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CrashesGetNativeCrashAsyncWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the native log of a specific crash as a text attachment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CrashesGetNativeCrashDownloadAsync (string crashGroupId, string crashId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the native log of a specific crash as a text attachment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CrashesGetNativeCrashDownloadAsyncWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URI location to download json of a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20068</returns>
        System.Threading.Tasks.Task<InlineResponse20068> CrashesGetRawCrashLocationAsync (string crashGroupId, string crashId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URI location to download json of a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20068)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20068>> CrashesGetRawCrashLocationAsyncWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a stacktrace for a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Task of Stacktrace</returns>
        System.Threading.Tasks.Task<Stacktrace> CrashesGetStacktraceAsync (string crashGroupId, string crashId, string ownerName, string appName, bool? groupingOnly = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a stacktrace for a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Stacktrace)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stacktrace>> CrashesGetStacktraceAsyncWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName, bool? groupingOnly = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all crashes of a group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="errorType"> (optional)</param>
        /// <returns>Task of List&lt;Crash&gt;</returns>
        System.Threading.Tasks.Task<List<Crash>> CrashesListAsync (string crashGroupId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, DateTime? dateFrom = null, DateTime? dateTo = null, string appVersion = null, string errorType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all crashes of a group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="errorType"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Crash&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Crash>>> CrashesListAsyncWithHttpInfo (string crashGroupId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, DateTime? dateFrom = null, DateTime? dateTo = null, string appVersion = null, string errorType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all attachments for a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20067&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20067>> CrashesListAttachmentsAsync (string crashId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all attachments for a specific crash.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20067&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20067>>> CrashesListAttachmentsAsyncWithHttpInfo (string crashId, string ownerName, string appName);
        /// <summary>
        /// Gets missing symbol crash group by its id
        /// </summary>
        /// <remarks>
        /// Gets missing symbol crash group by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolGroupId">missing symbol crash group id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MissingSymbolGroupsGetAsync (string symbolGroupId, string ownerName, string appName);

        /// <summary>
        /// Gets missing symbol crash group by its id
        /// </summary>
        /// <remarks>
        /// Gets missing symbol crash group by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolGroupId">missing symbol crash group id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MissingSymbolGroupsGetAsyncWithHttpInfo (string symbolGroupId, string ownerName, string appName);
        /// <summary>
        /// Gets application level statistics for all missing symbol groups
        /// </summary>
        /// <remarks>
        /// Gets application level statistics for all missing symbol groups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MissingSymbolGroupsInfoAsync (string ownerName, string appName);

        /// <summary>
        /// Gets application level statistics for all missing symbol groups
        /// </summary>
        /// <remarks>
        /// Gets application level statistics for all missing symbol groups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MissingSymbolGroupsInfoAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// Gets top N (ordered by crash count) of crash groups by missing symbol
        /// </summary>
        /// <remarks>
        /// Gets top N (ordered by crash count) of crash groups by missing symbol
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">top N elements</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MissingSymbolGroupsListAsync (int? top, string ownerName, string appName);

        /// <summary>
        /// Gets top N (ordered by crash count) of crash groups by missing symbol
        /// </summary>
        /// <remarks>
        /// Gets top N (ordered by crash count) of crash groups by missing symbol
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">top N elements</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MissingSymbolGroupsListAsyncWithHttpInfo (int? top, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Commits or aborts the symbol upload process for a new set of symbols for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SymbolUploadsCompleteAsync (SymbolUploadsSymbolUploadIdBody body, string symbolUploadId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Commits or aborts the symbol upload process for a new set of symbols for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SymbolUploadsCompleteAsyncWithHttpInfo (SymbolUploadsSymbolUploadIdBody body, string symbolUploadId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins the symbol upload process for a new set of symbols for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SymbolUploadsCreateAsync (AppNameSymbolUploadsBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins the symbol upload process for a new set of symbols for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SymbolUploadsCreateAsyncWithHttpInfo (AppNameSymbolUploadsBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a symbol upload by id for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SymbolUploadsDeleteAsync (string symbolUploadId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a symbol upload by id for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SymbolUploadsDeleteAsyncWithHttpInfo (string symbolUploadId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a symbol upload by id for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SymbolUploadsGetAsync (string symbolUploadId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a symbol upload by id for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SymbolUploadsGetAsyncWithHttpInfo (string symbolUploadId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URL to download the symbol upload
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> SymbolUploadsGetLocationAsync (string symbolUploadId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URL to download the symbol upload
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> SymbolUploadsGetLocationAsyncWithHttpInfo (string symbolUploadId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all uploads for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (optional, default to 30)</param>
        /// <param name="status">Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)</param>
        /// <param name="symbolType">The type of symbols (optional)</param>
        /// <returns>Task of List&lt;InlineResponse20030&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20030>> SymbolUploadsListAsync (string ownerName, string appName, long? top = null, string status = null, string symbolType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all uploads for the specified application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (optional, default to 30)</param>
        /// <param name="status">Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)</param>
        /// <param name="symbolType">The type of symbols (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20030&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20030>>> SymbolUploadsListAsyncWithHttpInfo (string ownerName, string appName, long? top = null, string status = null, string symbolType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a particular symbol by id (uuid) for the provided application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SymbolsGetAsync (string symbolId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a particular symbol by id (uuid) for the provided application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SymbolsGetAsyncWithHttpInfo (string symbolId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URL to download the symbol
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> SymbolsGetLocationAsync (string symbolId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the URL to download the symbol
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> SymbolsGetLocationAsyncWithHttpInfo (string symbolId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a particular symbol by id (uuid) for the provided application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SymbolsGetStatusAsync (string symbolId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a particular symbol by id (uuid) for the provided application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SymbolsGetStatusAsyncWithHttpInfo (string symbolId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Marks a symbol by id (uuid) as ignored
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SymbolsIgnoreAsync (string symbolId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Marks a symbol by id (uuid) as ignored
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SymbolsIgnoreAsyncWithHttpInfo (string symbolId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the list of all symbols for the provided application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20028&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20028>> SymbolsListAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the list of all symbols for the provided application
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20028&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20028>>> SymbolsListAsyncWithHttpInfo (string ownerName, string appName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CrashApi : ICrashApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CrashApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CrashApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CrashApi"/> class
        /// </summary>
        /// <returns></returns>
        public CrashApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CrashApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CrashApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Gets a specific group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20070</returns>
        public InlineResponse20070 CrashGroupsGet (string crashGroupId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20070> localVarResponse = CrashGroupsGetWithHttpInfo(crashGroupId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a specific group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20070</returns>
        public ApiResponse< InlineResponse20070 > CrashGroupsGetWithHttpInfo (string crashGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashGroupsGet");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashGroupsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashGroupsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20070>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20070) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20070)));
        }

        /// <summary>
        ///  Gets a specific group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20070</returns>
        public async System.Threading.Tasks.Task<InlineResponse20070> CrashGroupsGetAsync (string crashGroupId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20070> localVarResponse = await CrashGroupsGetAsyncWithHttpInfo(crashGroupId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a specific group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20070)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20070>> CrashGroupsGetAsyncWithHttpInfo (string crashGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashGroupsGet");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashGroupsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashGroupsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20070>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20070) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20070)));
        }

        /// <summary>
        ///  Gets a stacktrace for a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Stacktrace</returns>
        public Stacktrace CrashGroupsGetStacktrace (string crashGroupId, string ownerName, string appName, bool? groupingOnly = null)
        {
             ApiResponse<Stacktrace> localVarResponse = CrashGroupsGetStacktraceWithHttpInfo(crashGroupId, ownerName, appName, groupingOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a stacktrace for a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>ApiResponse of Stacktrace</returns>
        public ApiResponse< Stacktrace > CrashGroupsGetStacktraceWithHttpInfo (string crashGroupId, string ownerName, string appName, bool? groupingOnly = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashGroupsGetStacktrace");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashGroupsGetStacktrace");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashGroupsGetStacktrace");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (groupingOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grouping_only", groupingOnly)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashGroupsGetStacktrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stacktrace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Stacktrace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stacktrace)));
        }

        /// <summary>
        ///  Gets a stacktrace for a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Task of Stacktrace</returns>
        public async System.Threading.Tasks.Task<Stacktrace> CrashGroupsGetStacktraceAsync (string crashGroupId, string ownerName, string appName, bool? groupingOnly = null)
        {
             ApiResponse<Stacktrace> localVarResponse = await CrashGroupsGetStacktraceAsyncWithHttpInfo(crashGroupId, ownerName, appName, groupingOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a stacktrace for a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Stacktrace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Stacktrace>> CrashGroupsGetStacktraceAsyncWithHttpInfo (string crashGroupId, string ownerName, string appName, bool? groupingOnly = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashGroupsGetStacktrace");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashGroupsGetStacktrace");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashGroupsGetStacktrace");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (groupingOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grouping_only", groupingOnly)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashGroupsGetStacktrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stacktrace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Stacktrace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stacktrace)));
        }

        /// <summary>
        ///  Gets a list of crash groups and whether the list contains all available groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="lastOccurrenceFrom">Earliest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="lastOccurrenceTo">Latest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="groupStatus"> (optional)</param>
        /// <param name="groupTextSearch">A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)</param>
        /// <param name="orderby">the OData-like $orderby argument (optional, default to last_occurrence desc)</param>
        /// <param name="continuationToken">Cassandra request continuation token. The token is used for pagination. (optional)</param>
        /// <returns>InlineResponse20071</returns>
        public InlineResponse20071 CrashGroupsList (string ownerName, string appName, DateTime? lastOccurrenceFrom = null, DateTime? lastOccurrenceTo = null, string appVersion = null, string groupType = null, string groupStatus = null, string groupTextSearch = null, string orderby = null, string continuationToken = null)
        {
             ApiResponse<InlineResponse20071> localVarResponse = CrashGroupsListWithHttpInfo(ownerName, appName, lastOccurrenceFrom, lastOccurrenceTo, appVersion, groupType, groupStatus, groupTextSearch, orderby, continuationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of crash groups and whether the list contains all available groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="lastOccurrenceFrom">Earliest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="lastOccurrenceTo">Latest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="groupStatus"> (optional)</param>
        /// <param name="groupTextSearch">A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)</param>
        /// <param name="orderby">the OData-like $orderby argument (optional, default to last_occurrence desc)</param>
        /// <param name="continuationToken">Cassandra request continuation token. The token is used for pagination. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20071</returns>
        public ApiResponse< InlineResponse20071 > CrashGroupsListWithHttpInfo (string ownerName, string appName, DateTime? lastOccurrenceFrom = null, DateTime? lastOccurrenceTo = null, string appVersion = null, string groupType = null, string groupStatus = null, string groupTextSearch = null, string orderby = null, string continuationToken = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashGroupsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashGroupsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (lastOccurrenceFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_occurrence_from", lastOccurrenceFrom)); // query parameter
            if (lastOccurrenceTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_occurrence_to", lastOccurrenceTo)); // query parameter
            if (appVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_version", appVersion)); // query parameter
            if (groupType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group_type", groupType)); // query parameter
            if (groupStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group_status", groupStatus)); // query parameter
            if (groupTextSearch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group_text_search", groupTextSearch)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (continuationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "continuation_token", continuationToken)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashGroupsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20071>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20071) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20071)));
        }

        /// <summary>
        ///  Gets a list of crash groups and whether the list contains all available groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="lastOccurrenceFrom">Earliest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="lastOccurrenceTo">Latest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="groupStatus"> (optional)</param>
        /// <param name="groupTextSearch">A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)</param>
        /// <param name="orderby">the OData-like $orderby argument (optional, default to last_occurrence desc)</param>
        /// <param name="continuationToken">Cassandra request continuation token. The token is used for pagination. (optional)</param>
        /// <returns>Task of InlineResponse20071</returns>
        public async System.Threading.Tasks.Task<InlineResponse20071> CrashGroupsListAsync (string ownerName, string appName, DateTime? lastOccurrenceFrom = null, DateTime? lastOccurrenceTo = null, string appVersion = null, string groupType = null, string groupStatus = null, string groupTextSearch = null, string orderby = null, string continuationToken = null)
        {
             ApiResponse<InlineResponse20071> localVarResponse = await CrashGroupsListAsyncWithHttpInfo(ownerName, appName, lastOccurrenceFrom, lastOccurrenceTo, appVersion, groupType, groupStatus, groupTextSearch, orderby, continuationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of crash groups and whether the list contains all available groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="lastOccurrenceFrom">Earliest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="lastOccurrenceTo">Latest date when the last time a crash occured in a crash group (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="groupStatus"> (optional)</param>
        /// <param name="groupTextSearch">A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)</param>
        /// <param name="orderby">the OData-like $orderby argument (optional, default to last_occurrence desc)</param>
        /// <param name="continuationToken">Cassandra request continuation token. The token is used for pagination. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20071)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20071>> CrashGroupsListAsyncWithHttpInfo (string ownerName, string appName, DateTime? lastOccurrenceFrom = null, DateTime? lastOccurrenceTo = null, string appVersion = null, string groupType = null, string groupStatus = null, string groupTextSearch = null, string orderby = null, string continuationToken = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashGroupsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashGroupsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (lastOccurrenceFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_occurrence_from", lastOccurrenceFrom)); // query parameter
            if (lastOccurrenceTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_occurrence_to", lastOccurrenceTo)); // query parameter
            if (appVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_version", appVersion)); // query parameter
            if (groupType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group_type", groupType)); // query parameter
            if (groupStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group_status", groupStatus)); // query parameter
            if (groupTextSearch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group_text_search", groupTextSearch)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (continuationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "continuation_token", continuationToken)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashGroupsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20071>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20071) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20071)));
        }

        /// <summary>
        ///  Updates a group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group change object. All fields are optional and only provided fields will get updated.</param>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20070</returns>
        public InlineResponse20070 CrashGroupsUpdate (CrashGroupsCrashGroupIdBody body, string crashGroupId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20070> localVarResponse = CrashGroupsUpdateWithHttpInfo(body, crashGroupId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates a group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group change object. All fields are optional and only provided fields will get updated.</param>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20070</returns>
        public ApiResponse< InlineResponse20070 > CrashGroupsUpdateWithHttpInfo (CrashGroupsCrashGroupIdBody body, string crashGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CrashApi->CrashGroupsUpdate");
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashGroupsUpdate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashGroupsUpdate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashGroupsUpdate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashGroupsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20070>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20070) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20070)));
        }

        /// <summary>
        ///  Updates a group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group change object. All fields are optional and only provided fields will get updated.</param>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20070</returns>
        public async System.Threading.Tasks.Task<InlineResponse20070> CrashGroupsUpdateAsync (CrashGroupsCrashGroupIdBody body, string crashGroupId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20070> localVarResponse = await CrashGroupsUpdateAsyncWithHttpInfo(body, crashGroupId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates a group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group change object. All fields are optional and only provided fields will get updated.</param>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20070)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20070>> CrashGroupsUpdateAsyncWithHttpInfo (CrashGroupsCrashGroupIdBody body, string crashGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CrashApi->CrashGroupsUpdate");
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashGroupsUpdate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashGroupsUpdate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashGroupsUpdate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashGroupsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20070>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20070) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20070)));
        }

        /// <summary>
        ///  Delete a specific crash and related attachments and blobs for an app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="retentionDelete">true in that case if the method should skip update counts (optional, default to false)</param>
        /// <returns>InlineResponse20069</returns>
        public InlineResponse20069 CrashesDelete (string crashGroupId, string crashId, string ownerName, string appName, bool? retentionDelete = null)
        {
             ApiResponse<InlineResponse20069> localVarResponse = CrashesDeleteWithHttpInfo(crashGroupId, crashId, ownerName, appName, retentionDelete);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete a specific crash and related attachments and blobs for an app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="retentionDelete">true in that case if the method should skip update counts (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse20069</returns>
        public ApiResponse< InlineResponse20069 > CrashesDeleteWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName, bool? retentionDelete = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesDelete");
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesDelete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesDelete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (retentionDelete != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "retention_delete", retentionDelete)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20069>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20069) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20069)));
        }

        /// <summary>
        ///  Delete a specific crash and related attachments and blobs for an app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="retentionDelete">true in that case if the method should skip update counts (optional, default to false)</param>
        /// <returns>Task of InlineResponse20069</returns>
        public async System.Threading.Tasks.Task<InlineResponse20069> CrashesDeleteAsync (string crashGroupId, string crashId, string ownerName, string appName, bool? retentionDelete = null)
        {
             ApiResponse<InlineResponse20069> localVarResponse = await CrashesDeleteAsyncWithHttpInfo(crashGroupId, crashId, ownerName, appName, retentionDelete);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Delete a specific crash and related attachments and blobs for an app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="retentionDelete">true in that case if the method should skip update counts (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse20069)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20069>> CrashesDeleteAsyncWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName, bool? retentionDelete = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesDelete");
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesDelete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesDelete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (retentionDelete != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "retention_delete", retentionDelete)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20069>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20069) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20069)));
        }

        /// <summary>
        ///  Gets a specific crash for an app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="includeDetails">true if the crash should include in depth crash details (optional, default to false)</param>
        /// <param name="includeStacktrace">true if the crash should include the stacktrace information (optional, default to false)</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Crash</returns>
        public Crash CrashesGet (string crashGroupId, string crashId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, bool? includeDetails = null, bool? includeStacktrace = null, bool? groupingOnly = null)
        {
             ApiResponse<Crash> localVarResponse = CrashesGetWithHttpInfo(crashGroupId, crashId, ownerName, appName, includeReport, includeLog, includeDetails, includeStacktrace, groupingOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a specific crash for an app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="includeDetails">true if the crash should include in depth crash details (optional, default to false)</param>
        /// <param name="includeStacktrace">true if the crash should include the stacktrace information (optional, default to false)</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>ApiResponse of Crash</returns>
        public ApiResponse< Crash > CrashesGetWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, bool? includeDetails = null, bool? includeStacktrace = null, bool? groupingOnly = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesGet");
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGet");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (includeReport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_report", includeReport)); // query parameter
            if (includeLog != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_log", includeLog)); // query parameter
            if (includeDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_details", includeDetails)); // query parameter
            if (includeStacktrace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_stacktrace", includeStacktrace)); // query parameter
            if (groupingOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grouping_only", groupingOnly)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Crash>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Crash) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Crash)));
        }

        /// <summary>
        ///  Gets a specific crash for an app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="includeDetails">true if the crash should include in depth crash details (optional, default to false)</param>
        /// <param name="includeStacktrace">true if the crash should include the stacktrace information (optional, default to false)</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Task of Crash</returns>
        public async System.Threading.Tasks.Task<Crash> CrashesGetAsync (string crashGroupId, string crashId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, bool? includeDetails = null, bool? includeStacktrace = null, bool? groupingOnly = null)
        {
             ApiResponse<Crash> localVarResponse = await CrashesGetAsyncWithHttpInfo(crashGroupId, crashId, ownerName, appName, includeReport, includeLog, includeDetails, includeStacktrace, groupingOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a specific crash for an app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="includeDetails">true if the crash should include in depth crash details (optional, default to false)</param>
        /// <param name="includeStacktrace">true if the crash should include the stacktrace information (optional, default to false)</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Crash)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Crash>> CrashesGetAsyncWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, bool? includeDetails = null, bool? includeStacktrace = null, bool? groupingOnly = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesGet");
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGet");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (includeReport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_report", includeReport)); // query parameter
            if (includeLog != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_log", includeLog)); // query parameter
            if (includeDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_details", includeDetails)); // query parameter
            if (includeStacktrace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_stacktrace", includeStacktrace)); // query parameter
            if (groupingOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grouping_only", groupingOnly)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Crash>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Crash) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Crash)));
        }

        /// <summary>
        ///  Gets whether the application has any crashes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20064</returns>
        public InlineResponse20064 CrashesGetAppCrashesInfo (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20064> localVarResponse = CrashesGetAppCrashesInfoWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets whether the application has any crashes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20064</returns>
        public ApiResponse< InlineResponse20064 > CrashesGetAppCrashesInfoWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetAppCrashesInfo");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetAppCrashesInfo");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes_info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetAppCrashesInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20064>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20064) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20064)));
        }

        /// <summary>
        ///  Gets whether the application has any crashes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20064</returns>
        public async System.Threading.Tasks.Task<InlineResponse20064> CrashesGetAppCrashesInfoAsync (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20064> localVarResponse = await CrashesGetAppCrashesInfoAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets whether the application has any crashes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20064)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20064>> CrashesGetAppCrashesInfoAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetAppCrashesInfo");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetAppCrashesInfo");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes_info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetAppCrashesInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20064>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20064) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20064)));
        }

        /// <summary>
        ///  Gets a list of application versions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20018&gt;</returns>
        public List<InlineResponse20018> CrashesGetAppVersions (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20018>> localVarResponse = CrashesGetAppVersionsWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of application versions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20018&gt;</returns>
        public ApiResponse< List<InlineResponse20018> > CrashesGetAppVersionsWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetAppVersions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetAppVersions");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetAppVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20018>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20018>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20018>)));
        }

        /// <summary>
        ///  Gets a list of application versions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20018&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20018>> CrashesGetAppVersionsAsync (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20018>> localVarResponse = await CrashesGetAppVersionsAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of application versions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20018&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20018>>> CrashesGetAppVersionsAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetAppVersions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetAppVersions");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetAppVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20018>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20018>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20018>)));
        }

        /// <summary>
        ///  Gets the URI location to download crash attachment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20066</returns>
        public InlineResponse20066 CrashesGetCrashAttachmentLocation (string crashId, string attachmentId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20066> localVarResponse = CrashesGetCrashAttachmentLocationWithHttpInfo(crashId, attachmentId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the URI location to download crash attachment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20066</returns>
        public ApiResponse< InlineResponse20066 > CrashesGetCrashAttachmentLocationWithHttpInfo (string crashId, string attachmentId, string ownerName, string appName)
        {
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGetCrashAttachmentLocation");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling CrashApi->CrashesGetCrashAttachmentLocation");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetCrashAttachmentLocation");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetCrashAttachmentLocation");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetCrashAttachmentLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20066>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20066) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20066)));
        }

        /// <summary>
        ///  Gets the URI location to download crash attachment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20066</returns>
        public async System.Threading.Tasks.Task<InlineResponse20066> CrashesGetCrashAttachmentLocationAsync (string crashId, string attachmentId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20066> localVarResponse = await CrashesGetCrashAttachmentLocationAsyncWithHttpInfo(crashId, attachmentId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the URI location to download crash attachment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20066)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20066>> CrashesGetCrashAttachmentLocationAsyncWithHttpInfo (string crashId, string attachmentId, string ownerName, string appName)
        {
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGetCrashAttachmentLocation");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling CrashApi->CrashesGetCrashAttachmentLocation");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetCrashAttachmentLocation");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetCrashAttachmentLocation");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetCrashAttachmentLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20066>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20066) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20066)));
        }

        /// <summary>
        ///  Gets content of the text attachment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>string</returns>
        public string CrashesGetCrashTextAttachmentContent (string crashId, string attachmentId, string ownerName, string appName)
        {
             ApiResponse<string> localVarResponse = CrashesGetCrashTextAttachmentContentWithHttpInfo(crashId, attachmentId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets content of the text attachment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CrashesGetCrashTextAttachmentContentWithHttpInfo (string crashId, string attachmentId, string ownerName, string appName)
        {
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGetCrashTextAttachmentContent");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling CrashApi->CrashesGetCrashTextAttachmentContent");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetCrashTextAttachmentContent");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetCrashTextAttachmentContent");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetCrashTextAttachmentContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Gets content of the text attachment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CrashesGetCrashTextAttachmentContentAsync (string crashId, string attachmentId, string ownerName, string appName)
        {
             ApiResponse<string> localVarResponse = await CrashesGetCrashTextAttachmentContentAsyncWithHttpInfo(crashId, attachmentId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets content of the text attachment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="attachmentId">attachment id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CrashesGetCrashTextAttachmentContentAsyncWithHttpInfo (string crashId, string attachmentId, string ownerName, string appName)
        {
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGetCrashTextAttachmentContent");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling CrashApi->CrashesGetCrashTextAttachmentContent");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetCrashTextAttachmentContent");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetCrashTextAttachmentContent");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetCrashTextAttachmentContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Gets the native log of a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>string</returns>
        public string CrashesGetNativeCrash (string crashGroupId, string crashId, string ownerName, string appName)
        {
             ApiResponse<string> localVarResponse = CrashesGetNativeCrashWithHttpInfo(crashGroupId, crashId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the native log of a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CrashesGetNativeCrashWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesGetNativeCrash");
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGetNativeCrash");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetNativeCrash");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetNativeCrash");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetNativeCrash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Gets the native log of a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CrashesGetNativeCrashAsync (string crashGroupId, string crashId, string ownerName, string appName)
        {
             ApiResponse<string> localVarResponse = await CrashesGetNativeCrashAsyncWithHttpInfo(crashGroupId, crashId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the native log of a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CrashesGetNativeCrashAsyncWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesGetNativeCrash");
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGetNativeCrash");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetNativeCrash");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetNativeCrash");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetNativeCrash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Gets the native log of a specific crash as a text attachment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>string</returns>
        public string CrashesGetNativeCrashDownload (string crashGroupId, string crashId, string ownerName, string appName)
        {
             ApiResponse<string> localVarResponse = CrashesGetNativeCrashDownloadWithHttpInfo(crashGroupId, crashId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the native log of a specific crash as a text attachment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CrashesGetNativeCrashDownloadWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesGetNativeCrashDownload");
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGetNativeCrashDownload");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetNativeCrashDownload");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetNativeCrashDownload");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetNativeCrashDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Gets the native log of a specific crash as a text attachment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CrashesGetNativeCrashDownloadAsync (string crashGroupId, string crashId, string ownerName, string appName)
        {
             ApiResponse<string> localVarResponse = await CrashesGetNativeCrashDownloadAsyncWithHttpInfo(crashGroupId, crashId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the native log of a specific crash as a text attachment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CrashesGetNativeCrashDownloadAsyncWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesGetNativeCrashDownload");
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGetNativeCrashDownload");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetNativeCrashDownload");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetNativeCrashDownload");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetNativeCrashDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Gets the URI location to download json of a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20068</returns>
        public InlineResponse20068 CrashesGetRawCrashLocation (string crashGroupId, string crashId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20068> localVarResponse = CrashesGetRawCrashLocationWithHttpInfo(crashGroupId, crashId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the URI location to download json of a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20068</returns>
        public ApiResponse< InlineResponse20068 > CrashesGetRawCrashLocationWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesGetRawCrashLocation");
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGetRawCrashLocation");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetRawCrashLocation");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetRawCrashLocation");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetRawCrashLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20068>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20068) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20068)));
        }

        /// <summary>
        ///  Gets the URI location to download json of a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20068</returns>
        public async System.Threading.Tasks.Task<InlineResponse20068> CrashesGetRawCrashLocationAsync (string crashGroupId, string crashId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20068> localVarResponse = await CrashesGetRawCrashLocationAsyncWithHttpInfo(crashGroupId, crashId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the URI location to download json of a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20068)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20068>> CrashesGetRawCrashLocationAsyncWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesGetRawCrashLocation");
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGetRawCrashLocation");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetRawCrashLocation");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetRawCrashLocation");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetRawCrashLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20068>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20068) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20068)));
        }

        /// <summary>
        ///  Gets a stacktrace for a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Stacktrace</returns>
        public Stacktrace CrashesGetStacktrace (string crashGroupId, string crashId, string ownerName, string appName, bool? groupingOnly = null)
        {
             ApiResponse<Stacktrace> localVarResponse = CrashesGetStacktraceWithHttpInfo(crashGroupId, crashId, ownerName, appName, groupingOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a stacktrace for a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>ApiResponse of Stacktrace</returns>
        public ApiResponse< Stacktrace > CrashesGetStacktraceWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName, bool? groupingOnly = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesGetStacktrace");
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGetStacktrace");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetStacktrace");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetStacktrace");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (groupingOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grouping_only", groupingOnly)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetStacktrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stacktrace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Stacktrace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stacktrace)));
        }

        /// <summary>
        ///  Gets a stacktrace for a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Task of Stacktrace</returns>
        public async System.Threading.Tasks.Task<Stacktrace> CrashesGetStacktraceAsync (string crashGroupId, string crashId, string ownerName, string appName, bool? groupingOnly = null)
        {
             ApiResponse<Stacktrace> localVarResponse = await CrashesGetStacktraceAsyncWithHttpInfo(crashGroupId, crashId, ownerName, appName, groupingOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a stacktrace for a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="groupingOnly">true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Stacktrace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Stacktrace>> CrashesGetStacktraceAsyncWithHttpInfo (string crashGroupId, string crashId, string ownerName, string appName, bool? groupingOnly = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesGetStacktrace");
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesGetStacktrace");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesGetStacktrace");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesGetStacktrace");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (groupingOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grouping_only", groupingOnly)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesGetStacktrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stacktrace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Stacktrace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stacktrace)));
        }

        /// <summary>
        ///  Gets all crashes of a group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="errorType"> (optional)</param>
        /// <returns>List&lt;Crash&gt;</returns>
        public List<Crash> CrashesList (string crashGroupId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, DateTime? dateFrom = null, DateTime? dateTo = null, string appVersion = null, string errorType = null)
        {
             ApiResponse<List<Crash>> localVarResponse = CrashesListWithHttpInfo(crashGroupId, ownerName, appName, includeReport, includeLog, dateFrom, dateTo, appVersion, errorType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all crashes of a group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="errorType"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Crash&gt;</returns>
        public ApiResponse< List<Crash> > CrashesListWithHttpInfo (string crashGroupId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, DateTime? dateFrom = null, DateTime? dateTo = null, string appVersion = null, string errorType = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesList");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (includeReport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_report", includeReport)); // query parameter
            if (includeLog != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_log", includeLog)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_from", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_to", dateTo)); // query parameter
            if (appVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_version", appVersion)); // query parameter
            if (errorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "error_type", errorType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Crash>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Crash>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Crash>)));
        }

        /// <summary>
        ///  Gets all crashes of a group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="errorType"> (optional)</param>
        /// <returns>Task of List&lt;Crash&gt;</returns>
        public async System.Threading.Tasks.Task<List<Crash>> CrashesListAsync (string crashGroupId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, DateTime? dateFrom = null, DateTime? dateTo = null, string appVersion = null, string errorType = null)
        {
             ApiResponse<List<Crash>> localVarResponse = await CrashesListAsyncWithHttpInfo(crashGroupId, ownerName, appName, includeReport, includeLog, dateFrom, dateTo, appVersion, errorType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all crashes of a group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">id of a specific group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeReport">true if the crash should include the raw crash report. Default is false (optional, default to false)</param>
        /// <param name="includeLog">true if the crash should include the custom log report. Default is false (optional, default to false)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="appVersion">version (optional)</param>
        /// <param name="errorType"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Crash&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Crash>>> CrashesListAsyncWithHttpInfo (string crashGroupId, string ownerName, string appName, bool? includeReport = null, bool? includeLog = null, DateTime? dateFrom = null, DateTime? dateTo = null, string appVersion = null, string errorType = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling CrashApi->CrashesList");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (includeReport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_report", includeReport)); // query parameter
            if (includeLog != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_log", includeLog)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_from", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_to", dateTo)); // query parameter
            if (appVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_version", appVersion)); // query parameter
            if (errorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "error_type", errorType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Crash>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Crash>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Crash>)));
        }

        /// <summary>
        ///  Gets all attachments for a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20067&gt;</returns>
        public List<InlineResponse20067> CrashesListAttachments (string crashId, string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20067>> localVarResponse = CrashesListAttachmentsWithHttpInfo(crashId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all attachments for a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20067&gt;</returns>
        public ApiResponse< List<InlineResponse20067> > CrashesListAttachmentsWithHttpInfo (string crashId, string ownerName, string appName)
        {
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesListAttachments");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesListAttachments");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesListAttachments");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesListAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20067>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20067>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20067>)));
        }

        /// <summary>
        ///  Gets all attachments for a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20067&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20067>> CrashesListAttachmentsAsync (string crashId, string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20067>> localVarResponse = await CrashesListAttachmentsAsyncWithHttpInfo(crashId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all attachments for a specific crash.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">id of a specific crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20067&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20067>>> CrashesListAttachmentsAsyncWithHttpInfo (string crashId, string ownerName, string appName)
        {
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling CrashApi->CrashesListAttachments");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->CrashesListAttachments");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->CrashesListAttachments");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesListAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20067>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20067>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20067>)));
        }

        /// <summary>
        /// Gets missing symbol crash group by its id Gets missing symbol crash group by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolGroupId">missing symbol crash group id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object MissingSymbolGroupsGet (string symbolGroupId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = MissingSymbolGroupsGetWithHttpInfo(symbolGroupId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets missing symbol crash group by its id Gets missing symbol crash group by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolGroupId">missing symbol crash group id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > MissingSymbolGroupsGetWithHttpInfo (string symbolGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolGroupId' is set
            if (symbolGroupId == null)
                throw new ApiException(400, "Missing required parameter 'symbolGroupId' when calling CrashApi->MissingSymbolGroupsGet");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->MissingSymbolGroupsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->MissingSymbolGroupsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolGroupId != null) localVarPathParams.Add("symbol_group_id", this.Configuration.ApiClient.ParameterToString(symbolGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MissingSymbolGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets missing symbol crash group by its id Gets missing symbol crash group by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolGroupId">missing symbol crash group id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MissingSymbolGroupsGetAsync (string symbolGroupId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await MissingSymbolGroupsGetAsyncWithHttpInfo(symbolGroupId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets missing symbol crash group by its id Gets missing symbol crash group by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolGroupId">missing symbol crash group id</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MissingSymbolGroupsGetAsyncWithHttpInfo (string symbolGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolGroupId' is set
            if (symbolGroupId == null)
                throw new ApiException(400, "Missing required parameter 'symbolGroupId' when calling CrashApi->MissingSymbolGroupsGet");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->MissingSymbolGroupsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->MissingSymbolGroupsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolGroupId != null) localVarPathParams.Add("symbol_group_id", this.Configuration.ApiClient.ParameterToString(symbolGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MissingSymbolGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets application level statistics for all missing symbol groups Gets application level statistics for all missing symbol groups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object MissingSymbolGroupsInfo (string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = MissingSymbolGroupsInfoWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets application level statistics for all missing symbol groups Gets application level statistics for all missing symbol groups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > MissingSymbolGroupsInfoWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->MissingSymbolGroupsInfo");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->MissingSymbolGroupsInfo");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MissingSymbolGroupsInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets application level statistics for all missing symbol groups Gets application level statistics for all missing symbol groups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MissingSymbolGroupsInfoAsync (string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await MissingSymbolGroupsInfoAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets application level statistics for all missing symbol groups Gets application level statistics for all missing symbol groups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MissingSymbolGroupsInfoAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->MissingSymbolGroupsInfo");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->MissingSymbolGroupsInfo");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MissingSymbolGroupsInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets top N (ordered by crash count) of crash groups by missing symbol Gets top N (ordered by crash count) of crash groups by missing symbol
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">top N elements</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object MissingSymbolGroupsList (int? top, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = MissingSymbolGroupsListWithHttpInfo(top, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets top N (ordered by crash count) of crash groups by missing symbol Gets top N (ordered by crash count) of crash groups by missing symbol
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">top N elements</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > MissingSymbolGroupsListWithHttpInfo (int? top, string ownerName, string appName)
        {
            // verify the required parameter 'top' is set
            if (top == null)
                throw new ApiException(400, "Missing required parameter 'top' when calling CrashApi->MissingSymbolGroupsList");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->MissingSymbolGroupsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->MissingSymbolGroupsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "top", top)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MissingSymbolGroupsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets top N (ordered by crash count) of crash groups by missing symbol Gets top N (ordered by crash count) of crash groups by missing symbol
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">top N elements</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MissingSymbolGroupsListAsync (int? top, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await MissingSymbolGroupsListAsyncWithHttpInfo(top, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets top N (ordered by crash count) of crash groups by missing symbol Gets top N (ordered by crash count) of crash groups by missing symbol
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">top N elements</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MissingSymbolGroupsListAsyncWithHttpInfo (int? top, string ownerName, string appName)
        {
            // verify the required parameter 'top' is set
            if (top == null)
                throw new ApiException(400, "Missing required parameter 'top' when calling CrashApi->MissingSymbolGroupsList");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->MissingSymbolGroupsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->MissingSymbolGroupsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "top", top)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MissingSymbolGroupsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Commits or aborts the symbol upload process for a new set of symbols for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object SymbolUploadsComplete (SymbolUploadsSymbolUploadIdBody body, string symbolUploadId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = SymbolUploadsCompleteWithHttpInfo(body, symbolUploadId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Commits or aborts the symbol upload process for a new set of symbols for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SymbolUploadsCompleteWithHttpInfo (SymbolUploadsSymbolUploadIdBody body, string symbolUploadId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CrashApi->SymbolUploadsComplete");
            // verify the required parameter 'symbolUploadId' is set
            if (symbolUploadId == null)
                throw new ApiException(400, "Missing required parameter 'symbolUploadId' when calling CrashApi->SymbolUploadsComplete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolUploadsComplete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolUploadsComplete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolUploadId != null) localVarPathParams.Add("symbol_upload_id", this.Configuration.ApiClient.ParameterToString(symbolUploadId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolUploadsComplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Commits or aborts the symbol upload process for a new set of symbols for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SymbolUploadsCompleteAsync (SymbolUploadsSymbolUploadIdBody body, string symbolUploadId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await SymbolUploadsCompleteAsyncWithHttpInfo(body, symbolUploadId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Commits or aborts the symbol upload process for a new set of symbols for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SymbolUploadsCompleteAsyncWithHttpInfo (SymbolUploadsSymbolUploadIdBody body, string symbolUploadId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CrashApi->SymbolUploadsComplete");
            // verify the required parameter 'symbolUploadId' is set
            if (symbolUploadId == null)
                throw new ApiException(400, "Missing required parameter 'symbolUploadId' when calling CrashApi->SymbolUploadsComplete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolUploadsComplete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolUploadsComplete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolUploadId != null) localVarPathParams.Add("symbol_upload_id", this.Configuration.ApiClient.ParameterToString(symbolUploadId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolUploadsComplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Begins the symbol upload process for a new set of symbols for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object SymbolUploadsCreate (AppNameSymbolUploadsBody body, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = SymbolUploadsCreateWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Begins the symbol upload process for a new set of symbols for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SymbolUploadsCreateWithHttpInfo (AppNameSymbolUploadsBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CrashApi->SymbolUploadsCreate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolUploadsCreate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolUploadsCreate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolUploadsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Begins the symbol upload process for a new set of symbols for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SymbolUploadsCreateAsync (AppNameSymbolUploadsBody body, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await SymbolUploadsCreateAsyncWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Begins the symbol upload process for a new set of symbols for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The symbol information</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SymbolUploadsCreateAsyncWithHttpInfo (AppNameSymbolUploadsBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CrashApi->SymbolUploadsCreate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolUploadsCreate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolUploadsCreate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolUploadsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Deletes a symbol upload by id for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object SymbolUploadsDelete (string symbolUploadId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = SymbolUploadsDeleteWithHttpInfo(symbolUploadId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes a symbol upload by id for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SymbolUploadsDeleteWithHttpInfo (string symbolUploadId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolUploadId' is set
            if (symbolUploadId == null)
                throw new ApiException(400, "Missing required parameter 'symbolUploadId' when calling CrashApi->SymbolUploadsDelete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolUploadsDelete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolUploadsDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolUploadId != null) localVarPathParams.Add("symbol_upload_id", this.Configuration.ApiClient.ParameterToString(symbolUploadId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolUploadsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Deletes a symbol upload by id for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SymbolUploadsDeleteAsync (string symbolUploadId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await SymbolUploadsDeleteAsyncWithHttpInfo(symbolUploadId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Deletes a symbol upload by id for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SymbolUploadsDeleteAsyncWithHttpInfo (string symbolUploadId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolUploadId' is set
            if (symbolUploadId == null)
                throw new ApiException(400, "Missing required parameter 'symbolUploadId' when calling CrashApi->SymbolUploadsDelete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolUploadsDelete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolUploadsDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolUploadId != null) localVarPathParams.Add("symbol_upload_id", this.Configuration.ApiClient.ParameterToString(symbolUploadId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolUploadsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Gets a symbol upload by id for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object SymbolUploadsGet (string symbolUploadId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = SymbolUploadsGetWithHttpInfo(symbolUploadId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a symbol upload by id for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SymbolUploadsGetWithHttpInfo (string symbolUploadId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolUploadId' is set
            if (symbolUploadId == null)
                throw new ApiException(400, "Missing required parameter 'symbolUploadId' when calling CrashApi->SymbolUploadsGet");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolUploadsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolUploadsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolUploadId != null) localVarPathParams.Add("symbol_upload_id", this.Configuration.ApiClient.ParameterToString(symbolUploadId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolUploadsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Gets a symbol upload by id for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SymbolUploadsGetAsync (string symbolUploadId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await SymbolUploadsGetAsyncWithHttpInfo(symbolUploadId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a symbol upload by id for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SymbolUploadsGetAsyncWithHttpInfo (string symbolUploadId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolUploadId' is set
            if (symbolUploadId == null)
                throw new ApiException(400, "Missing required parameter 'symbolUploadId' when calling CrashApi->SymbolUploadsGet");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolUploadsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolUploadsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolUploadId != null) localVarPathParams.Add("symbol_upload_id", this.Configuration.ApiClient.ParameterToString(symbolUploadId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolUploadsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Gets the URL to download the symbol upload
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 SymbolUploadsGetLocation (string symbolUploadId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20029> localVarResponse = SymbolUploadsGetLocationWithHttpInfo(symbolUploadId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the URL to download the symbol upload
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public ApiResponse< InlineResponse20029 > SymbolUploadsGetLocationWithHttpInfo (string symbolUploadId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolUploadId' is set
            if (symbolUploadId == null)
                throw new ApiException(400, "Missing required parameter 'symbolUploadId' when calling CrashApi->SymbolUploadsGetLocation");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolUploadsGetLocation");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolUploadsGetLocation");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolUploadId != null) localVarPathParams.Add("symbol_upload_id", this.Configuration.ApiClient.ParameterToString(symbolUploadId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolUploadsGetLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20029) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        ///  Gets the URL to download the symbol upload
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029> SymbolUploadsGetLocationAsync (string symbolUploadId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20029> localVarResponse = await SymbolUploadsGetLocationAsyncWithHttpInfo(symbolUploadId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the URL to download the symbol upload
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolUploadId">The ID of the symbol upload</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> SymbolUploadsGetLocationAsyncWithHttpInfo (string symbolUploadId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolUploadId' is set
            if (symbolUploadId == null)
                throw new ApiException(400, "Missing required parameter 'symbolUploadId' when calling CrashApi->SymbolUploadsGetLocation");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolUploadsGetLocation");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolUploadsGetLocation");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolUploadId != null) localVarPathParams.Add("symbol_upload_id", this.Configuration.ApiClient.ParameterToString(symbolUploadId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolUploadsGetLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20029) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        ///  Gets a list of all uploads for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (optional, default to 30)</param>
        /// <param name="status">Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)</param>
        /// <param name="symbolType">The type of symbols (optional)</param>
        /// <returns>List&lt;InlineResponse20030&gt;</returns>
        public List<InlineResponse20030> SymbolUploadsList (string ownerName, string appName, long? top = null, string status = null, string symbolType = null)
        {
             ApiResponse<List<InlineResponse20030>> localVarResponse = SymbolUploadsListWithHttpInfo(ownerName, appName, top, status, symbolType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of all uploads for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (optional, default to 30)</param>
        /// <param name="status">Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)</param>
        /// <param name="symbolType">The type of symbols (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20030&gt;</returns>
        public ApiResponse< List<InlineResponse20030> > SymbolUploadsListWithHttpInfo (string ownerName, string appName, long? top = null, string status = null, string symbolType = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolUploadsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolUploadsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "top", top)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (symbolType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol_type", symbolType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolUploadsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20030>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20030>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20030>)));
        }

        /// <summary>
        ///  Gets a list of all uploads for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (optional, default to 30)</param>
        /// <param name="status">Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)</param>
        /// <param name="symbolType">The type of symbols (optional)</param>
        /// <returns>Task of List&lt;InlineResponse20030&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20030>> SymbolUploadsListAsync (string ownerName, string appName, long? top = null, string status = null, string symbolType = null)
        {
             ApiResponse<List<InlineResponse20030>> localVarResponse = await SymbolUploadsListAsyncWithHttpInfo(ownerName, appName, top, status, symbolType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of all uploads for the specified application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (optional, default to 30)</param>
        /// <param name="status">Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)</param>
        /// <param name="symbolType">The type of symbols (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20030&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20030>>> SymbolUploadsListAsyncWithHttpInfo (string ownerName, string appName, long? top = null, string status = null, string symbolType = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolUploadsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolUploadsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "top", top)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (symbolType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol_type", symbolType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolUploadsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20030>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20030>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20030>)));
        }

        /// <summary>
        ///  Returns a particular symbol by id (uuid) for the provided application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object SymbolsGet (string symbolId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = SymbolsGetWithHttpInfo(symbolId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a particular symbol by id (uuid) for the provided application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SymbolsGetWithHttpInfo (string symbolId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling CrashApi->SymbolsGet");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolId != null) localVarPathParams.Add("symbol_id", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a particular symbol by id (uuid) for the provided application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SymbolsGetAsync (string symbolId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await SymbolsGetAsyncWithHttpInfo(symbolId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a particular symbol by id (uuid) for the provided application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SymbolsGetAsyncWithHttpInfo (string symbolId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling CrashApi->SymbolsGet");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolId != null) localVarPathParams.Add("symbol_id", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Gets the URL to download the symbol
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 SymbolsGetLocation (string symbolId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20027> localVarResponse = SymbolsGetLocationWithHttpInfo(symbolId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the URL to download the symbol
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public ApiResponse< InlineResponse20027 > SymbolsGetLocationWithHttpInfo (string symbolId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling CrashApi->SymbolsGetLocation");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolsGetLocation");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolsGetLocation");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolId != null) localVarPathParams.Add("symbol_id", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolsGetLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

        /// <summary>
        ///  Gets the URL to download the symbol
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> SymbolsGetLocationAsync (string symbolId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20027> localVarResponse = await SymbolsGetLocationAsyncWithHttpInfo(symbolId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the URL to download the symbol
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> SymbolsGetLocationAsyncWithHttpInfo (string symbolId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling CrashApi->SymbolsGetLocation");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolsGetLocation");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolsGetLocation");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolId != null) localVarPathParams.Add("symbol_id", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolsGetLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

        /// <summary>
        ///  Returns a particular symbol by id (uuid) for the provided application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object SymbolsGetStatus (string symbolId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = SymbolsGetStatusWithHttpInfo(symbolId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a particular symbol by id (uuid) for the provided application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SymbolsGetStatusWithHttpInfo (string symbolId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling CrashApi->SymbolsGetStatus");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolsGetStatus");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolsGetStatus");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolId != null) localVarPathParams.Add("symbol_id", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolsGetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a particular symbol by id (uuid) for the provided application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SymbolsGetStatusAsync (string symbolId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await SymbolsGetStatusAsyncWithHttpInfo(symbolId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a particular symbol by id (uuid) for the provided application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SymbolsGetStatusAsyncWithHttpInfo (string symbolId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling CrashApi->SymbolsGetStatus");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolsGetStatus");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolsGetStatus");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolId != null) localVarPathParams.Add("symbol_id", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolsGetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Marks a symbol by id (uuid) as ignored
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object SymbolsIgnore (string symbolId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = SymbolsIgnoreWithHttpInfo(symbolId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Marks a symbol by id (uuid) as ignored
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SymbolsIgnoreWithHttpInfo (string symbolId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling CrashApi->SymbolsIgnore");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolsIgnore");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolsIgnore");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolId != null) localVarPathParams.Add("symbol_id", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolsIgnore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Marks a symbol by id (uuid) as ignored
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SymbolsIgnoreAsync (string symbolId, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await SymbolsIgnoreAsyncWithHttpInfo(symbolId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Marks a symbol by id (uuid) as ignored
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The ID of the symbol (uuid of the symbol)</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SymbolsIgnoreAsyncWithHttpInfo (string symbolId, string ownerName, string appName)
        {
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling CrashApi->SymbolsIgnore");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolsIgnore");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolsIgnore");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbolId != null) localVarPathParams.Add("symbol_id", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolsIgnore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the list of all symbols for the provided application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20028&gt;</returns>
        public List<InlineResponse20028> SymbolsList (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20028>> localVarResponse = SymbolsListWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the list of all symbols for the provided application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20028&gt;</returns>
        public ApiResponse< List<InlineResponse20028> > SymbolsListWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20028>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20028>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20028>)));
        }

        /// <summary>
        ///  Returns the list of all symbols for the provided application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20028&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20028>> SymbolsListAsync (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20028>> localVarResponse = await SymbolsListAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the list of all symbols for the provided application
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20028&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20028>>> SymbolsListAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling CrashApi->SymbolsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling CrashApi->SymbolsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SymbolsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20028>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20028>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20028>)));
        }

    }
}
