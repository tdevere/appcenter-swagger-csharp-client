/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IErrorsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List of app builds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>InlineResponse20055</returns>
        InlineResponse20055 ErrorsAppBuildsList (string version, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string errorType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List of app builds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>ApiResponse of InlineResponse20055</returns>
        ApiResponse<InlineResponse20055> ErrorsAppBuildsListWithHttpInfo (string version, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string errorType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all available versions in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="filter">A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>InlineResponse20054</returns>
        InlineResponse20054 ErrorsAvailableVersions (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, long? skip = null, string filter = null, string inlinecount = null, string errorType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all available versions in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="filter">A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        ApiResponse<InlineResponse20054> ErrorsAvailableVersionsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, long? skip = null, string filter = null, string inlinecount = null, string errorType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>InlineResponse20050</returns>
        InlineResponse20050 ErrorsCountsPerDay (DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null, string appBuild = null, string errorType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        ApiResponse<InlineResponse20050> ErrorsCountsPerDayWithHttpInfo (DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null, string appBuild = null, string errorType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20048</returns>
        InlineResponse20048 ErrorsDeleteError (string errorGroupId, string errorId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        ApiResponse<InlineResponse20048> ErrorsDeleteErrorWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error attachment location.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20040</returns>
        InlineResponse20040 ErrorsErrorAttachmentLocation (string errorId, string attachmentId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error attachment location.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        ApiResponse<InlineResponse20040> ErrorsErrorAttachmentLocationWithHttpInfo (string errorId, string attachmentId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error attachment text.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20039</returns>
        InlineResponse20039 ErrorsErrorAttachmentText (string errorId, string attachmentId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error attachment text.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        ApiResponse<InlineResponse20039> ErrorsErrorAttachmentTextWithHttpInfo (string errorId, string attachmentId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List error attachments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20041&gt;</returns>
        List<InlineResponse20041> ErrorsErrorAttachments (string errorId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List error attachments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20041&gt;</returns>
        ApiResponse<List<InlineResponse20041>> ErrorsErrorAttachmentsWithHttpInfo (string errorId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download details for a specific error.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="format">the format of the crash log (optional)</param>
        /// <returns>Object</returns>
        Object ErrorsErrorDownload (string errorGroupId, string errorId, string ownerName, string appName, string format = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download details for a specific error.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="format">the format of the crash log (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ErrorsErrorDownloadWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName, string format = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="versions"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>InlineResponse20044</returns>
        InlineResponse20044 ErrorsErrorFreeDevicePercentages (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null, string errorType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="versions"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        ApiResponse<InlineResponse20044> ErrorsErrorFreeDevicePercentagesWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null, string errorType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error groups list based on search parameters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to matchingReportsCount)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>InlineResponse20052</returns>
        InlineResponse20052 ErrorsErrorGroupsSearch (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error groups list based on search parameters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to matchingReportsCount)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>ApiResponse of InlineResponse20052</returns>
        ApiResponse<InlineResponse20052> ErrorsErrorGroupsSearchWithHttpInfo (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error location.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20040</returns>
        InlineResponse20040 ErrorsErrorLocation (string errorGroupId, string errorId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error location.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        ApiResponse<InlineResponse20040> ErrorsErrorLocationWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Errors list based on search parameters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to timestamp)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>InlineResponse20042</returns>
        InlineResponse20042 ErrorsErrorSearch (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Errors list based on search parameters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to timestamp)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        ApiResponse<InlineResponse20042> ErrorsErrorSearchWithHttpInfo (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error Stacktrace details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DiagnosticsStackTrace</returns>
        DiagnosticsStackTrace ErrorsErrorStackTrace (string errorGroupId, string errorId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error Stacktrace details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DiagnosticsStackTrace</returns>
        ApiResponse<DiagnosticsStackTrace> ErrorsErrorStackTraceWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20047</returns>
        InlineResponse20047 ErrorsGetErrorDetails (string errorGroupId, string errorId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        ApiResponse<InlineResponse20047> ErrorsGetErrorDetailsWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName);
        /// <summary>
        /// gets the retention settings in days
        /// </summary>
        /// <remarks>
        /// gets the retention settings in days
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20043</returns>
        InlineResponse20043 ErrorsGetRetentionSettings (string ownerName, string appName);

        /// <summary>
        /// gets the retention settings in days
        /// </summary>
        /// <remarks>
        /// gets the retention settings in days
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        ApiResponse<InlineResponse20043> ErrorsGetRetentionSettingsWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of errors by day in the time range of the selected error group with selected version
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>InlineResponse20050</returns>
        InlineResponse20050 ErrorsGroupCountsPerDay (string errorGroupId, DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of errors by day in the time range of the selected error group with selected version
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        ApiResponse<InlineResponse20050> ErrorsGroupCountsPerDayWithHttpInfo (string errorGroupId, DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error group details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20051</returns>
        InlineResponse20051 ErrorsGroupDetails (string errorGroupId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error group details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20051</returns>
        ApiResponse<InlineResponse20051> ErrorsGroupDetailsWithHttpInfo (string errorGroupId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>InlineResponse20044</returns>
        InlineResponse20044 ErrorsGroupErrorFreeDevicePercentages (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        ApiResponse<InlineResponse20044> ErrorsGroupErrorFreeDevicePercentagesWithHttpInfo (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the stack trace for the error group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DiagnosticsStackTrace</returns>
        DiagnosticsStackTrace ErrorsGroupErrorStackTrace (string errorGroupId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the stack trace for the error group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DiagnosticsStackTrace</returns>
        ApiResponse<DiagnosticsStackTrace> ErrorsGroupErrorStackTraceWithHttpInfo (string errorGroupId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List of error groups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="groupState"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>InlineResponse20053</returns>
        InlineResponse20053 ErrorsGroupList (DateTime? start, string ownerName, string appName, string version = null, string appBuild = null, string groupState = null, DateTime? end = null, string orderby = null, long? top = null, string errorType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List of error groups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="groupState"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        ApiResponse<InlineResponse20053> ErrorsGroupListWithHttpInfo (DateTime? start, string ownerName, string appName, string version = null, string appBuild = null, string groupState = null, DateTime? end = null, string orderby = null, long? top = null, string errorType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Top models of the selected error group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>InlineResponse20046</returns>
        InlineResponse20046 ErrorsGroupModelCounts (string errorGroupId, string ownerName, string appName, long? top = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Top models of the selected error group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>ApiResponse of InlineResponse20046</returns>
        ApiResponse<InlineResponse20046> ErrorsGroupModelCountsWithHttpInfo (string errorGroupId, string ownerName, string appName, long? top = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Top OSes of the selected error group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>InlineResponse20045</returns>
        InlineResponse20045 ErrorsGroupOperatingSystemCounts (string errorGroupId, string ownerName, string appName, long? top = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Top OSes of the selected error group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        ApiResponse<InlineResponse20045> ErrorsGroupOperatingSystemCountsWithHttpInfo (string errorGroupId, string ownerName, string appName, long? top = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Latest error details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20047</returns>
        InlineResponse20047 ErrorsLatestErrorDetails (string errorGroupId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Latest error details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        ApiResponse<InlineResponse20047> ErrorsLatestErrorDetailsWithHttpInfo (string errorGroupId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all errors for group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="os"> (optional)</param>
        /// <returns>InlineResponse20049</returns>
        InlineResponse20049 ErrorsListForGroup (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string model = null, string os = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all errors for group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="os"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        ApiResponse<InlineResponse20049> ErrorsListForGroupWithHttpInfo (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string model = null, string os = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get session logs by error ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>InlineResponse20038</returns>
        InlineResponse20038 ErrorsListSessionLogs (string errorId, string ownerName, string appName, DateTime? date = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get session logs by error ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        ApiResponse<InlineResponse20038> ErrorsListSessionLogsWithHttpInfo (string errorId, string ownerName, string appName, DateTime? date = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update error group state
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The state of the error group</param>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20051</returns>
        InlineResponse20051 ErrorsUpdateState (ErrorGroupsErrorGroupIdBody body, string errorGroupId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update error group state
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The state of the error group</param>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20051</returns>
        ApiResponse<InlineResponse20051> ErrorsUpdateStateWithHttpInfo (ErrorGroupsErrorGroupIdBody body, string errorGroupId, string ownerName, string appName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List of app builds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>Task of InlineResponse20055</returns>
        System.Threading.Tasks.Task<InlineResponse20055> ErrorsAppBuildsListAsync (string version, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string errorType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List of app builds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20055)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20055>> ErrorsAppBuildsListAsyncWithHttpInfo (string version, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string errorType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all available versions in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="filter">A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>Task of InlineResponse20054</returns>
        System.Threading.Tasks.Task<InlineResponse20054> ErrorsAvailableVersionsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, long? skip = null, string filter = null, string inlinecount = null, string errorType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all available versions in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="filter">A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> ErrorsAvailableVersionsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, long? skip = null, string filter = null, string inlinecount = null, string errorType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>Task of InlineResponse20050</returns>
        System.Threading.Tasks.Task<InlineResponse20050> ErrorsCountsPerDayAsync (DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null, string appBuild = null, string errorType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> ErrorsCountsPerDayAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null, string appBuild = null, string errorType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20048</returns>
        System.Threading.Tasks.Task<InlineResponse20048> ErrorsDeleteErrorAsync (string errorGroupId, string errorId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> ErrorsDeleteErrorAsyncWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error attachment location.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20040</returns>
        System.Threading.Tasks.Task<InlineResponse20040> ErrorsErrorAttachmentLocationAsync (string errorId, string attachmentId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error attachment location.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> ErrorsErrorAttachmentLocationAsyncWithHttpInfo (string errorId, string attachmentId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error attachment text.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20039</returns>
        System.Threading.Tasks.Task<InlineResponse20039> ErrorsErrorAttachmentTextAsync (string errorId, string attachmentId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error attachment text.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> ErrorsErrorAttachmentTextAsyncWithHttpInfo (string errorId, string attachmentId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List error attachments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20041&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20041>> ErrorsErrorAttachmentsAsync (string errorId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List error attachments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20041&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20041>>> ErrorsErrorAttachmentsAsyncWithHttpInfo (string errorId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download details for a specific error.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="format">the format of the crash log (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ErrorsErrorDownloadAsync (string errorGroupId, string errorId, string ownerName, string appName, string format = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download details for a specific error.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="format">the format of the crash log (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ErrorsErrorDownloadAsyncWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName, string format = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="versions"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>Task of InlineResponse20044</returns>
        System.Threading.Tasks.Task<InlineResponse20044> ErrorsErrorFreeDevicePercentagesAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null, string errorType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="versions"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> ErrorsErrorFreeDevicePercentagesAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null, string errorType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error groups list based on search parameters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to matchingReportsCount)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>Task of InlineResponse20052</returns>
        System.Threading.Tasks.Task<InlineResponse20052> ErrorsErrorGroupsSearchAsync (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error groups list based on search parameters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to matchingReportsCount)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (InlineResponse20052)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20052>> ErrorsErrorGroupsSearchAsyncWithHttpInfo (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error location.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20040</returns>
        System.Threading.Tasks.Task<InlineResponse20040> ErrorsErrorLocationAsync (string errorGroupId, string errorId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error location.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> ErrorsErrorLocationAsyncWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Errors list based on search parameters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to timestamp)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>Task of InlineResponse20042</returns>
        System.Threading.Tasks.Task<InlineResponse20042> ErrorsErrorSearchAsync (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Errors list based on search parameters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to timestamp)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> ErrorsErrorSearchAsyncWithHttpInfo (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error Stacktrace details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DiagnosticsStackTrace</returns>
        System.Threading.Tasks.Task<DiagnosticsStackTrace> ErrorsErrorStackTraceAsync (string errorGroupId, string errorId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error Stacktrace details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DiagnosticsStackTrace)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagnosticsStackTrace>> ErrorsErrorStackTraceAsyncWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20047</returns>
        System.Threading.Tasks.Task<InlineResponse20047> ErrorsGetErrorDetailsAsync (string errorGroupId, string errorId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> ErrorsGetErrorDetailsAsyncWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName);
        /// <summary>
        /// gets the retention settings in days
        /// </summary>
        /// <remarks>
        /// gets the retention settings in days
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20043</returns>
        System.Threading.Tasks.Task<InlineResponse20043> ErrorsGetRetentionSettingsAsync (string ownerName, string appName);

        /// <summary>
        /// gets the retention settings in days
        /// </summary>
        /// <remarks>
        /// gets the retention settings in days
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> ErrorsGetRetentionSettingsAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of errors by day in the time range of the selected error group with selected version
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>Task of InlineResponse20050</returns>
        System.Threading.Tasks.Task<InlineResponse20050> ErrorsGroupCountsPerDayAsync (string errorGroupId, DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of errors by day in the time range of the selected error group with selected version
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> ErrorsGroupCountsPerDayAsyncWithHttpInfo (string errorGroupId, DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error group details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20051</returns>
        System.Threading.Tasks.Task<InlineResponse20051> ErrorsGroupDetailsAsync (string errorGroupId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Error group details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20051)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20051>> ErrorsGroupDetailsAsyncWithHttpInfo (string errorGroupId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>Task of InlineResponse20044</returns>
        System.Threading.Tasks.Task<InlineResponse20044> ErrorsGroupErrorFreeDevicePercentagesAsync (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> ErrorsGroupErrorFreeDevicePercentagesAsyncWithHttpInfo (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the stack trace for the error group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DiagnosticsStackTrace</returns>
        System.Threading.Tasks.Task<DiagnosticsStackTrace> ErrorsGroupErrorStackTraceAsync (string errorGroupId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the stack trace for the error group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DiagnosticsStackTrace)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagnosticsStackTrace>> ErrorsGroupErrorStackTraceAsyncWithHttpInfo (string errorGroupId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List of error groups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="groupState"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>Task of InlineResponse20053</returns>
        System.Threading.Tasks.Task<InlineResponse20053> ErrorsGroupListAsync (DateTime? start, string ownerName, string appName, string version = null, string appBuild = null, string groupState = null, DateTime? end = null, string orderby = null, long? top = null, string errorType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List of error groups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="groupState"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> ErrorsGroupListAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, string version = null, string appBuild = null, string groupState = null, DateTime? end = null, string orderby = null, long? top = null, string errorType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Top models of the selected error group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>Task of InlineResponse20046</returns>
        System.Threading.Tasks.Task<InlineResponse20046> ErrorsGroupModelCountsAsync (string errorGroupId, string ownerName, string appName, long? top = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Top models of the selected error group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (InlineResponse20046)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20046>> ErrorsGroupModelCountsAsyncWithHttpInfo (string errorGroupId, string ownerName, string appName, long? top = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Top OSes of the selected error group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>Task of InlineResponse20045</returns>
        System.Threading.Tasks.Task<InlineResponse20045> ErrorsGroupOperatingSystemCountsAsync (string errorGroupId, string ownerName, string appName, long? top = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Top OSes of the selected error group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> ErrorsGroupOperatingSystemCountsAsyncWithHttpInfo (string errorGroupId, string ownerName, string appName, long? top = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Latest error details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20047</returns>
        System.Threading.Tasks.Task<InlineResponse20047> ErrorsLatestErrorDetailsAsync (string errorGroupId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Latest error details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> ErrorsLatestErrorDetailsAsyncWithHttpInfo (string errorGroupId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all errors for group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="os"> (optional)</param>
        /// <returns>Task of InlineResponse20049</returns>
        System.Threading.Tasks.Task<InlineResponse20049> ErrorsListForGroupAsync (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string model = null, string os = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all errors for group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="os"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> ErrorsListForGroupAsyncWithHttpInfo (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string model = null, string os = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get session logs by error ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>Task of InlineResponse20038</returns>
        System.Threading.Tasks.Task<InlineResponse20038> ErrorsListSessionLogsAsync (string errorId, string ownerName, string appName, DateTime? date = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get session logs by error ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> ErrorsListSessionLogsAsyncWithHttpInfo (string errorId, string ownerName, string appName, DateTime? date = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update error group state
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The state of the error group</param>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20051</returns>
        System.Threading.Tasks.Task<InlineResponse20051> ErrorsUpdateStateAsync (ErrorGroupsErrorGroupIdBody body, string errorGroupId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update error group state
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The state of the error group</param>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20051)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20051>> ErrorsUpdateStateAsyncWithHttpInfo (ErrorGroupsErrorGroupIdBody body, string errorGroupId, string ownerName, string appName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ErrorsApi : IErrorsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ErrorsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ErrorsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ErrorsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  List of app builds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>InlineResponse20055</returns>
        public InlineResponse20055 ErrorsAppBuildsList (string version, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string errorType = null)
        {
             ApiResponse<InlineResponse20055> localVarResponse = ErrorsAppBuildsListWithHttpInfo(version, start, ownerName, appName, end, top, errorType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  List of app builds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>ApiResponse of InlineResponse20055</returns>
        public ApiResponse< InlineResponse20055 > ErrorsAppBuildsListWithHttpInfo (string version, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string errorType = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ErrorsApi->ErrorsAppBuildsList");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsAppBuildsList");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsAppBuildsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsAppBuildsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (errorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "errorType", errorType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsAppBuildsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20055>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20055) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20055)));
        }

        /// <summary>
        ///  List of app builds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>Task of InlineResponse20055</returns>
        public async System.Threading.Tasks.Task<InlineResponse20055> ErrorsAppBuildsListAsync (string version, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string errorType = null)
        {
             ApiResponse<InlineResponse20055> localVarResponse = await ErrorsAppBuildsListAsyncWithHttpInfo(version, start, ownerName, appName, end, top, errorType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  List of app builds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20055)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20055>> ErrorsAppBuildsListAsyncWithHttpInfo (string version, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string errorType = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ErrorsApi->ErrorsAppBuildsList");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsAppBuildsList");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsAppBuildsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsAppBuildsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (errorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "errorType", errorType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsAppBuildsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20055>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20055) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20055)));
        }

        /// <summary>
        ///  Get all available versions in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="filter">A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>InlineResponse20054</returns>
        public InlineResponse20054 ErrorsAvailableVersions (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, long? skip = null, string filter = null, string inlinecount = null, string errorType = null)
        {
             ApiResponse<InlineResponse20054> localVarResponse = ErrorsAvailableVersionsWithHttpInfo(start, ownerName, appName, end, top, skip, filter, inlinecount, errorType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all available versions in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="filter">A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        public ApiResponse< InlineResponse20054 > ErrorsAvailableVersionsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, long? skip = null, string filter = null, string inlinecount = null, string errorType = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsAvailableVersions");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsAvailableVersions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsAvailableVersions");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/available_versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (inlinecount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$inlinecount", inlinecount)); // query parameter
            if (errorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "errorType", errorType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsAvailableVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20054>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20054) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20054)));
        }

        /// <summary>
        ///  Get all available versions in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="filter">A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>Task of InlineResponse20054</returns>
        public async System.Threading.Tasks.Task<InlineResponse20054> ErrorsAvailableVersionsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, long? skip = null, string filter = null, string inlinecount = null, string errorType = null)
        {
             ApiResponse<InlineResponse20054> localVarResponse = await ErrorsAvailableVersionsAsyncWithHttpInfo(start, ownerName, appName, end, top, skip, filter, inlinecount, errorType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get all available versions in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="filter">A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> ErrorsAvailableVersionsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, long? skip = null, string filter = null, string inlinecount = null, string errorType = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsAvailableVersions");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsAvailableVersions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsAvailableVersions");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/available_versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (inlinecount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$inlinecount", inlinecount)); // query parameter
            if (errorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "errorType", errorType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsAvailableVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20054>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20054) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20054)));
        }

        /// <summary>
        ///  Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>InlineResponse20050</returns>
        public InlineResponse20050 ErrorsCountsPerDay (DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null, string appBuild = null, string errorType = null)
        {
             ApiResponse<InlineResponse20050> localVarResponse = ErrorsCountsPerDayWithHttpInfo(start, ownerName, appName, version, end, appBuild, errorType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        public ApiResponse< InlineResponse20050 > ErrorsCountsPerDayWithHttpInfo (DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null, string appBuild = null, string errorType = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsCountsPerDay");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsCountsPerDay");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsCountsPerDay");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (appBuild != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_build", appBuild)); // query parameter
            if (errorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "errorType", errorType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsCountsPerDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20050>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20050) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20050)));
        }

        /// <summary>
        ///  Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>Task of InlineResponse20050</returns>
        public async System.Threading.Tasks.Task<InlineResponse20050> ErrorsCountsPerDayAsync (DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null, string appBuild = null, string errorType = null)
        {
             ApiResponse<InlineResponse20050> localVarResponse = await ErrorsCountsPerDayAsyncWithHttpInfo(start, ownerName, appName, version, end, appBuild, errorType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> ErrorsCountsPerDayAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null, string appBuild = null, string errorType = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsCountsPerDay");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsCountsPerDay");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsCountsPerDay");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (appBuild != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_build", appBuild)); // query parameter
            if (errorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "errorType", errorType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsCountsPerDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20050>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20050) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20050)));
        }

        /// <summary>
        ///  Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20048</returns>
        public InlineResponse20048 ErrorsDeleteError (string errorGroupId, string errorId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20048> localVarResponse = ErrorsDeleteErrorWithHttpInfo(errorGroupId, errorId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        public ApiResponse< InlineResponse20048 > ErrorsDeleteErrorWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsDeleteError");
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsDeleteError");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsDeleteError");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsDeleteError");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsDeleteError", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20048) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

        /// <summary>
        ///  Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20048</returns>
        public async System.Threading.Tasks.Task<InlineResponse20048> ErrorsDeleteErrorAsync (string errorGroupId, string errorId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20048> localVarResponse = await ErrorsDeleteErrorAsyncWithHttpInfo(errorGroupId, errorId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> ErrorsDeleteErrorAsyncWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsDeleteError");
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsDeleteError");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsDeleteError");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsDeleteError");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsDeleteError", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20048) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

        /// <summary>
        ///  Error attachment location.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20040</returns>
        public InlineResponse20040 ErrorsErrorAttachmentLocation (string errorId, string attachmentId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20040> localVarResponse = ErrorsErrorAttachmentLocationWithHttpInfo(errorId, attachmentId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Error attachment location.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        public ApiResponse< InlineResponse20040 > ErrorsErrorAttachmentLocationWithHttpInfo (string errorId, string attachmentId, string ownerName, string appName)
        {
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsErrorAttachmentLocation");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling ErrorsApi->ErrorsErrorAttachmentLocation");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorAttachmentLocation");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorAttachmentLocation");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorAttachmentLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20040>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20040) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20040)));
        }

        /// <summary>
        ///  Error attachment location.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20040</returns>
        public async System.Threading.Tasks.Task<InlineResponse20040> ErrorsErrorAttachmentLocationAsync (string errorId, string attachmentId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20040> localVarResponse = await ErrorsErrorAttachmentLocationAsyncWithHttpInfo(errorId, attachmentId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Error attachment location.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> ErrorsErrorAttachmentLocationAsyncWithHttpInfo (string errorId, string attachmentId, string ownerName, string appName)
        {
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsErrorAttachmentLocation");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling ErrorsApi->ErrorsErrorAttachmentLocation");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorAttachmentLocation");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorAttachmentLocation");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorAttachmentLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20040>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20040) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20040)));
        }

        /// <summary>
        ///  Error attachment text.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20039</returns>
        public InlineResponse20039 ErrorsErrorAttachmentText (string errorId, string attachmentId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20039> localVarResponse = ErrorsErrorAttachmentTextWithHttpInfo(errorId, attachmentId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Error attachment text.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        public ApiResponse< InlineResponse20039 > ErrorsErrorAttachmentTextWithHttpInfo (string errorId, string attachmentId, string ownerName, string appName)
        {
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsErrorAttachmentText");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling ErrorsApi->ErrorsErrorAttachmentText");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorAttachmentText");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorAttachmentText");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorAttachmentText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20039>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20039) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20039)));
        }

        /// <summary>
        ///  Error attachment text.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20039</returns>
        public async System.Threading.Tasks.Task<InlineResponse20039> ErrorsErrorAttachmentTextAsync (string errorId, string attachmentId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20039> localVarResponse = await ErrorsErrorAttachmentTextAsyncWithHttpInfo(errorId, attachmentId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Error attachment text.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="attachmentId">Error attachment id.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> ErrorsErrorAttachmentTextAsyncWithHttpInfo (string errorId, string attachmentId, string ownerName, string appName)
        {
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsErrorAttachmentText");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling ErrorsApi->ErrorsErrorAttachmentText");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorAttachmentText");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorAttachmentText");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorAttachmentText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20039>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20039) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20039)));
        }

        /// <summary>
        ///  List error attachments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20041&gt;</returns>
        public List<InlineResponse20041> ErrorsErrorAttachments (string errorId, string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20041>> localVarResponse = ErrorsErrorAttachmentsWithHttpInfo(errorId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  List error attachments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20041&gt;</returns>
        public ApiResponse< List<InlineResponse20041> > ErrorsErrorAttachmentsWithHttpInfo (string errorId, string ownerName, string appName)
        {
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsErrorAttachments");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorAttachments");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorAttachments");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20041>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20041>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20041>)));
        }

        /// <summary>
        ///  List error attachments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20041&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20041>> ErrorsErrorAttachmentsAsync (string errorId, string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20041>> localVarResponse = await ErrorsErrorAttachmentsAsyncWithHttpInfo(errorId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  List error attachments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20041&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20041>>> ErrorsErrorAttachmentsAsyncWithHttpInfo (string errorId, string ownerName, string appName)
        {
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsErrorAttachments");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorAttachments");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorAttachments");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20041>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20041>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20041>)));
        }

        /// <summary>
        ///  Download details for a specific error.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="format">the format of the crash log (optional)</param>
        /// <returns>Object</returns>
        public Object ErrorsErrorDownload (string errorGroupId, string errorId, string ownerName, string appName, string format = null)
        {
             ApiResponse<Object> localVarResponse = ErrorsErrorDownloadWithHttpInfo(errorGroupId, errorId, ownerName, appName, format);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Download details for a specific error.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="format">the format of the crash log (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ErrorsErrorDownloadWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName, string format = null)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsErrorDownload");
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsErrorDownload");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorDownload");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorDownload");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Download details for a specific error.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="format">the format of the crash log (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ErrorsErrorDownloadAsync (string errorGroupId, string errorId, string ownerName, string appName, string format = null)
        {
             ApiResponse<Object> localVarResponse = await ErrorsErrorDownloadAsyncWithHttpInfo(errorGroupId, errorId, ownerName, appName, format);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Download details for a specific error.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="format">the format of the crash log (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ErrorsErrorDownloadAsyncWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName, string format = null)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsErrorDownload");
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsErrorDownload");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorDownload");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorDownload");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="versions"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>InlineResponse20044</returns>
        public InlineResponse20044 ErrorsErrorFreeDevicePercentages (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null, string errorType = null)
        {
             ApiResponse<InlineResponse20044> localVarResponse = ErrorsErrorFreeDevicePercentagesWithHttpInfo(start, ownerName, appName, end, versions, appBuild, errorType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="versions"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        public ApiResponse< InlineResponse20044 > ErrorsErrorFreeDevicePercentagesWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null, string errorType = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsErrorFreeDevicePercentages");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorFreeDevicePercentages");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorFreeDevicePercentages");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            if (appBuild != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_build", appBuild)); // query parameter
            if (errorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "errorType", errorType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorFreeDevicePercentages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20044>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20044) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20044)));
        }

        /// <summary>
        ///  Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="versions"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>Task of InlineResponse20044</returns>
        public async System.Threading.Tasks.Task<InlineResponse20044> ErrorsErrorFreeDevicePercentagesAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null, string errorType = null)
        {
             ApiResponse<InlineResponse20044> localVarResponse = await ErrorsErrorFreeDevicePercentagesAsyncWithHttpInfo(start, ownerName, appName, end, versions, appBuild, errorType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="versions"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), excluding All (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> ErrorsErrorFreeDevicePercentagesAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null, string errorType = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsErrorFreeDevicePercentages");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorFreeDevicePercentages");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorFreeDevicePercentages");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            if (appBuild != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_build", appBuild)); // query parameter
            if (errorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "errorType", errorType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorFreeDevicePercentages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20044>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20044) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20044)));
        }

        /// <summary>
        ///  Error groups list based on search parameters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to matchingReportsCount)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>InlineResponse20052</returns>
        public InlineResponse20052 ErrorsErrorGroupsSearch (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null)
        {
             ApiResponse<InlineResponse20052> localVarResponse = ErrorsErrorGroupsSearchWithHttpInfo(ownerName, appName, filter, q, order, sort, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Error groups list based on search parameters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to matchingReportsCount)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>ApiResponse of InlineResponse20052</returns>
        public ApiResponse< InlineResponse20052 > ErrorsErrorGroupsSearchWithHttpInfo (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorGroupsSearch");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorGroupsSearch");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorGroupsSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20052>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20052) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20052)));
        }

        /// <summary>
        ///  Error groups list based on search parameters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to matchingReportsCount)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>Task of InlineResponse20052</returns>
        public async System.Threading.Tasks.Task<InlineResponse20052> ErrorsErrorGroupsSearchAsync (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null)
        {
             ApiResponse<InlineResponse20052> localVarResponse = await ErrorsErrorGroupsSearchAsyncWithHttpInfo(ownerName, appName, filter, q, order, sort, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Error groups list based on search parameters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to matchingReportsCount)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (InlineResponse20052)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20052>> ErrorsErrorGroupsSearchAsyncWithHttpInfo (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorGroupsSearch");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorGroupsSearch");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorGroupsSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20052>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20052) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20052)));
        }

        /// <summary>
        ///  Error location.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20040</returns>
        public InlineResponse20040 ErrorsErrorLocation (string errorGroupId, string errorId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20040> localVarResponse = ErrorsErrorLocationWithHttpInfo(errorGroupId, errorId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Error location.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        public ApiResponse< InlineResponse20040 > ErrorsErrorLocationWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsErrorLocation");
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsErrorLocation");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorLocation");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorLocation");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20040>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20040) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20040)));
        }

        /// <summary>
        ///  Error location.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20040</returns>
        public async System.Threading.Tasks.Task<InlineResponse20040> ErrorsErrorLocationAsync (string errorGroupId, string errorId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20040> localVarResponse = await ErrorsErrorLocationAsyncWithHttpInfo(errorGroupId, errorId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Error location.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> ErrorsErrorLocationAsyncWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsErrorLocation");
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsErrorLocation");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorLocation");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorLocation");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20040>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20040) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20040)));
        }

        /// <summary>
        ///  Errors list based on search parameters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to timestamp)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>InlineResponse20042</returns>
        public InlineResponse20042 ErrorsErrorSearch (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null)
        {
             ApiResponse<InlineResponse20042> localVarResponse = ErrorsErrorSearchWithHttpInfo(ownerName, appName, filter, q, order, sort, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Errors list based on search parameters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to timestamp)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        public ApiResponse< InlineResponse20042 > ErrorsErrorSearchWithHttpInfo (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorSearch");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorSearch");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20042>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20042) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20042)));
        }

        /// <summary>
        ///  Errors list based on search parameters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to timestamp)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>Task of InlineResponse20042</returns>
        public async System.Threading.Tasks.Task<InlineResponse20042> ErrorsErrorSearchAsync (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null)
        {
             ApiResponse<InlineResponse20042> localVarResponse = await ErrorsErrorSearchAsyncWithHttpInfo(ownerName, appName, filter, q, order, sort, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Errors list based on search parameters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="filter">A filter as specified in OData notation (optional)</param>
        /// <param name="q">A query string (optional)</param>
        /// <param name="order">It controls the order of sorting (optional, default to desc)</param>
        /// <param name="sort">It controls the sort based on specified field (optional, default to timestamp)</param>
        /// <param name="top">The maximum number of results to return (optional, default to 100)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> ErrorsErrorSearchAsyncWithHttpInfo (string ownerName, string appName, string filter = null, string q = null, string order = null, string sort = null, long? top = null, long? skip = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorSearch");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorSearch");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20042>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20042) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20042)));
        }

        /// <summary>
        ///  Error Stacktrace details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DiagnosticsStackTrace</returns>
        public DiagnosticsStackTrace ErrorsErrorStackTrace (string errorGroupId, string errorId, string ownerName, string appName)
        {
             ApiResponse<DiagnosticsStackTrace> localVarResponse = ErrorsErrorStackTraceWithHttpInfo(errorGroupId, errorId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Error Stacktrace details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DiagnosticsStackTrace</returns>
        public ApiResponse< DiagnosticsStackTrace > ErrorsErrorStackTraceWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsErrorStackTrace");
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsErrorStackTrace");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorStackTrace");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorStackTrace");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorStackTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagnosticsStackTrace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagnosticsStackTrace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagnosticsStackTrace)));
        }

        /// <summary>
        ///  Error Stacktrace details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DiagnosticsStackTrace</returns>
        public async System.Threading.Tasks.Task<DiagnosticsStackTrace> ErrorsErrorStackTraceAsync (string errorGroupId, string errorId, string ownerName, string appName)
        {
             ApiResponse<DiagnosticsStackTrace> localVarResponse = await ErrorsErrorStackTraceAsyncWithHttpInfo(errorGroupId, errorId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Error Stacktrace details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DiagnosticsStackTrace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagnosticsStackTrace>> ErrorsErrorStackTraceAsyncWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsErrorStackTrace");
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsErrorStackTrace");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsErrorStackTrace");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsErrorStackTrace");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsErrorStackTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagnosticsStackTrace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagnosticsStackTrace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagnosticsStackTrace)));
        }

        /// <summary>
        ///  Error details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20047</returns>
        public InlineResponse20047 ErrorsGetErrorDetails (string errorGroupId, string errorId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20047> localVarResponse = ErrorsGetErrorDetailsWithHttpInfo(errorGroupId, errorId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Error details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        public ApiResponse< InlineResponse20047 > ErrorsGetErrorDetailsWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGetErrorDetails");
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsGetErrorDetails");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGetErrorDetails");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGetErrorDetails");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGetErrorDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20047>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20047) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20047)));
        }

        /// <summary>
        ///  Error details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20047</returns>
        public async System.Threading.Tasks.Task<InlineResponse20047> ErrorsGetErrorDetailsAsync (string errorGroupId, string errorId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20047> localVarResponse = await ErrorsGetErrorDetailsAsyncWithHttpInfo(errorGroupId, errorId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Error details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> ErrorsGetErrorDetailsAsyncWithHttpInfo (string errorGroupId, string errorId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGetErrorDetails");
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsGetErrorDetails");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGetErrorDetails");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGetErrorDetails");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGetErrorDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20047>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20047) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20047)));
        }

        /// <summary>
        /// gets the retention settings in days gets the retention settings in days
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20043</returns>
        public InlineResponse20043 ErrorsGetRetentionSettings (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20043> localVarResponse = ErrorsGetRetentionSettingsWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// gets the retention settings in days gets the retention settings in days
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        public ApiResponse< InlineResponse20043 > ErrorsGetRetentionSettingsWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGetRetentionSettings");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGetRetentionSettings");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGetRetentionSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20043>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20043) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20043)));
        }

        /// <summary>
        /// gets the retention settings in days gets the retention settings in days
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20043</returns>
        public async System.Threading.Tasks.Task<InlineResponse20043> ErrorsGetRetentionSettingsAsync (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20043> localVarResponse = await ErrorsGetRetentionSettingsAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// gets the retention settings in days gets the retention settings in days
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> ErrorsGetRetentionSettingsAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGetRetentionSettings");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGetRetentionSettings");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGetRetentionSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20043>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20043) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20043)));
        }

        /// <summary>
        ///  Count of errors by day in the time range of the selected error group with selected version
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>InlineResponse20050</returns>
        public InlineResponse20050 ErrorsGroupCountsPerDay (string errorGroupId, DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null)
        {
             ApiResponse<InlineResponse20050> localVarResponse = ErrorsGroupCountsPerDayWithHttpInfo(errorGroupId, start, ownerName, appName, version, end);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Count of errors by day in the time range of the selected error group with selected version
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        public ApiResponse< InlineResponse20050 > ErrorsGroupCountsPerDayWithHttpInfo (string errorGroupId, DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGroupCountsPerDay");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsGroupCountsPerDay");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupCountsPerDay");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupCountsPerDay");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupCountsPerDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20050>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20050) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20050)));
        }

        /// <summary>
        ///  Count of errors by day in the time range of the selected error group with selected version
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>Task of InlineResponse20050</returns>
        public async System.Threading.Tasks.Task<InlineResponse20050> ErrorsGroupCountsPerDayAsync (string errorGroupId, DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null)
        {
             ApiResponse<InlineResponse20050> localVarResponse = await ErrorsGroupCountsPerDayAsyncWithHttpInfo(errorGroupId, start, ownerName, appName, version, end);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Count of errors by day in the time range of the selected error group with selected version
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> ErrorsGroupCountsPerDayAsyncWithHttpInfo (string errorGroupId, DateTime? start, string ownerName, string appName, string version = null, DateTime? end = null)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGroupCountsPerDay");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsGroupCountsPerDay");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupCountsPerDay");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupCountsPerDay");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupCountsPerDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20050>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20050) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20050)));
        }

        /// <summary>
        ///  Error group details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20051</returns>
        public InlineResponse20051 ErrorsGroupDetails (string errorGroupId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20051> localVarResponse = ErrorsGroupDetailsWithHttpInfo(errorGroupId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Error group details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20051</returns>
        public ApiResponse< InlineResponse20051 > ErrorsGroupDetailsWithHttpInfo (string errorGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGroupDetails");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupDetails");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupDetails");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20051>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20051) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20051)));
        }

        /// <summary>
        ///  Error group details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20051</returns>
        public async System.Threading.Tasks.Task<InlineResponse20051> ErrorsGroupDetailsAsync (string errorGroupId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20051> localVarResponse = await ErrorsGroupDetailsAsyncWithHttpInfo(errorGroupId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Error group details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20051)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20051>> ErrorsGroupDetailsAsyncWithHttpInfo (string errorGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGroupDetails");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupDetails");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupDetails");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20051>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20051) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20051)));
        }

        /// <summary>
        ///  Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>InlineResponse20044</returns>
        public InlineResponse20044 ErrorsGroupErrorFreeDevicePercentages (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null)
        {
             ApiResponse<InlineResponse20044> localVarResponse = ErrorsGroupErrorFreeDevicePercentagesWithHttpInfo(errorGroupId, start, ownerName, appName, end);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        public ApiResponse< InlineResponse20044 > ErrorsGroupErrorFreeDevicePercentagesWithHttpInfo (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGroupErrorFreeDevicePercentages");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsGroupErrorFreeDevicePercentages");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupErrorFreeDevicePercentages");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupErrorFreeDevicePercentages");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupErrorFreeDevicePercentages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20044>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20044) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20044)));
        }

        /// <summary>
        ///  Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>Task of InlineResponse20044</returns>
        public async System.Threading.Tasks.Task<InlineResponse20044> ErrorsGroupErrorFreeDevicePercentagesAsync (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null)
        {
             ApiResponse<InlineResponse20044> localVarResponse = await ErrorsGroupErrorFreeDevicePercentagesAsyncWithHttpInfo(errorGroupId, start, ownerName, appName, end);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> ErrorsGroupErrorFreeDevicePercentagesAsyncWithHttpInfo (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGroupErrorFreeDevicePercentages");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsGroupErrorFreeDevicePercentages");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupErrorFreeDevicePercentages");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupErrorFreeDevicePercentages");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupErrorFreeDevicePercentages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20044>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20044) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20044)));
        }

        /// <summary>
        ///  Gets the stack trace for the error group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>DiagnosticsStackTrace</returns>
        public DiagnosticsStackTrace ErrorsGroupErrorStackTrace (string errorGroupId, string ownerName, string appName)
        {
             ApiResponse<DiagnosticsStackTrace> localVarResponse = ErrorsGroupErrorStackTraceWithHttpInfo(errorGroupId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the stack trace for the error group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of DiagnosticsStackTrace</returns>
        public ApiResponse< DiagnosticsStackTrace > ErrorsGroupErrorStackTraceWithHttpInfo (string errorGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGroupErrorStackTrace");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupErrorStackTrace");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupErrorStackTrace");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupErrorStackTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagnosticsStackTrace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagnosticsStackTrace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagnosticsStackTrace)));
        }

        /// <summary>
        ///  Gets the stack trace for the error group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of DiagnosticsStackTrace</returns>
        public async System.Threading.Tasks.Task<DiagnosticsStackTrace> ErrorsGroupErrorStackTraceAsync (string errorGroupId, string ownerName, string appName)
        {
             ApiResponse<DiagnosticsStackTrace> localVarResponse = await ErrorsGroupErrorStackTraceAsyncWithHttpInfo(errorGroupId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the stack trace for the error group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (DiagnosticsStackTrace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiagnosticsStackTrace>> ErrorsGroupErrorStackTraceAsyncWithHttpInfo (string errorGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGroupErrorStackTrace");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupErrorStackTrace");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupErrorStackTrace");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupErrorStackTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiagnosticsStackTrace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DiagnosticsStackTrace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiagnosticsStackTrace)));
        }

        /// <summary>
        ///  List of error groups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="groupState"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>InlineResponse20053</returns>
        public InlineResponse20053 ErrorsGroupList (DateTime? start, string ownerName, string appName, string version = null, string appBuild = null, string groupState = null, DateTime? end = null, string orderby = null, long? top = null, string errorType = null)
        {
             ApiResponse<InlineResponse20053> localVarResponse = ErrorsGroupListWithHttpInfo(start, ownerName, appName, version, appBuild, groupState, end, orderby, top, errorType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  List of error groups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="groupState"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        public ApiResponse< InlineResponse20053 > ErrorsGroupListWithHttpInfo (DateTime? start, string ownerName, string appName, string version = null, string appBuild = null, string groupState = null, DateTime? end = null, string orderby = null, long? top = null, string errorType = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsGroupList");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (appBuild != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_build", appBuild)); // query parameter
            if (groupState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupState", groupState)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (errorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "errorType", errorType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20053>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20053) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20053)));
        }

        /// <summary>
        ///  List of error groups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="groupState"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>Task of InlineResponse20053</returns>
        public async System.Threading.Tasks.Task<InlineResponse20053> ErrorsGroupListAsync (DateTime? start, string ownerName, string appName, string version = null, string appBuild = null, string groupState = null, DateTime? end = null, string orderby = null, long? top = null, string errorType = null)
        {
             ApiResponse<InlineResponse20053> localVarResponse = await ErrorsGroupListAsyncWithHttpInfo(start, ownerName, appName, version, appBuild, groupState, end, orderby, top, errorType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  List of error groups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="version"> (optional)</param>
        /// <param name="appBuild">app build (optional)</param>
        /// <param name="groupState"> (optional)</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="errorType">Type of error (handled vs unhandled), including All (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> ErrorsGroupListAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, string version = null, string appBuild = null, string groupState = null, DateTime? end = null, string orderby = null, long? top = null, string errorType = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsGroupList");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (appBuild != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_build", appBuild)); // query parameter
            if (groupState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupState", groupState)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (errorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "errorType", errorType)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20053>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20053) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20053)));
        }

        /// <summary>
        ///  Top models of the selected error group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>InlineResponse20046</returns>
        public InlineResponse20046 ErrorsGroupModelCounts (string errorGroupId, string ownerName, string appName, long? top = null)
        {
             ApiResponse<InlineResponse20046> localVarResponse = ErrorsGroupModelCountsWithHttpInfo(errorGroupId, ownerName, appName, top);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Top models of the selected error group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>ApiResponse of InlineResponse20046</returns>
        public ApiResponse< InlineResponse20046 > ErrorsGroupModelCountsWithHttpInfo (string errorGroupId, string ownerName, string appName, long? top = null)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGroupModelCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupModelCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupModelCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupModelCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20046>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20046) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20046)));
        }

        /// <summary>
        ///  Top models of the selected error group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>Task of InlineResponse20046</returns>
        public async System.Threading.Tasks.Task<InlineResponse20046> ErrorsGroupModelCountsAsync (string errorGroupId, string ownerName, string appName, long? top = null)
        {
             ApiResponse<InlineResponse20046> localVarResponse = await ErrorsGroupModelCountsAsyncWithHttpInfo(errorGroupId, ownerName, appName, top);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Top models of the selected error group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (InlineResponse20046)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20046>> ErrorsGroupModelCountsAsyncWithHttpInfo (string errorGroupId, string ownerName, string appName, long? top = null)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGroupModelCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupModelCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupModelCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupModelCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20046>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20046) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20046)));
        }

        /// <summary>
        ///  Top OSes of the selected error group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>InlineResponse20045</returns>
        public InlineResponse20045 ErrorsGroupOperatingSystemCounts (string errorGroupId, string ownerName, string appName, long? top = null)
        {
             ApiResponse<InlineResponse20045> localVarResponse = ErrorsGroupOperatingSystemCountsWithHttpInfo(errorGroupId, ownerName, appName, top);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Top OSes of the selected error group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        public ApiResponse< InlineResponse20045 > ErrorsGroupOperatingSystemCountsWithHttpInfo (string errorGroupId, string ownerName, string appName, long? top = null)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGroupOperatingSystemCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupOperatingSystemCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupOperatingSystemCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupOperatingSystemCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20045>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20045) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20045)));
        }

        /// <summary>
        ///  Top OSes of the selected error group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>Task of InlineResponse20045</returns>
        public async System.Threading.Tasks.Task<InlineResponse20045> ErrorsGroupOperatingSystemCountsAsync (string errorGroupId, string ownerName, string appName, long? top = null)
        {
             ApiResponse<InlineResponse20045> localVarResponse = await ErrorsGroupOperatingSystemCountsAsyncWithHttpInfo(errorGroupId, ownerName, appName, top);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Top OSes of the selected error group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> ErrorsGroupOperatingSystemCountsAsyncWithHttpInfo (string errorGroupId, string ownerName, string appName, long? top = null)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsGroupOperatingSystemCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsGroupOperatingSystemCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsGroupOperatingSystemCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsGroupOperatingSystemCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20045>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20045) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20045)));
        }

        /// <summary>
        ///  Latest error details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20047</returns>
        public InlineResponse20047 ErrorsLatestErrorDetails (string errorGroupId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20047> localVarResponse = ErrorsLatestErrorDetailsWithHttpInfo(errorGroupId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Latest error details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        public ApiResponse< InlineResponse20047 > ErrorsLatestErrorDetailsWithHttpInfo (string errorGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsLatestErrorDetails");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsLatestErrorDetails");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsLatestErrorDetails");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsLatestErrorDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20047>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20047) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20047)));
        }

        /// <summary>
        ///  Latest error details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20047</returns>
        public async System.Threading.Tasks.Task<InlineResponse20047> ErrorsLatestErrorDetailsAsync (string errorGroupId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20047> localVarResponse = await ErrorsLatestErrorDetailsAsyncWithHttpInfo(errorGroupId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Latest error details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> ErrorsLatestErrorDetailsAsyncWithHttpInfo (string errorGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsLatestErrorDetails");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsLatestErrorDetails");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsLatestErrorDetails");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsLatestErrorDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20047>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20047) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20047)));
        }

        /// <summary>
        ///  Get all errors for group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="os"> (optional)</param>
        /// <returns>InlineResponse20049</returns>
        public InlineResponse20049 ErrorsListForGroup (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string model = null, string os = null)
        {
             ApiResponse<InlineResponse20049> localVarResponse = ErrorsListForGroupWithHttpInfo(errorGroupId, start, ownerName, appName, end, top, model, os);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all errors for group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="os"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        public ApiResponse< InlineResponse20049 > ErrorsListForGroupWithHttpInfo (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string model = null, string os = null)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsListForGroup");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsListForGroup");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsListForGroup");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsListForGroup");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (model != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "model", model)); // query parameter
            if (os != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os", os)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsListForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20049>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20049) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20049)));
        }

        /// <summary>
        ///  Get all errors for group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="os"> (optional)</param>
        /// <returns>Task of InlineResponse20049</returns>
        public async System.Threading.Tasks.Task<InlineResponse20049> ErrorsListForGroupAsync (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string model = null, string os = null)
        {
             ApiResponse<InlineResponse20049> localVarResponse = await ErrorsListForGroupAsyncWithHttpInfo(errorGroupId, start, ownerName, appName, end, top, model, os);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get all errors for group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="os"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> ErrorsListForGroupAsyncWithHttpInfo (string errorGroupId, DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, string model = null, string os = null)
        {
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsListForGroup");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ErrorsApi->ErrorsListForGroup");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsListForGroup");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsListForGroup");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (model != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "model", model)); // query parameter
            if (os != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os", os)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsListForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20049>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20049) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20049)));
        }

        /// <summary>
        ///  Get session logs by error ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>InlineResponse20038</returns>
        public InlineResponse20038 ErrorsListSessionLogs (string errorId, string ownerName, string appName, DateTime? date = null)
        {
             ApiResponse<InlineResponse20038> localVarResponse = ErrorsListSessionLogsWithHttpInfo(errorId, ownerName, appName, date);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get session logs by error ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        public ApiResponse< InlineResponse20038 > ErrorsListSessionLogsWithHttpInfo (string errorId, string ownerName, string appName, DateTime? date = null)
        {
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsListSessionLogs");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsListSessionLogs");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsListSessionLogs");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsListSessionLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20038>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20038) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20038)));
        }

        /// <summary>
        ///  Get session logs by error ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>Task of InlineResponse20038</returns>
        public async System.Threading.Tasks.Task<InlineResponse20038> ErrorsListSessionLogsAsync (string errorId, string ownerName, string appName, DateTime? date = null)
        {
             ApiResponse<InlineResponse20038> localVarResponse = await ErrorsListSessionLogsAsyncWithHttpInfo(errorId, ownerName, appName, date);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get session logs by error ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorId">The id of the error</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> ErrorsListSessionLogsAsyncWithHttpInfo (string errorId, string ownerName, string appName, DateTime? date = null)
        {
            // verify the required parameter 'errorId' is set
            if (errorId == null)
                throw new ApiException(400, "Missing required parameter 'errorId' when calling ErrorsApi->ErrorsListSessionLogs");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsListSessionLogs");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsListSessionLogs");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorId != null) localVarPathParams.Add("errorId", this.Configuration.ApiClient.ParameterToString(errorId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsListSessionLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20038>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20038) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20038)));
        }

        /// <summary>
        ///  Update error group state
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The state of the error group</param>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20051</returns>
        public InlineResponse20051 ErrorsUpdateState (ErrorGroupsErrorGroupIdBody body, string errorGroupId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20051> localVarResponse = ErrorsUpdateStateWithHttpInfo(body, errorGroupId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update error group state
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The state of the error group</param>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20051</returns>
        public ApiResponse< InlineResponse20051 > ErrorsUpdateStateWithHttpInfo (ErrorGroupsErrorGroupIdBody body, string errorGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ErrorsApi->ErrorsUpdateState");
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsUpdateState");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsUpdateState");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsUpdateState");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsUpdateState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20051>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20051) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20051)));
        }

        /// <summary>
        ///  Update error group state
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The state of the error group</param>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20051</returns>
        public async System.Threading.Tasks.Task<InlineResponse20051> ErrorsUpdateStateAsync (ErrorGroupsErrorGroupIdBody body, string errorGroupId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20051> localVarResponse = await ErrorsUpdateStateAsyncWithHttpInfo(body, errorGroupId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update error group state
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The state of the error group</param>
        /// <param name="errorGroupId">The id of the error group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20051)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20051>> ErrorsUpdateStateAsyncWithHttpInfo (ErrorGroupsErrorGroupIdBody body, string errorGroupId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ErrorsApi->ErrorsUpdateState");
            // verify the required parameter 'errorGroupId' is set
            if (errorGroupId == null)
                throw new ApiException(400, "Missing required parameter 'errorGroupId' when calling ErrorsApi->ErrorsUpdateState");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ErrorsApi->ErrorsUpdateState");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ErrorsApi->ErrorsUpdateState");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorGroupId != null) localVarPathParams.Add("errorGroupId", this.Configuration.ApiClient.ParameterToString(errorGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorsUpdateState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20051>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20051) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20051)));
        }

    }
}
