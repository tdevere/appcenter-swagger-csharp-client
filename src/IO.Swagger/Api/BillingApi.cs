/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IBillingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 BillingAggregatedInformationGetAll (string service = null, string period = null, bool? showOriginalPlans = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> BillingAggregatedInformationGetAllWithHttpInfo (string service = null, string period = null, bool? showOriginalPlans = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Aggregated Billing Information for owner of a given app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 BillingAggregatedInformationGetByApp (string ownerName, string appName, string service = null, string period = null, bool? showOriginalPlans = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Aggregated Billing Information for owner of a given app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> BillingAggregatedInformationGetByAppWithHttpInfo (string ownerName, string appName, string service = null, string period = null, bool? showOriginalPlans = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Aggregated Billing Information for a given Organization.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The name of the Organization</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 BillingAggregatedInformationGetForOrg (string orgName, string service = null, string period = null, bool? showOriginalPlans = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Aggregated Billing Information for a given Organization.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The name of the Organization</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> BillingAggregatedInformationGetForOrgWithHttpInfo (string orgName, string service = null, string period = null, bool? showOriginalPlans = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> BillingAggregatedInformationGetAllAsync (string service = null, string period = null, bool? showOriginalPlans = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> BillingAggregatedInformationGetAllAsyncWithHttpInfo (string service = null, string period = null, bool? showOriginalPlans = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Aggregated Billing Information for owner of a given app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> BillingAggregatedInformationGetByAppAsync (string ownerName, string appName, string service = null, string period = null, bool? showOriginalPlans = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Aggregated Billing Information for owner of a given app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> BillingAggregatedInformationGetByAppAsyncWithHttpInfo (string ownerName, string appName, string service = null, string period = null, bool? showOriginalPlans = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Aggregated Billing Information for a given Organization.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The name of the Organization</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> BillingAggregatedInformationGetForOrgAsync (string orgName, string service = null, string period = null, bool? showOriginalPlans = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Aggregated Billing Information for a given Organization.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The name of the Organization</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> BillingAggregatedInformationGetForOrgAsyncWithHttpInfo (string orgName, string service = null, string period = null, bool? showOriginalPlans = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BillingApi : IBillingApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BillingApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingApi"/> class
        /// </summary>
        /// <returns></returns>
        public BillingApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BillingApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 BillingAggregatedInformationGetAll (string service = null, string period = null, bool? showOriginalPlans = null)
        {
             ApiResponse<InlineResponse20015> localVarResponse = BillingAggregatedInformationGetAllWithHttpInfo(service, period, showOriginalPlans);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > BillingAggregatedInformationGetAllWithHttpInfo (string service = null, string period = null, bool? showOriginalPlans = null)
        {

            var localVarPath = "/v0.1/billing/allAccountsAggregated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (service != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service", service)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter
            if (showOriginalPlans != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showOriginalPlans", showOriginalPlans)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingAggregatedInformationGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> BillingAggregatedInformationGetAllAsync (string service = null, string period = null, bool? showOriginalPlans = null)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await BillingAggregatedInformationGetAllAsyncWithHttpInfo(service, period, showOriginalPlans);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> BillingAggregatedInformationGetAllAsyncWithHttpInfo (string service = null, string period = null, bool? showOriginalPlans = null)
        {

            var localVarPath = "/v0.1/billing/allAccountsAggregated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (service != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service", service)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter
            if (showOriginalPlans != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showOriginalPlans", showOriginalPlans)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingAggregatedInformationGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Aggregated Billing Information for owner of a given app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 BillingAggregatedInformationGetByApp (string ownerName, string appName, string service = null, string period = null, bool? showOriginalPlans = null)
        {
             ApiResponse<InlineResponse20012> localVarResponse = BillingAggregatedInformationGetByAppWithHttpInfo(ownerName, appName, service, period, showOriginalPlans);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Aggregated Billing Information for owner of a given app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse< InlineResponse20012 > BillingAggregatedInformationGetByAppWithHttpInfo (string ownerName, string appName, string service = null, string period = null, bool? showOriginalPlans = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling BillingApi->BillingAggregatedInformationGetByApp");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling BillingApi->BillingAggregatedInformationGetByApp");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/billing/aggregated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (service != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service", service)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter
            if (showOriginalPlans != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showOriginalPlans", showOriginalPlans)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingAggregatedInformationGetByApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        ///  Aggregated Billing Information for owner of a given app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> BillingAggregatedInformationGetByAppAsync (string ownerName, string appName, string service = null, string period = null, bool? showOriginalPlans = null)
        {
             ApiResponse<InlineResponse20012> localVarResponse = await BillingAggregatedInformationGetByAppAsyncWithHttpInfo(ownerName, appName, service, period, showOriginalPlans);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Aggregated Billing Information for owner of a given app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> BillingAggregatedInformationGetByAppAsyncWithHttpInfo (string ownerName, string appName, string service = null, string period = null, bool? showOriginalPlans = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling BillingApi->BillingAggregatedInformationGetByApp");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling BillingApi->BillingAggregatedInformationGetByApp");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/billing/aggregated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (service != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service", service)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter
            if (showOriginalPlans != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showOriginalPlans", showOriginalPlans)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingAggregatedInformationGetByApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        ///  Aggregated Billing Information for a given Organization.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The name of the Organization</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 BillingAggregatedInformationGetForOrg (string orgName, string service = null, string period = null, bool? showOriginalPlans = null)
        {
             ApiResponse<InlineResponse20012> localVarResponse = BillingAggregatedInformationGetForOrgWithHttpInfo(orgName, service, period, showOriginalPlans);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Aggregated Billing Information for a given Organization.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The name of the Organization</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse< InlineResponse20012 > BillingAggregatedInformationGetForOrgWithHttpInfo (string orgName, string service = null, string period = null, bool? showOriginalPlans = null)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling BillingApi->BillingAggregatedInformationGetForOrg");

            var localVarPath = "/v0.1/orgs/{orgName}/billing/aggregated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("orgName", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (service != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service", service)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter
            if (showOriginalPlans != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showOriginalPlans", showOriginalPlans)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingAggregatedInformationGetForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        ///  Aggregated Billing Information for a given Organization.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The name of the Organization</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> BillingAggregatedInformationGetForOrgAsync (string orgName, string service = null, string period = null, bool? showOriginalPlans = null)
        {
             ApiResponse<InlineResponse20012> localVarResponse = await BillingAggregatedInformationGetForOrgAsyncWithHttpInfo(orgName, service, period, showOriginalPlans);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Aggregated Billing Information for a given Organization.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The name of the Organization</param>
        /// <param name="service">Type of service that should be included in the Billing Information (optional)</param>
        /// <param name="period">Type of period that should be included in the Billing Information (optional)</param>
        /// <param name="showOriginalPlans">Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> BillingAggregatedInformationGetForOrgAsyncWithHttpInfo (string orgName, string service = null, string period = null, bool? showOriginalPlans = null)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling BillingApi->BillingAggregatedInformationGetForOrg");

            var localVarPath = "/v0.1/orgs/{orgName}/billing/aggregated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("orgName", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (service != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service", service)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter
            if (showOriginalPlans != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showOriginalPlans", showOriginalPlans)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingAggregatedInformationGetForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

    }
}
