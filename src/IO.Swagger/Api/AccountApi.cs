/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the App Api Token object with the specific ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns></returns>
        void AppApiTokensDelete (string ownerName, string appName, string apiTokenId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the App Api Token object with the specific ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppApiTokensDeleteWithHttpInfo (string ownerName, string appName, string apiTokenId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns App API tokens for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20075&gt;</returns>
        List<InlineResponse20075> AppApiTokensList (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns App API tokens for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20075&gt;</returns>
        ApiResponse<List<InlineResponse20075>> AppApiTokensListWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new App API token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>Object</returns>
        Object AppApiTokensNew (string ownerName, string appName, AppNameApiTokensBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new App API token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AppApiTokensNewWithHttpInfo (string ownerName, string appName, AppNameApiTokensBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts a pending invitation for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns></returns>
        void AppInvitationsAccept (string invitationToken, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts a pending invitation for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppInvitationsAcceptWithHttpInfo (string invitationToken, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invites a new or existing user to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">The email of the user to invite (optional)</param>
        /// <returns></returns>
        void AppInvitationsCreate (string ownerName, string appName, AppNameInvitationsBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invites a new or existing user to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">The email of the user to invite (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppInvitationsCreateWithHttpInfo (string ownerName, string appName, AppNameInvitationsBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invites a new or existing user to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns></returns>
        void AppInvitationsCreateByEmail (string ownerName, string appName, string userEmail, InvitationsUserEmailBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invites a new or existing user to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppInvitationsCreateByEmailWithHttpInfo (string ownerName, string appName, string userEmail, InvitationsUserEmailBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user&#x27;s invitation to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns></returns>
        void AppInvitationsDelete (string ownerName, string appName, string userEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user&#x27;s invitation to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppInvitationsDeleteWithHttpInfo (string ownerName, string appName, string userEmail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the pending invitations for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object AppInvitationsList (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the pending invitations for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AppInvitationsListWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Rejects a pending invitation for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns></returns>
        void AppInvitationsReject (string invitationToken, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Rejects a pending invitation for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppInvitationsRejectWithHttpInfo (string invitationToken, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update pending invitation permission
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission in the invite.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns></returns>
        void AppInvitationsUpdatePermissions (InvitationsUserEmailBody1 body, string ownerName, string appName, string userEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update pending invitation permission
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission in the invite.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppInvitationsUpdatePermissionsWithHttpInfo (InvitationsUserEmailBody1 body, string ownerName, string appName, string userEmail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new app and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <returns>Object</returns>
        Object AppsCreate (V01AppsBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new app and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AppsCreateWithHttpInfo (V01AppsBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new app for the organization and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Object</returns>
        Object AppsCreateForOrg (OrgNameAppsBody body, string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new app for the organization and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AppsCreateForOrgWithHttpInfo (OrgNameAppsBody body, string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns></returns>
        void AppsDelete (string appName, string ownerName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppsDeleteWithHttpInfo (string appName, string ownerName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the uploaded app avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object AppsDeleteAvatar (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the uploaded app avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AppsDeleteAvatarWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a specific app with the given app name which belongs to the given owner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object AppsGet (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a specific app with the given app name which belongs to the given owner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AppsGetWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a user apps information from an organization by name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> AppsGetForOrgUser (string orgName, string userName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a user apps information from an organization by name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> AppsGetForOrgUserWithHttpInfo (string orgName, string userName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of all teams that have access to the app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> AppsGetTeams (string appName, string ownerName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of all teams that have access to the app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> AppsGetTeamsWithHttpInfo (string appName, string ownerName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of apps
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> AppsList (string orderBy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of apps
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> AppsListWithHttpInfo (string orderBy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of apps for the organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> AppsListForOrg (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of apps for the organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> AppsListForOrgWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the testers associated with the app specified with the given app name which belongs to the given owner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20019&gt;</returns>
        List<InlineResponse20019> AppsListTesters (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the testers associated with the app specified with the given app name which belongs to the given owner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20019&gt;</returns>
        ApiResponse<List<InlineResponse20019>> AppsListTestersWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes the user from the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to delete</param>
        /// <returns></returns>
        void AppsRemoveUser (string ownerName, string appName, string userEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes the user from the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppsRemoveUserWithHttpInfo (string ownerName, string appName, string userEmail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers ownership of an app to a different user or organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="destinationOwnerName">The name of the owner (user or organization) to which the app is being transferred</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Object</returns>
        Object AppsTransferOwnership (string ownerName, string appName, string destinationOwnerName, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers ownership of an app to a different user or organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="destinationOwnerName">The name of the owner (user or organization) to which the app is being transferred</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AppsTransferOwnershipWithHttpInfo (string ownerName, string appName, string destinationOwnerName, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers ownership of an app to a new organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Object</returns>
        Object AppsTransferToOrg (string ownerName, string appName, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers ownership of an app to a new organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AppsTransferToOrgWithHttpInfo (string ownerName, string appName, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partially updates a single app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="body">The partial data for the app (optional)</param>
        /// <returns>Object</returns>
        Object AppsUpdate (string appName, string ownerName, OwnerNameAppNameBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partially updates a single app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="body">The partial data for the app (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AppsUpdateWithHttpInfo (string appName, string ownerName, OwnerNameAppNameBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the app avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>Object</returns>
        Object AppsUpdateAvatar (string ownerName, string appName, byte[] avatar = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the app avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AppsUpdateAvatarWithHttpInfo (string ownerName, string appName, byte[] avatar = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user permission for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission for the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to patch</param>
        /// <returns></returns>
        void AppsUpdateUserPermissions (UsersUserEmailBody body, string ownerName, string appName, string userEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user permission for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission for the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppsUpdateUserPermissionsWithHttpInfo (UsersUserEmailBody body, string ownerName, string appName, string userEmail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the azure subscriptions for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureSubscriptionId">The unique ID (UUID) of the azure subscription</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void AzureSubscriptionDeleteForApp (Guid? azureSubscriptionId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the azure subscriptions for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureSubscriptionId">The unique ID (UUID) of the azure subscription</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AzureSubscriptionDeleteForAppWithHttpInfo (Guid? azureSubscriptionId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Link azure subscription to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The azure subscription data needed to be link to the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void AzureSubscriptionLinkForApp (AppNameAzureSubscriptionsBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Link azure subscription to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The azure subscription data needed to be link to the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AzureSubscriptionLinkForAppWithHttpInfo (AppNameAzureSubscriptionsBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of azure subscriptions for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20011&gt;</returns>
        List<InlineResponse20011> AzureSubscriptionListForApp (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of azure subscriptions for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20011&gt;</returns>
        ApiResponse<List<InlineResponse20011>> AzureSubscriptionListForAppWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of azure subscriptions for the organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse20011&gt;</returns>
        List<InlineResponse20011> AzureSubscriptionListForOrg (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of azure subscriptions for the organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20011&gt;</returns>
        ApiResponse<List<InlineResponse20011>> AzureSubscriptionListForOrgWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of azure subscriptions for the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20011&gt;</returns>
        List<InlineResponse20011> AzureSubscriptionListForUser ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of azure subscriptions for the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20011&gt;</returns>
        ApiResponse<List<InlineResponse20011>> AzureSubscriptionListForUserWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts all pending invitations to distribution groups for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns></returns>
        void DistributionGroupInvitationsAcceptAll (Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts all pending invitations to distribution groups for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DistributionGroupInvitationsAcceptAllWithHttpInfo (Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add apps to distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be added to the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        void DistributionGroupsAddApps (DistributionGroupNameAppsBody body, string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add apps to distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be added to the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DistributionGroupsAddAppsWithHttpInfo (DistributionGroupNameAppsBody body, string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds the members to the specified distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>List&lt;InlineResponse20010&gt;</returns>
        List<InlineResponse20010> DistributionGroupsAddUser (DistributionGroupNameMembersBody1 body, string ownerName, string appName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds the members to the specified distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20010&gt;</returns>
        ApiResponse<List<InlineResponse20010>> DistributionGroupsAddUserWithHttpInfo (DistributionGroupNameMembersBody1 body, string ownerName, string appName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts an array of user email addresses to get added to the specified group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">list of user email addresses that should get added as members to the specified group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>List&lt;InlineResponse20010&gt;</returns>
        List<InlineResponse20010> DistributionGroupsAddUsersForOrg (DistributionGroupNameMembersBody body, string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts an array of user email addresses to get added to the specified group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">list of user email addresses that should get added as members to the specified group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20010&gt;</returns>
        ApiResponse<List<InlineResponse20010>> DistributionGroupsAddUsersForOrgWithHttpInfo (DistributionGroupNameMembersBody body, string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete apps from distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        void DistributionGroupsBulkDeleteApps (AppsBulkDeleteBody body, string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete apps from distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DistributionGroupsBulkDeleteAppsWithHttpInfo (AppsBulkDeleteBody body, string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete testers from distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        void DistributionGroupsBulkDeleteUsers (MembersBulkDeleteBody body, string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete testers from distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DistributionGroupsBulkDeleteUsersWithHttpInfo (MembersBulkDeleteBody body, string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new distribution group and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object DistributionGroupsCreate (AppNameDistributionGroupsBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new distribution group and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DistributionGroupsCreateWithHttpInfo (AppNameDistributionGroupsBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a disribution goup which can be shared across apps under an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Object</returns>
        Object DistributionGroupsCreateForOrg (OrgNameDistributionGroupsBody body, string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a disribution goup which can be shared across apps under an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DistributionGroupsCreateForOrgWithHttpInfo (OrgNameDistributionGroupsBody body, string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        void DistributionGroupsDelete (string appName, string ownerName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DistributionGroupsDeleteWithHttpInfo (string appName, string ownerName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single distribution group from an org with a given distribution group name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        void DistributionGroupsDeleteForOrg (string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single distribution group from an org with a given distribution group name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DistributionGroupsDeleteForOrgWithHttpInfo (string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of distribution groups with details for an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="appsLimit">The max number of apps to include in the response (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> DistributionGroupsDetailsForOrg (string orgName, decimal? appsLimit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of distribution groups with details for an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="appsLimit">The max number of apps to include in the response (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> DistributionGroupsDetailsForOrgWithHttpInfo (string orgName, decimal? appsLimit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single distribution group for a given distribution group name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Object</returns>
        Object DistributionGroupsGet (string ownerName, string appName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single distribution group for a given distribution group name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DistributionGroupsGetWithHttpInfo (string ownerName, string appName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get apps from a distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> DistributionGroupsGetApps (string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get apps from a distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> DistributionGroupsGetAppsWithHttpInfo (string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single distribution group in org for a given distribution group name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Object</returns>
        Object DistributionGroupsGetForOrg (string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single distribution group in org for a given distribution group name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DistributionGroupsGetForOrgWithHttpInfo (string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of distribution groups in the app specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse201&gt;</returns>
        List<InlineResponse201> DistributionGroupsList (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of distribution groups in the app specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse201&gt;</returns>
        ApiResponse<List<InlineResponse201>> DistributionGroupsListWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a unique list of users including the whole organization members plus testers in any shared group of that org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse2006&gt;</returns>
        List<InlineResponse2006> DistributionGroupsListAllTestersForOrg (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a unique list of users including the whole organization members plus testers in any shared group of that org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2006&gt;</returns>
        ApiResponse<List<InlineResponse2006>> DistributionGroupsListAllTestersForOrgWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of distribution groups in the org specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse201&gt;</returns>
        List<InlineResponse201> DistributionGroupsListForOrg (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of distribution groups in the org specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse201&gt;</returns>
        ApiResponse<List<InlineResponse201>> DistributionGroupsListForOrgWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of member details in the distribution group specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="excludePendingInvitations">Whether to exclude pending invitations in the response (optional)</param>
        /// <returns>List&lt;InlineResponse2009&gt;</returns>
        List<InlineResponse2009> DistributionGroupsListUsers (string ownerName, string appName, string distributionGroupName, bool? excludePendingInvitations = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of member details in the distribution group specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="excludePendingInvitations">Whether to exclude pending invitations in the response (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2009&gt;</returns>
        ApiResponse<List<InlineResponse2009>> DistributionGroupsListUsersWithHttpInfo (string ownerName, string appName, string distributionGroupName, bool? excludePendingInvitations = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of member in the distribution group specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>List&lt;InlineResponse2009&gt;</returns>
        List<InlineResponse2009> DistributionGroupsListUsersForOrg (string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of member in the distribution group specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2009&gt;</returns>
        ApiResponse<List<InlineResponse2009>> DistributionGroupsListUsersForOrgWithHttpInfo (string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update one given distribution group name in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="body">The attributes to update for the distribution group (optional)</param>
        /// <returns>Object</returns>
        Object DistributionGroupsPatchForOrg (string orgName, string distributionGroupName, DistributionGroupsDistributionGroupNameBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update one given distribution group name in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="body">The attributes to update for the distribution group (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DistributionGroupsPatchForOrgWithHttpInfo (string orgName, string distributionGroupName, DistributionGroupsDistributionGroupNameBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove the users from the distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>List&lt;InlineResponse20060&gt;</returns>
        List<InlineResponse20060> DistributionGroupsRemoveUser (MembersBulkDeleteBody1 body, string ownerName, string appName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove the users from the distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20060&gt;</returns>
        ApiResponse<List<InlineResponse20060>> DistributionGroupsRemoveUserWithHttpInfo (MembersBulkDeleteBody1 body, string ownerName, string appName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resend distribution group app invite notification to previously invited testers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        void DistributionGroupsResendInvite (DistributionGroupNameResendInviteBody1 body, string ownerName, string appName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resend distribution group app invite notification to previously invited testers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DistributionGroupsResendInviteWithHttpInfo (DistributionGroupNameResendInviteBody1 body, string ownerName, string appName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resend shared distribution group invite notification to previously invited testers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        void DistributionGroupsResendSharedInvite (DistributionGroupNameResendInviteBody body, string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resend shared distribution group invite notification to previously invited testers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DistributionGroupsResendSharedInviteWithHttpInfo (DistributionGroupNameResendInviteBody body, string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the attributes of distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Object</returns>
        Object DistributionGroupsUpdate (DistributionGroupsDistributionGroupNameBody1 body, string ownerName, string appName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the attributes of distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DistributionGroupsUpdateWithHttpInfo (DistributionGroupsDistributionGroupNameBody1 body, string ownerName, string appName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all invitations sent by the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20014&gt;</returns>
        List<InlineResponse20014> InvitationsSent ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all invitations sent by the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20014&gt;</returns>
        ApiResponse<List<InlineResponse20014>> InvitationsSentWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user&#x27;s invitation to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns></returns>
        void OrgInvitations (string orgName, string email, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user&#x27;s invitation to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrgInvitationsWithHttpInfo (string orgName, string email, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts a pending organization invitation for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns></returns>
        void OrgInvitationsAccept (string invitationToken, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts a pending organization invitation for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrgInvitationsAcceptWithHttpInfo (string invitationToken, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invites a new or existing user to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to invite</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns></returns>
        void OrgInvitationsCreate (OrgNameInvitationsBody body, string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invites a new or existing user to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to invite</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrgInvitationsCreateWithHttpInfo (OrgNameInvitationsBody body, string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user&#x27;s invitation to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user whose invitation should be removed</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns></returns>
        void OrgInvitationsDelete (OrgNameInvitationsBody1 body, string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user&#x27;s invitation to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user whose invitation should be removed</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrgInvitationsDeleteWithHttpInfo (OrgNameInvitationsBody1 body, string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the pending invitations for the organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse2008&gt;</returns>
        List<InlineResponse2008> OrgInvitationsListPending (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the pending invitations for the organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2008&gt;</returns>
        ApiResponse<List<InlineResponse2008>> OrgInvitationsListPendingWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Rejects a pending organization invitation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns></returns>
        void OrgInvitationsReject (string invitationToken, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Rejects a pending organization invitation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrgInvitationsRejectWithHttpInfo (string invitationToken, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels an existing organization invitation for the user and sends a new one
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns></returns>
        void OrgInvitationsSendNewInvitation (string orgName, string email, EmailResendBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels an existing organization invitation for the user and sends a new one
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrgInvitationsSendNewInvitationWithHttpInfo (string orgName, string email, EmailResendBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the role of an invited user to be changed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new role of the user</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <returns></returns>
        void OrgInvitationsUpdate (InvitationsEmailBody body, string orgName, string email);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the role of an invited user to be changed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new role of the user</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrgInvitationsUpdateWithHttpInfo (InvitationsEmailBody body, string orgName, string email);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the uploaded organization avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Object</returns>
        Object OrganizationDeleteAvatar (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the uploaded organization avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OrganizationDeleteAvatarWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the organization avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>Object</returns>
        Object OrganizationUpdateAvatar (string orgName, byte[] avatar = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the organization avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OrganizationUpdateAvatarWithHttpInfo (string orgName, byte[] avatar = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new organization and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The organization data</param>
        /// <returns>Object</returns>
        Object OrganizationsCreateOrUpdate (V01OrgsBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new organization and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The organization data</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OrganizationsCreateOrUpdateWithHttpInfo (V01OrgsBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns></returns>
        void OrganizationsDelete (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrganizationsDeleteWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of a single organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Object</returns>
        Object OrganizationsGet (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of a single organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OrganizationsGetWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of organizations the requesting user has access to
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20013&gt;</returns>
        List<InlineResponse20013> OrganizationsList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of organizations the requesting user has access to
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20013&gt;</returns>
        ApiResponse<List<InlineResponse20013>> OrganizationsListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list organizations in which the requesting user is an admin
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20097</returns>
        InlineResponse20097 OrganizationsListAdministered ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list organizations in which the requesting user is an admin
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20097</returns>
        ApiResponse<InlineResponse20097> OrganizationsListAdministeredWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of organizations the requesting user has access to
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the org</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Object</returns>
        Object OrganizationsUpdate (OrgsOrgNameBody body, string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of organizations the requesting user has access to
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the org</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OrganizationsUpdateWithHttpInfo (OrgsOrgNameBody body, string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all service connections of the service type for GDPR export.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse2001&gt;</returns>
        List<InlineResponse2001> SharedconnectionConnections ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all service connections of the service type for GDPR export.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse2001&gt;</returns>
        ApiResponse<List<InlineResponse2001>> SharedconnectionConnectionsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds an app to a team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the app to be added to the team. The app has to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Object</returns>
        Object TeamsAddApp (TeamNameAppsBody body, string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds an app to a team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the app to be added to the team. The app has to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TeamsAddAppWithHttpInfo (TeamNameAppsBody body, string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds a new user to a team that is owned by an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to add to the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Object</returns>
        Object TeamsAddUser (TeamNameUsersBody body, string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds a new user to a team that is owned by an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to add to the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TeamsAddUserWithHttpInfo (TeamNameUsersBody body, string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a team and returns it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to create the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse2007&gt;</returns>
        List<InlineResponse2007> TeamsCreateTeam (OrgNameTeamsBody body, string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a team and returns it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to create the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2007&gt;</returns>
        ApiResponse<List<InlineResponse2007>> TeamsCreateTeamWithHttpInfo (OrgNameTeamsBody body, string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns></returns>
        void TeamsDelete (string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamsDeleteWithHttpInfo (string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of a single team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Object</returns>
        Object TeamsGetTeam (string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of a single team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TeamsGetTeamWithHttpInfo (string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the users of a team which is owned by an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Object</returns>
        Object TeamsGetUsers (string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the users of a team which is owned by an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TeamsGetUsersWithHttpInfo (string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the list of all teams in this org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse2007&gt;</returns>
        List<InlineResponse2007> TeamsListAll (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the list of all teams in this org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2007&gt;</returns>
        ApiResponse<List<InlineResponse2007>> TeamsListAllWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the apps a team has access to
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> TeamsListApps (string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the apps a team has access to
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> TeamsListAppsWithHttpInfo (string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes an app from a team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void TeamsRemoveApp (string orgName, string teamName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes an app from a team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamsRemoveAppWithHttpInfo (string orgName, string teamName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user from a team that is owned by an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns></returns>
        void TeamsRemoveUser (string orgName, string teamName, string userName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user from a team that is owned by an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamsRemoveUserWithHttpInfo (string orgName, string teamName, string userName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a single team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to update the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Object</returns>
        Object TeamsUpdate (TeamsTeamNameBody body, string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a single team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to update the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TeamsUpdateWithHttpInfo (TeamsTeamNameBody body, string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the permissions the team has to the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object TeamsUpdatePermissions (AppsAppNameBody body, string orgName, string teamName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the permissions the team has to the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TeamsUpdatePermissionsWithHttpInfo (AppsAppNameBody body, string orgName, string teamName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the user api_token object with the specific id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns></returns>
        void UserApiTokensDelete (string apiTokenId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the user api_token object with the specific id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserApiTokensDeleteWithHttpInfo (string apiTokenId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns api tokens for the authenticated user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20075&gt;</returns>
        List<InlineResponse20075> UserApiTokensList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns api tokens for the authenticated user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20075&gt;</returns>
        ApiResponse<List<InlineResponse20075>> UserApiTokensListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new User API token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>Object</returns>
        Object UserApiTokensNew (V01ApiTokensBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new User API token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UserApiTokensNewWithHttpInfo (V01ApiTokensBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the user profile data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object UsersGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the user profile data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UsersGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Object</returns>
        Object UsersGetForOrg (string orgName, string userName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UsersGetForOrgWithHttpInfo (string orgName, string userName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object UsersGetUserMetadata ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UsersGetUserMetadataWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the users associated with the app specified with the given app name which belongs to the given owner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20019&gt;</returns>
        List<InlineResponse20019> UsersList (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the users associated with the app specified with the given app name which belongs to the given owner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20019&gt;</returns>
        ApiResponse<List<InlineResponse20019>> UsersListWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of users that belong to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse2005&gt;</returns>
        List<InlineResponse2005> UsersListForOrg (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of users that belong to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2005&gt;</returns>
        ApiResponse<List<InlineResponse2005>> UsersListForOrgWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user from an organization.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns></returns>
        void UsersRemoveFromOrg (string orgName, string userName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user from an organization.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersRemoveFromOrgWithHttpInfo (string orgName, string userName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the user profile and returns the updated user data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the created user</param>
        /// <returns>Object</returns>
        Object UsersUpdate (V01UserBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the user profile and returns the updated user data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the created user</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UsersUpdateWithHttpInfo (V01UserBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the given organization user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Object</returns>
        Object UsersUpdateOrgRole (UsersUserNameBody body, string orgName, string userName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the given organization user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UsersUpdateOrgRoleWithHttpInfo (UsersUserNameBody body, string orgName, string userName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the App Api Token object with the specific ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppApiTokensDeleteAsync (string ownerName, string appName, string apiTokenId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the App Api Token object with the specific ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppApiTokensDeleteAsyncWithHttpInfo (string ownerName, string appName, string apiTokenId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns App API tokens for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20075&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20075>> AppApiTokensListAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns App API tokens for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20075&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20075>>> AppApiTokensListAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new App API token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AppApiTokensNewAsync (string ownerName, string appName, AppNameApiTokensBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new App API token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppApiTokensNewAsyncWithHttpInfo (string ownerName, string appName, AppNameApiTokensBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts a pending invitation for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppInvitationsAcceptAsync (string invitationToken, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts a pending invitation for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsAcceptAsyncWithHttpInfo (string invitationToken, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invites a new or existing user to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">The email of the user to invite (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppInvitationsCreateAsync (string ownerName, string appName, AppNameInvitationsBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invites a new or existing user to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">The email of the user to invite (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsCreateAsyncWithHttpInfo (string ownerName, string appName, AppNameInvitationsBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invites a new or existing user to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppInvitationsCreateByEmailAsync (string ownerName, string appName, string userEmail, InvitationsUserEmailBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invites a new or existing user to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsCreateByEmailAsyncWithHttpInfo (string ownerName, string appName, string userEmail, InvitationsUserEmailBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user&#x27;s invitation to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppInvitationsDeleteAsync (string ownerName, string appName, string userEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user&#x27;s invitation to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsDeleteAsyncWithHttpInfo (string ownerName, string appName, string userEmail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the pending invitations for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AppInvitationsListAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the pending invitations for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsListAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Rejects a pending invitation for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppInvitationsRejectAsync (string invitationToken, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Rejects a pending invitation for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsRejectAsyncWithHttpInfo (string invitationToken, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update pending invitation permission
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission in the invite.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppInvitationsUpdatePermissionsAsync (InvitationsUserEmailBody1 body, string ownerName, string appName, string userEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update pending invitation permission
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission in the invite.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsUpdatePermissionsAsyncWithHttpInfo (InvitationsUserEmailBody1 body, string ownerName, string appName, string userEmail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new app and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AppsCreateAsync (V01AppsBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new app and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppsCreateAsyncWithHttpInfo (V01AppsBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new app for the organization and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AppsCreateForOrgAsync (OrgNameAppsBody body, string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new app for the organization and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppsCreateForOrgAsyncWithHttpInfo (OrgNameAppsBody body, string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppsDeleteAsync (string appName, string ownerName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppsDeleteAsyncWithHttpInfo (string appName, string ownerName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the uploaded app avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AppsDeleteAvatarAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the uploaded app avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppsDeleteAvatarAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a specific app with the given app name which belongs to the given owner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AppsGetAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a specific app with the given app name which belongs to the given owner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppsGetAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a user apps information from an organization by name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> AppsGetForOrgUserAsync (string orgName, string userName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a user apps information from an organization by name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> AppsGetForOrgUserAsyncWithHttpInfo (string orgName, string userName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of all teams that have access to the app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> AppsGetTeamsAsync (string appName, string ownerName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of all teams that have access to the app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> AppsGetTeamsAsyncWithHttpInfo (string appName, string ownerName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of apps
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> AppsListAsync (string orderBy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of apps
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> AppsListAsyncWithHttpInfo (string orderBy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of apps for the organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> AppsListForOrgAsync (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of apps for the organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> AppsListForOrgAsyncWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the testers associated with the app specified with the given app name which belongs to the given owner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20019&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20019>> AppsListTestersAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the testers associated with the app specified with the given app name which belongs to the given owner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20019&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20019>>> AppsListTestersAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes the user from the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppsRemoveUserAsync (string ownerName, string appName, string userEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes the user from the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppsRemoveUserAsyncWithHttpInfo (string ownerName, string appName, string userEmail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers ownership of an app to a different user or organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="destinationOwnerName">The name of the owner (user or organization) to which the app is being transferred</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AppsTransferOwnershipAsync (string ownerName, string appName, string destinationOwnerName, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers ownership of an app to a different user or organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="destinationOwnerName">The name of the owner (user or organization) to which the app is being transferred</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppsTransferOwnershipAsyncWithHttpInfo (string ownerName, string appName, string destinationOwnerName, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers ownership of an app to a new organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AppsTransferToOrgAsync (string ownerName, string appName, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers ownership of an app to a new organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppsTransferToOrgAsyncWithHttpInfo (string ownerName, string appName, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partially updates a single app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="body">The partial data for the app (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AppsUpdateAsync (string appName, string ownerName, OwnerNameAppNameBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partially updates a single app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="body">The partial data for the app (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppsUpdateAsyncWithHttpInfo (string appName, string ownerName, OwnerNameAppNameBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the app avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AppsUpdateAvatarAsync (string ownerName, string appName, byte[] avatar = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the app avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppsUpdateAvatarAsyncWithHttpInfo (string ownerName, string appName, byte[] avatar = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user permission for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission for the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to patch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppsUpdateUserPermissionsAsync (UsersUserEmailBody body, string ownerName, string appName, string userEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user permission for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission for the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to patch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppsUpdateUserPermissionsAsyncWithHttpInfo (UsersUserEmailBody body, string ownerName, string appName, string userEmail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the azure subscriptions for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureSubscriptionId">The unique ID (UUID) of the azure subscription</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AzureSubscriptionDeleteForAppAsync (Guid? azureSubscriptionId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the azure subscriptions for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureSubscriptionId">The unique ID (UUID) of the azure subscription</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AzureSubscriptionDeleteForAppAsyncWithHttpInfo (Guid? azureSubscriptionId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Link azure subscription to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The azure subscription data needed to be link to the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AzureSubscriptionLinkForAppAsync (AppNameAzureSubscriptionsBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Link azure subscription to an app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The azure subscription data needed to be link to the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AzureSubscriptionLinkForAppAsyncWithHttpInfo (AppNameAzureSubscriptionsBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of azure subscriptions for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20011&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20011>> AzureSubscriptionListForAppAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of azure subscriptions for the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20011&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20011>>> AzureSubscriptionListForAppAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of azure subscriptions for the organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse20011&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20011>> AzureSubscriptionListForOrgAsync (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of azure subscriptions for the organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20011&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20011>>> AzureSubscriptionListForOrgAsyncWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of azure subscriptions for the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20011&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20011>> AzureSubscriptionListForUserAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of azure subscriptions for the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20011&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20011>>> AzureSubscriptionListForUserAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts all pending invitations to distribution groups for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DistributionGroupInvitationsAcceptAllAsync (Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts all pending invitations to distribution groups for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupInvitationsAcceptAllAsyncWithHttpInfo (Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add apps to distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be added to the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DistributionGroupsAddAppsAsync (DistributionGroupNameAppsBody body, string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add apps to distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be added to the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsAddAppsAsyncWithHttpInfo (DistributionGroupNameAppsBody body, string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds the members to the specified distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of List&lt;InlineResponse20010&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20010>> DistributionGroupsAddUserAsync (DistributionGroupNameMembersBody1 body, string ownerName, string appName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds the members to the specified distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20010&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20010>>> DistributionGroupsAddUserAsyncWithHttpInfo (DistributionGroupNameMembersBody1 body, string ownerName, string appName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts an array of user email addresses to get added to the specified group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">list of user email addresses that should get added as members to the specified group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of List&lt;InlineResponse20010&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20010>> DistributionGroupsAddUsersForOrgAsync (DistributionGroupNameMembersBody body, string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts an array of user email addresses to get added to the specified group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">list of user email addresses that should get added as members to the specified group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20010&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20010>>> DistributionGroupsAddUsersForOrgAsyncWithHttpInfo (DistributionGroupNameMembersBody body, string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete apps from distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DistributionGroupsBulkDeleteAppsAsync (AppsBulkDeleteBody body, string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete apps from distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsBulkDeleteAppsAsyncWithHttpInfo (AppsBulkDeleteBody body, string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete testers from distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DistributionGroupsBulkDeleteUsersAsync (MembersBulkDeleteBody body, string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete testers from distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsBulkDeleteUsersAsyncWithHttpInfo (MembersBulkDeleteBody body, string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new distribution group and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DistributionGroupsCreateAsync (AppNameDistributionGroupsBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new distribution group and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsCreateAsyncWithHttpInfo (AppNameDistributionGroupsBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a disribution goup which can be shared across apps under an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DistributionGroupsCreateForOrgAsync (OrgNameDistributionGroupsBody body, string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a disribution goup which can be shared across apps under an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsCreateForOrgAsyncWithHttpInfo (OrgNameDistributionGroupsBody body, string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DistributionGroupsDeleteAsync (string appName, string ownerName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsDeleteAsyncWithHttpInfo (string appName, string ownerName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single distribution group from an org with a given distribution group name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DistributionGroupsDeleteForOrgAsync (string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single distribution group from an org with a given distribution group name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsDeleteForOrgAsyncWithHttpInfo (string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of distribution groups with details for an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="appsLimit">The max number of apps to include in the response (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> DistributionGroupsDetailsForOrgAsync (string orgName, decimal? appsLimit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of distribution groups with details for an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="appsLimit">The max number of apps to include in the response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> DistributionGroupsDetailsForOrgAsyncWithHttpInfo (string orgName, decimal? appsLimit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single distribution group for a given distribution group name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DistributionGroupsGetAsync (string ownerName, string appName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single distribution group for a given distribution group name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsGetAsyncWithHttpInfo (string ownerName, string appName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get apps from a distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> DistributionGroupsGetAppsAsync (string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get apps from a distribution group in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> DistributionGroupsGetAppsAsyncWithHttpInfo (string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single distribution group in org for a given distribution group name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DistributionGroupsGetForOrgAsync (string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single distribution group in org for a given distribution group name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsGetForOrgAsyncWithHttpInfo (string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of distribution groups in the app specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse201&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse201>> DistributionGroupsListAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of distribution groups in the app specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse201&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse201>>> DistributionGroupsListAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a unique list of users including the whole organization members plus testers in any shared group of that org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse2006&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2006>> DistributionGroupsListAllTestersForOrgAsync (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a unique list of users including the whole organization members plus testers in any shared group of that org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2006&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2006>>> DistributionGroupsListAllTestersForOrgAsyncWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of distribution groups in the org specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse201&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse201>> DistributionGroupsListForOrgAsync (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of distribution groups in the org specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse201&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse201>>> DistributionGroupsListForOrgAsyncWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of member details in the distribution group specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="excludePendingInvitations">Whether to exclude pending invitations in the response (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2009&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2009>> DistributionGroupsListUsersAsync (string ownerName, string appName, string distributionGroupName, bool? excludePendingInvitations = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of member details in the distribution group specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="excludePendingInvitations">Whether to exclude pending invitations in the response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2009&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2009>>> DistributionGroupsListUsersAsyncWithHttpInfo (string ownerName, string appName, string distributionGroupName, bool? excludePendingInvitations = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of member in the distribution group specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of List&lt;InlineResponse2009&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2009>> DistributionGroupsListUsersForOrgAsync (string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of member in the distribution group specified
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2009&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2009>>> DistributionGroupsListUsersForOrgAsyncWithHttpInfo (string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update one given distribution group name in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="body">The attributes to update for the distribution group (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DistributionGroupsPatchForOrgAsync (string orgName, string distributionGroupName, DistributionGroupsDistributionGroupNameBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update one given distribution group name in an org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="body">The attributes to update for the distribution group (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsPatchForOrgAsyncWithHttpInfo (string orgName, string distributionGroupName, DistributionGroupsDistributionGroupNameBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove the users from the distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of List&lt;InlineResponse20060&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20060>> DistributionGroupsRemoveUserAsync (MembersBulkDeleteBody1 body, string ownerName, string appName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove the users from the distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20060&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20060>>> DistributionGroupsRemoveUserAsyncWithHttpInfo (MembersBulkDeleteBody1 body, string ownerName, string appName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resend distribution group app invite notification to previously invited testers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DistributionGroupsResendInviteAsync (DistributionGroupNameResendInviteBody1 body, string ownerName, string appName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resend distribution group app invite notification to previously invited testers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsResendInviteAsyncWithHttpInfo (DistributionGroupNameResendInviteBody1 body, string ownerName, string appName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resend shared distribution group invite notification to previously invited testers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DistributionGroupsResendSharedInviteAsync (DistributionGroupNameResendInviteBody body, string orgName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resend shared distribution group invite notification to previously invited testers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsResendSharedInviteAsyncWithHttpInfo (DistributionGroupNameResendInviteBody body, string orgName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the attributes of distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DistributionGroupsUpdateAsync (DistributionGroupsDistributionGroupNameBody1 body, string ownerName, string appName, string distributionGroupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the attributes of distribution group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsUpdateAsyncWithHttpInfo (DistributionGroupsDistributionGroupNameBody1 body, string ownerName, string appName, string distributionGroupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all invitations sent by the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20014&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20014>> InvitationsSentAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all invitations sent by the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20014&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20014>>> InvitationsSentAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user&#x27;s invitation to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrgInvitationsAsync (string orgName, string email, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user&#x27;s invitation to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsAsyncWithHttpInfo (string orgName, string email, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts a pending organization invitation for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrgInvitationsAcceptAsync (string invitationToken, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts a pending organization invitation for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsAcceptAsyncWithHttpInfo (string invitationToken, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invites a new or existing user to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to invite</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrgInvitationsCreateAsync (OrgNameInvitationsBody body, string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invites a new or existing user to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to invite</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsCreateAsyncWithHttpInfo (OrgNameInvitationsBody body, string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user&#x27;s invitation to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user whose invitation should be removed</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrgInvitationsDeleteAsync (OrgNameInvitationsBody1 body, string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user&#x27;s invitation to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user whose invitation should be removed</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsDeleteAsyncWithHttpInfo (OrgNameInvitationsBody1 body, string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the pending invitations for the organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse2008&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2008>> OrgInvitationsListPendingAsync (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the pending invitations for the organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2008&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2008>>> OrgInvitationsListPendingAsyncWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Rejects a pending organization invitation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrgInvitationsRejectAsync (string invitationToken, Object body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Rejects a pending organization invitation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsRejectAsyncWithHttpInfo (string invitationToken, Object body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels an existing organization invitation for the user and sends a new one
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrgInvitationsSendNewInvitationAsync (string orgName, string email, EmailResendBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels an existing organization invitation for the user and sends a new one
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsSendNewInvitationAsyncWithHttpInfo (string orgName, string email, EmailResendBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the role of an invited user to be changed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new role of the user</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrgInvitationsUpdateAsync (InvitationsEmailBody body, string orgName, string email);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the role of an invited user to be changed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new role of the user</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsUpdateAsyncWithHttpInfo (InvitationsEmailBody body, string orgName, string email);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the uploaded organization avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OrganizationDeleteAvatarAsync (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the uploaded organization avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationDeleteAvatarAsyncWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the organization avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OrganizationUpdateAvatarAsync (string orgName, byte[] avatar = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the organization avatar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationUpdateAvatarAsyncWithHttpInfo (string orgName, byte[] avatar = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new organization and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The organization data</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OrganizationsCreateOrUpdateAsync (V01OrgsBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new organization and returns it to the caller
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The organization data</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationsCreateOrUpdateAsyncWithHttpInfo (V01OrgsBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrganizationsDeleteAsync (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationsDeleteAsyncWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of a single organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OrganizationsGetAsync (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of a single organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationsGetAsyncWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of organizations the requesting user has access to
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20013&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20013>> OrganizationsListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of organizations the requesting user has access to
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20013&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20013>>> OrganizationsListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list organizations in which the requesting user is an admin
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20097</returns>
        System.Threading.Tasks.Task<InlineResponse20097> OrganizationsListAdministeredAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list organizations in which the requesting user is an admin
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20097)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20097>> OrganizationsListAdministeredAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of organizations the requesting user has access to
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the org</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OrganizationsUpdateAsync (OrgsOrgNameBody body, string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of organizations the requesting user has access to
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the org</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationsUpdateAsyncWithHttpInfo (OrgsOrgNameBody body, string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all service connections of the service type for GDPR export.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse2001&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2001>> SharedconnectionConnectionsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all service connections of the service type for GDPR export.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2001&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2001>>> SharedconnectionConnectionsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds an app to a team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the app to be added to the team. The app has to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TeamsAddAppAsync (TeamNameAppsBody body, string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds an app to a team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the app to be added to the team. The app has to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamsAddAppAsyncWithHttpInfo (TeamNameAppsBody body, string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds a new user to a team that is owned by an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to add to the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TeamsAddUserAsync (TeamNameUsersBody body, string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds a new user to a team that is owned by an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to add to the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamsAddUserAsyncWithHttpInfo (TeamNameUsersBody body, string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a team and returns it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to create the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse2007&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2007>> TeamsCreateTeamAsync (OrgNameTeamsBody body, string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a team and returns it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to create the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2007&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2007>>> TeamsCreateTeamAsyncWithHttpInfo (OrgNameTeamsBody body, string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamsDeleteAsync (string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a single team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamsDeleteAsyncWithHttpInfo (string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of a single team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TeamsGetTeamAsync (string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of a single team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamsGetTeamAsyncWithHttpInfo (string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the users of a team which is owned by an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TeamsGetUsersAsync (string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the users of a team which is owned by an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamsGetUsersAsyncWithHttpInfo (string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the list of all teams in this org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse2007&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2007>> TeamsListAllAsync (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the list of all teams in this org
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2007&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2007>>> TeamsListAllAsyncWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the apps a team has access to
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> TeamsListAppsAsync (string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the apps a team has access to
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> TeamsListAppsAsyncWithHttpInfo (string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes an app from a team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamsRemoveAppAsync (string orgName, string teamName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes an app from a team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamsRemoveAppAsyncWithHttpInfo (string orgName, string teamName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user from a team that is owned by an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamsRemoveUserAsync (string orgName, string teamName, string userName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user from a team that is owned by an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamsRemoveUserAsyncWithHttpInfo (string orgName, string teamName, string userName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a single team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to update the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TeamsUpdateAsync (TeamsTeamNameBody body, string orgName, string teamName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a single team
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to update the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamsUpdateAsyncWithHttpInfo (TeamsTeamNameBody body, string orgName, string teamName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the permissions the team has to the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TeamsUpdatePermissionsAsync (AppsAppNameBody body, string orgName, string teamName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the permissions the team has to the app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamsUpdatePermissionsAsyncWithHttpInfo (AppsAppNameBody body, string orgName, string teamName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the user api_token object with the specific id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserApiTokensDeleteAsync (string apiTokenId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the user api_token object with the specific id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserApiTokensDeleteAsyncWithHttpInfo (string apiTokenId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns api tokens for the authenticated user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20075&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20075>> UserApiTokensListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns api tokens for the authenticated user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20075&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20075>>> UserApiTokensListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new User API token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UserApiTokensNewAsync (V01ApiTokensBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new User API token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserApiTokensNewAsyncWithHttpInfo (V01ApiTokensBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the user profile data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UsersGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the user profile data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UsersGetForOrgAsync (string orgName, string userName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersGetForOrgAsyncWithHttpInfo (string orgName, string userName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UsersGetUserMetadataAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersGetUserMetadataAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the users associated with the app specified with the given app name which belongs to the given owner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20019&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20019>> UsersListAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the users associated with the app specified with the given app name which belongs to the given owner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20019&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20019>>> UsersListAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of users that belong to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse2005&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2005>> UsersListForOrgAsync (string orgName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of users that belong to an organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2005&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2005>>> UsersListForOrgAsyncWithHttpInfo (string orgName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user from an organization.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersRemoveFromOrgAsync (string orgName, string userName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a user from an organization.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersRemoveFromOrgAsyncWithHttpInfo (string orgName, string userName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the user profile and returns the updated user data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the created user</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UsersUpdateAsync (V01UserBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the user profile and returns the updated user data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the created user</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersUpdateAsyncWithHttpInfo (V01UserBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the given organization user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UsersUpdateOrgRoleAsync (UsersUserNameBody body, string orgName, string userName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the given organization user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersUpdateOrgRoleAsyncWithHttpInfo (UsersUserNameBody body, string orgName, string userName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AccountApi : IAccountApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// </summary>
        /// <returns></returns>
        public AccountApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Delete the App Api Token object with the specific ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns></returns>
        public void AppApiTokensDelete (string ownerName, string appName, string apiTokenId)
        {
             AppApiTokensDeleteWithHttpInfo(ownerName, appName, apiTokenId);
        }

        /// <summary>
        ///  Delete the App Api Token object with the specific ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppApiTokensDeleteWithHttpInfo (string ownerName, string appName, string apiTokenId)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppApiTokensDelete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppApiTokensDelete");
            // verify the required parameter 'apiTokenId' is set
            if (apiTokenId == null)
                throw new ApiException(400, "Missing required parameter 'apiTokenId' when calling AccountApi->AppApiTokensDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/api_tokens/{api_token_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (apiTokenId != null) localVarPathParams.Add("api_token_id", this.Configuration.ApiClient.ParameterToString(apiTokenId)); // path parameter
            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppApiTokensDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete the App Api Token object with the specific ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppApiTokensDeleteAsync (string ownerName, string appName, string apiTokenId)
        {
             await AppApiTokensDeleteAsyncWithHttpInfo(ownerName, appName, apiTokenId);

        }

        /// <summary>
        ///  Delete the App Api Token object with the specific ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppApiTokensDeleteAsyncWithHttpInfo (string ownerName, string appName, string apiTokenId)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppApiTokensDelete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppApiTokensDelete");
            // verify the required parameter 'apiTokenId' is set
            if (apiTokenId == null)
                throw new ApiException(400, "Missing required parameter 'apiTokenId' when calling AccountApi->AppApiTokensDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/api_tokens/{api_token_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (apiTokenId != null) localVarPathParams.Add("api_token_id", this.Configuration.ApiClient.ParameterToString(apiTokenId)); // path parameter
            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppApiTokensDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns App API tokens for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20075&gt;</returns>
        public List<InlineResponse20075> AppApiTokensList (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20075>> localVarResponse = AppApiTokensListWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns App API tokens for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20075&gt;</returns>
        public ApiResponse< List<InlineResponse20075> > AppApiTokensListWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppApiTokensList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppApiTokensList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppApiTokensList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20075>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20075>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20075>)));
        }

        /// <summary>
        ///  Returns App API tokens for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20075&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20075>> AppApiTokensListAsync (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20075>> localVarResponse = await AppApiTokensListAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns App API tokens for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20075&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20075>>> AppApiTokensListAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppApiTokensList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppApiTokensList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppApiTokensList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20075>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20075>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20075>)));
        }

        /// <summary>
        ///  Creates a new App API token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>Object</returns>
        public Object AppApiTokensNew (string ownerName, string appName, AppNameApiTokensBody body = null)
        {
             ApiResponse<Object> localVarResponse = AppApiTokensNewWithHttpInfo(ownerName, appName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new App API token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AppApiTokensNewWithHttpInfo (string ownerName, string appName, AppNameApiTokensBody body = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppApiTokensNew");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppApiTokensNew");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppApiTokensNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates a new App API token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AppApiTokensNewAsync (string ownerName, string appName, AppNameApiTokensBody body = null)
        {
             ApiResponse<Object> localVarResponse = await AppApiTokensNewAsyncWithHttpInfo(ownerName, appName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new App API token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppApiTokensNewAsyncWithHttpInfo (string ownerName, string appName, AppNameApiTokensBody body = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppApiTokensNew");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppApiTokensNew");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppApiTokensNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Accepts a pending invitation for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns></returns>
        public void AppInvitationsAccept (string invitationToken, Object body = null)
        {
             AppInvitationsAcceptWithHttpInfo(invitationToken, body);
        }

        /// <summary>
        ///  Accepts a pending invitation for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppInvitationsAcceptWithHttpInfo (string invitationToken, Object body = null)
        {
            // verify the required parameter 'invitationToken' is set
            if (invitationToken == null)
                throw new ApiException(400, "Missing required parameter 'invitationToken' when calling AccountApi->AppInvitationsAccept");

            var localVarPath = "/v0.1/user/invitations/apps/{invitation_token}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationToken != null) localVarPathParams.Add("invitation_token", this.Configuration.ApiClient.ParameterToString(invitationToken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsAccept", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Accepts a pending invitation for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppInvitationsAcceptAsync (string invitationToken, Object body = null)
        {
             await AppInvitationsAcceptAsyncWithHttpInfo(invitationToken, body);

        }

        /// <summary>
        ///  Accepts a pending invitation for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsAcceptAsyncWithHttpInfo (string invitationToken, Object body = null)
        {
            // verify the required parameter 'invitationToken' is set
            if (invitationToken == null)
                throw new ApiException(400, "Missing required parameter 'invitationToken' when calling AccountApi->AppInvitationsAccept");

            var localVarPath = "/v0.1/user/invitations/apps/{invitation_token}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationToken != null) localVarPathParams.Add("invitation_token", this.Configuration.ApiClient.ParameterToString(invitationToken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsAccept", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Invites a new or existing user to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">The email of the user to invite (optional)</param>
        /// <returns></returns>
        public void AppInvitationsCreate (string ownerName, string appName, AppNameInvitationsBody body = null)
        {
             AppInvitationsCreateWithHttpInfo(ownerName, appName, body);
        }

        /// <summary>
        ///  Invites a new or existing user to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">The email of the user to invite (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppInvitationsCreateWithHttpInfo (string ownerName, string appName, AppNameInvitationsBody body = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppInvitationsCreate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppInvitationsCreate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Invites a new or existing user to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">The email of the user to invite (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppInvitationsCreateAsync (string ownerName, string appName, AppNameInvitationsBody body = null)
        {
             await AppInvitationsCreateAsyncWithHttpInfo(ownerName, appName, body);

        }

        /// <summary>
        ///  Invites a new or existing user to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">The email of the user to invite (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsCreateAsyncWithHttpInfo (string ownerName, string appName, AppNameInvitationsBody body = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppInvitationsCreate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppInvitationsCreate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Invites a new or existing user to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns></returns>
        public void AppInvitationsCreateByEmail (string ownerName, string appName, string userEmail, InvitationsUserEmailBody body = null)
        {
             AppInvitationsCreateByEmailWithHttpInfo(ownerName, appName, userEmail, body);
        }

        /// <summary>
        ///  Invites a new or existing user to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppInvitationsCreateByEmailWithHttpInfo (string ownerName, string appName, string userEmail, InvitationsUserEmailBody body = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppInvitationsCreateByEmail");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppInvitationsCreateByEmail");
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling AccountApi->AppInvitationsCreateByEmail");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (userEmail != null) localVarPathParams.Add("user_email", this.Configuration.ApiClient.ParameterToString(userEmail)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsCreateByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Invites a new or existing user to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppInvitationsCreateByEmailAsync (string ownerName, string appName, string userEmail, InvitationsUserEmailBody body = null)
        {
             await AppInvitationsCreateByEmailAsyncWithHttpInfo(ownerName, appName, userEmail, body);

        }

        /// <summary>
        ///  Invites a new or existing user to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsCreateByEmailAsyncWithHttpInfo (string ownerName, string appName, string userEmail, InvitationsUserEmailBody body = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppInvitationsCreateByEmail");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppInvitationsCreateByEmail");
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling AccountApi->AppInvitationsCreateByEmail");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (userEmail != null) localVarPathParams.Add("user_email", this.Configuration.ApiClient.ParameterToString(userEmail)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsCreateByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a user&#x27;s invitation to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns></returns>
        public void AppInvitationsDelete (string ownerName, string appName, string userEmail)
        {
             AppInvitationsDeleteWithHttpInfo(ownerName, appName, userEmail);
        }

        /// <summary>
        ///  Removes a user&#x27;s invitation to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppInvitationsDeleteWithHttpInfo (string ownerName, string appName, string userEmail)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppInvitationsDelete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppInvitationsDelete");
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling AccountApi->AppInvitationsDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (userEmail != null) localVarPathParams.Add("user_email", this.Configuration.ApiClient.ParameterToString(userEmail)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a user&#x27;s invitation to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppInvitationsDeleteAsync (string ownerName, string appName, string userEmail)
        {
             await AppInvitationsDeleteAsyncWithHttpInfo(ownerName, appName, userEmail);

        }

        /// <summary>
        ///  Removes a user&#x27;s invitation to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsDeleteAsyncWithHttpInfo (string ownerName, string appName, string userEmail)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppInvitationsDelete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppInvitationsDelete");
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling AccountApi->AppInvitationsDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (userEmail != null) localVarPathParams.Add("user_email", this.Configuration.ApiClient.ParameterToString(userEmail)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Gets the pending invitations for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object AppInvitationsList (string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = AppInvitationsListWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the pending invitations for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AppInvitationsListWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppInvitationsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppInvitationsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Gets the pending invitations for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AppInvitationsListAsync (string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await AppInvitationsListAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the pending invitations for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsListAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppInvitationsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppInvitationsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Rejects a pending invitation for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns></returns>
        public void AppInvitationsReject (string invitationToken, Object body = null)
        {
             AppInvitationsRejectWithHttpInfo(invitationToken, body);
        }

        /// <summary>
        ///  Rejects a pending invitation for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppInvitationsRejectWithHttpInfo (string invitationToken, Object body = null)
        {
            // verify the required parameter 'invitationToken' is set
            if (invitationToken == null)
                throw new ApiException(400, "Missing required parameter 'invitationToken' when calling AccountApi->AppInvitationsReject");

            var localVarPath = "/v0.1/user/invitations/apps/{invitation_token}/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationToken != null) localVarPathParams.Add("invitation_token", this.Configuration.ApiClient.ParameterToString(invitationToken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsReject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Rejects a pending invitation for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppInvitationsRejectAsync (string invitationToken, Object body = null)
        {
             await AppInvitationsRejectAsyncWithHttpInfo(invitationToken, body);

        }

        /// <summary>
        ///  Rejects a pending invitation for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsRejectAsyncWithHttpInfo (string invitationToken, Object body = null)
        {
            // verify the required parameter 'invitationToken' is set
            if (invitationToken == null)
                throw new ApiException(400, "Missing required parameter 'invitationToken' when calling AccountApi->AppInvitationsReject");

            var localVarPath = "/v0.1/user/invitations/apps/{invitation_token}/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationToken != null) localVarPathParams.Add("invitation_token", this.Configuration.ApiClient.ParameterToString(invitationToken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsReject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Update pending invitation permission
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission in the invite.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns></returns>
        public void AppInvitationsUpdatePermissions (InvitationsUserEmailBody1 body, string ownerName, string appName, string userEmail)
        {
             AppInvitationsUpdatePermissionsWithHttpInfo(body, ownerName, appName, userEmail);
        }

        /// <summary>
        ///  Update pending invitation permission
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission in the invite.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppInvitationsUpdatePermissionsWithHttpInfo (InvitationsUserEmailBody1 body, string ownerName, string appName, string userEmail)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->AppInvitationsUpdatePermissions");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppInvitationsUpdatePermissions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppInvitationsUpdatePermissions");
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling AccountApi->AppInvitationsUpdatePermissions");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (userEmail != null) localVarPathParams.Add("user_email", this.Configuration.ApiClient.ParameterToString(userEmail)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsUpdatePermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Update pending invitation permission
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission in the invite.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppInvitationsUpdatePermissionsAsync (InvitationsUserEmailBody1 body, string ownerName, string appName, string userEmail)
        {
             await AppInvitationsUpdatePermissionsAsyncWithHttpInfo(body, ownerName, appName, userEmail);

        }

        /// <summary>
        ///  Update pending invitation permission
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission in the invite.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The email of the user to invite</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppInvitationsUpdatePermissionsAsyncWithHttpInfo (InvitationsUserEmailBody1 body, string ownerName, string appName, string userEmail)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->AppInvitationsUpdatePermissions");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppInvitationsUpdatePermissions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppInvitationsUpdatePermissions");
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling AccountApi->AppInvitationsUpdatePermissions");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (userEmail != null) localVarPathParams.Add("user_email", this.Configuration.ApiClient.ParameterToString(userEmail)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppInvitationsUpdatePermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Creates a new app and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <returns>Object</returns>
        public Object AppsCreate (V01AppsBody body)
        {
             ApiResponse<Object> localVarResponse = AppsCreateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new app and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AppsCreateWithHttpInfo (V01AppsBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->AppsCreate");

            var localVarPath = "/v0.1/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates a new app and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AppsCreateAsync (V01AppsBody body)
        {
             ApiResponse<Object> localVarResponse = await AppsCreateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new app and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppsCreateAsyncWithHttpInfo (V01AppsBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->AppsCreate");

            var localVarPath = "/v0.1/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates a new app for the organization and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Object</returns>
        public Object AppsCreateForOrg (OrgNameAppsBody body, string orgName)
        {
             ApiResponse<Object> localVarResponse = AppsCreateForOrgWithHttpInfo(body, orgName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new app for the organization and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AppsCreateForOrgWithHttpInfo (OrgNameAppsBody body, string orgName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->AppsCreateForOrg");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->AppsCreateForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsCreateForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates a new app for the organization and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AppsCreateForOrgAsync (OrgNameAppsBody body, string orgName)
        {
             ApiResponse<Object> localVarResponse = await AppsCreateForOrgAsyncWithHttpInfo(body, orgName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new app for the organization and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the app</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppsCreateForOrgAsyncWithHttpInfo (OrgNameAppsBody body, string orgName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->AppsCreateForOrg");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->AppsCreateForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsCreateForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Delete an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns></returns>
        public void AppsDelete (string appName, string ownerName)
        {
             AppsDeleteWithHttpInfo(appName, ownerName);
        }

        /// <summary>
        ///  Delete an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppsDeleteWithHttpInfo (string appName, string ownerName)
        {
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsDelete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppsDeleteAsync (string appName, string ownerName)
        {
             await AppsDeleteAsyncWithHttpInfo(appName, ownerName);

        }

        /// <summary>
        ///  Delete an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppsDeleteAsyncWithHttpInfo (string appName, string ownerName)
        {
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsDelete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes the uploaded app avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object AppsDeleteAvatar (string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = AppsDeleteAvatarWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes the uploaded app avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AppsDeleteAvatarWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsDeleteAvatar");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsDeleteAvatar");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsDeleteAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Deletes the uploaded app avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AppsDeleteAvatarAsync (string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await AppsDeleteAvatarAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Deletes the uploaded app avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppsDeleteAvatarAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsDeleteAvatar");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsDeleteAvatar");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsDeleteAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Return a specific app with the given app name which belongs to the given owner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object AppsGet (string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = AppsGetWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return a specific app with the given app name which belongs to the given owner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AppsGetWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Return a specific app with the given app name which belongs to the given owner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AppsGetAsync (string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await AppsGetAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return a specific app with the given app name which belongs to the given owner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppsGetAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get a user apps information from an organization by name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> AppsGetForOrgUser (string orgName, string userName)
        {
             ApiResponse<List<Object>> localVarResponse = AppsGetForOrgUserWithHttpInfo(orgName, userName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a user apps information from an organization by name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > AppsGetForOrgUserWithHttpInfo (string orgName, string userName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->AppsGetForOrgUser");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling AccountApi->AppsGetForOrgUser");

            var localVarPath = "/v0.1/orgs/{org_name}/users/{user_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (userName != null) localVarPathParams.Add("user_name", this.Configuration.ApiClient.ParameterToString(userName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsGetForOrgUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Get a user apps information from an organization by name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> AppsGetForOrgUserAsync (string orgName, string userName)
        {
             ApiResponse<List<Object>> localVarResponse = await AppsGetForOrgUserAsyncWithHttpInfo(orgName, userName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a user apps information from an organization by name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> AppsGetForOrgUserAsyncWithHttpInfo (string orgName, string userName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->AppsGetForOrgUser");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling AccountApi->AppsGetForOrgUser");

            var localVarPath = "/v0.1/orgs/{org_name}/users/{user_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (userName != null) localVarPathParams.Add("user_name", this.Configuration.ApiClient.ParameterToString(userName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsGetForOrgUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Returns the details of all teams that have access to the app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> AppsGetTeams (string appName, string ownerName)
        {
             ApiResponse<List<Object>> localVarResponse = AppsGetTeamsWithHttpInfo(appName, ownerName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the details of all teams that have access to the app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > AppsGetTeamsWithHttpInfo (string appName, string ownerName)
        {
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsGetTeams");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsGetTeams");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsGetTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Returns the details of all teams that have access to the app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> AppsGetTeamsAsync (string appName, string ownerName)
        {
             ApiResponse<List<Object>> localVarResponse = await AppsGetTeamsAsyncWithHttpInfo(appName, ownerName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the details of all teams that have access to the app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> AppsGetTeamsAsyncWithHttpInfo (string appName, string ownerName)
        {
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsGetTeams");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsGetTeams");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsGetTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Returns a list of apps
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> AppsList (string orderBy = null)
        {
             ApiResponse<List<Object>> localVarResponse = AppsListWithHttpInfo(orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of apps
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > AppsListWithHttpInfo (string orderBy = null)
        {

            var localVarPath = "/v0.1/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Returns a list of apps
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> AppsListAsync (string orderBy = null)
        {
             ApiResponse<List<Object>> localVarResponse = await AppsListAsyncWithHttpInfo(orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of apps
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> AppsListAsyncWithHttpInfo (string orderBy = null)
        {

            var localVarPath = "/v0.1/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Returns a list of apps for the organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> AppsListForOrg (string orgName)
        {
             ApiResponse<List<Object>> localVarResponse = AppsListForOrgWithHttpInfo(orgName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of apps for the organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > AppsListForOrgWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->AppsListForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsListForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Returns a list of apps for the organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> AppsListForOrgAsync (string orgName)
        {
             ApiResponse<List<Object>> localVarResponse = await AppsListForOrgAsyncWithHttpInfo(orgName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of apps for the organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> AppsListForOrgAsyncWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->AppsListForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsListForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Returns the testers associated with the app specified with the given app name which belongs to the given owner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20019&gt;</returns>
        public List<InlineResponse20019> AppsListTesters (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20019>> localVarResponse = AppsListTestersWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the testers associated with the app specified with the given app name which belongs to the given owner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20019&gt;</returns>
        public ApiResponse< List<InlineResponse20019> > AppsListTestersWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsListTesters");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsListTesters");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/testers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsListTesters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20019>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20019>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20019>)));
        }

        /// <summary>
        ///  Returns the testers associated with the app specified with the given app name which belongs to the given owner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20019&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20019>> AppsListTestersAsync (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20019>> localVarResponse = await AppsListTestersAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the testers associated with the app specified with the given app name which belongs to the given owner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20019&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20019>>> AppsListTestersAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsListTesters");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsListTesters");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/testers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsListTesters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20019>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20019>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20019>)));
        }

        /// <summary>
        ///  Removes the user from the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to delete</param>
        /// <returns></returns>
        public void AppsRemoveUser (string ownerName, string appName, string userEmail)
        {
             AppsRemoveUserWithHttpInfo(ownerName, appName, userEmail);
        }

        /// <summary>
        ///  Removes the user from the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppsRemoveUserWithHttpInfo (string ownerName, string appName, string userEmail)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsRemoveUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsRemoveUser");
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling AccountApi->AppsRemoveUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/users/{user_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (userEmail != null) localVarPathParams.Add("user_email", this.Configuration.ApiClient.ParameterToString(userEmail)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsRemoveUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes the user from the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppsRemoveUserAsync (string ownerName, string appName, string userEmail)
        {
             await AppsRemoveUserAsyncWithHttpInfo(ownerName, appName, userEmail);

        }

        /// <summary>
        ///  Removes the user from the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppsRemoveUserAsyncWithHttpInfo (string ownerName, string appName, string userEmail)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsRemoveUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsRemoveUser");
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling AccountApi->AppsRemoveUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/users/{user_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (userEmail != null) localVarPathParams.Add("user_email", this.Configuration.ApiClient.ParameterToString(userEmail)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsRemoveUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Transfers ownership of an app to a different user or organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="destinationOwnerName">The name of the owner (user or organization) to which the app is being transferred</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Object</returns>
        public Object AppsTransferOwnership (string ownerName, string appName, string destinationOwnerName, Object body = null)
        {
             ApiResponse<Object> localVarResponse = AppsTransferOwnershipWithHttpInfo(ownerName, appName, destinationOwnerName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Transfers ownership of an app to a different user or organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="destinationOwnerName">The name of the owner (user or organization) to which the app is being transferred</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AppsTransferOwnershipWithHttpInfo (string ownerName, string appName, string destinationOwnerName, Object body = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsTransferOwnership");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsTransferOwnership");
            // verify the required parameter 'destinationOwnerName' is set
            if (destinationOwnerName == null)
                throw new ApiException(400, "Missing required parameter 'destinationOwnerName' when calling AccountApi->AppsTransferOwnership");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (destinationOwnerName != null) localVarPathParams.Add("destination_owner_name", this.Configuration.ApiClient.ParameterToString(destinationOwnerName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsTransferOwnership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Transfers ownership of an app to a different user or organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="destinationOwnerName">The name of the owner (user or organization) to which the app is being transferred</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AppsTransferOwnershipAsync (string ownerName, string appName, string destinationOwnerName, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await AppsTransferOwnershipAsyncWithHttpInfo(ownerName, appName, destinationOwnerName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Transfers ownership of an app to a different user or organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="destinationOwnerName">The name of the owner (user or organization) to which the app is being transferred</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppsTransferOwnershipAsyncWithHttpInfo (string ownerName, string appName, string destinationOwnerName, Object body = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsTransferOwnership");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsTransferOwnership");
            // verify the required parameter 'destinationOwnerName' is set
            if (destinationOwnerName == null)
                throw new ApiException(400, "Missing required parameter 'destinationOwnerName' when calling AccountApi->AppsTransferOwnership");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (destinationOwnerName != null) localVarPathParams.Add("destination_owner_name", this.Configuration.ApiClient.ParameterToString(destinationOwnerName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsTransferOwnership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Transfers ownership of an app to a new organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Object</returns>
        public Object AppsTransferToOrg (string ownerName, string appName, Object body = null)
        {
             ApiResponse<Object> localVarResponse = AppsTransferToOrgWithHttpInfo(ownerName, appName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Transfers ownership of an app to a new organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AppsTransferToOrgWithHttpInfo (string ownerName, string appName, Object body = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsTransferToOrg");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsTransferToOrg");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/transfer_to_org";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsTransferToOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Transfers ownership of an app to a new organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AppsTransferToOrgAsync (string ownerName, string appName, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await AppsTransferToOrgAsyncWithHttpInfo(ownerName, appName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Transfers ownership of an app to a new organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppsTransferToOrgAsyncWithHttpInfo (string ownerName, string appName, Object body = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsTransferToOrg");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsTransferToOrg");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/transfer_to_org";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsTransferToOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Partially updates a single app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="body">The partial data for the app (optional)</param>
        /// <returns>Object</returns>
        public Object AppsUpdate (string appName, string ownerName, OwnerNameAppNameBody body = null)
        {
             ApiResponse<Object> localVarResponse = AppsUpdateWithHttpInfo(appName, ownerName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Partially updates a single app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="body">The partial data for the app (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AppsUpdateWithHttpInfo (string appName, string ownerName, OwnerNameAppNameBody body = null)
        {
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsUpdate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsUpdate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Partially updates a single app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="body">The partial data for the app (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AppsUpdateAsync (string appName, string ownerName, OwnerNameAppNameBody body = null)
        {
             ApiResponse<Object> localVarResponse = await AppsUpdateAsyncWithHttpInfo(appName, ownerName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Partially updates a single app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="body">The partial data for the app (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppsUpdateAsyncWithHttpInfo (string appName, string ownerName, OwnerNameAppNameBody body = null)
        {
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsUpdate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsUpdate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Sets the app avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>Object</returns>
        public Object AppsUpdateAvatar (string ownerName, string appName, byte[] avatar = null)
        {
             ApiResponse<Object> localVarResponse = AppsUpdateAvatarWithHttpInfo(ownerName, appName, avatar);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Sets the app avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AppsUpdateAvatarWithHttpInfo (string ownerName, string appName, byte[] avatar = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsUpdateAvatar");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsUpdateAvatar");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (avatar != null) localVarFileParams.Add("avatar", this.Configuration.ApiClient.ParameterToFile("avatar", avatar));
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsUpdateAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Sets the app avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AppsUpdateAvatarAsync (string ownerName, string appName, byte[] avatar = null)
        {
             ApiResponse<Object> localVarResponse = await AppsUpdateAvatarAsyncWithHttpInfo(ownerName, appName, avatar);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Sets the app avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppsUpdateAvatarAsyncWithHttpInfo (string ownerName, string appName, byte[] avatar = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsUpdateAvatar");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsUpdateAvatar");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (avatar != null) localVarFileParams.Add("avatar", this.Configuration.ApiClient.ParameterToFile("avatar", avatar));
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsUpdateAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Update user permission for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission for the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to patch</param>
        /// <returns></returns>
        public void AppsUpdateUserPermissions (UsersUserEmailBody body, string ownerName, string appName, string userEmail)
        {
             AppsUpdateUserPermissionsWithHttpInfo(body, ownerName, appName, userEmail);
        }

        /// <summary>
        ///  Update user permission for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission for the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppsUpdateUserPermissionsWithHttpInfo (UsersUserEmailBody body, string ownerName, string appName, string userEmail)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->AppsUpdateUserPermissions");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsUpdateUserPermissions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsUpdateUserPermissions");
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling AccountApi->AppsUpdateUserPermissions");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/users/{user_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (userEmail != null) localVarPathParams.Add("user_email", this.Configuration.ApiClient.ParameterToString(userEmail)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsUpdateUserPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Update user permission for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission for the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to patch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppsUpdateUserPermissionsAsync (UsersUserEmailBody body, string ownerName, string appName, string userEmail)
        {
             await AppsUpdateUserPermissionsAsyncWithHttpInfo(body, ownerName, appName, userEmail);

        }

        /// <summary>
        ///  Update user permission for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The value to update the user permission for the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="userEmail">The user email of the user to patch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppsUpdateUserPermissionsAsyncWithHttpInfo (UsersUserEmailBody body, string ownerName, string appName, string userEmail)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->AppsUpdateUserPermissions");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AppsUpdateUserPermissions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AppsUpdateUserPermissions");
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling AccountApi->AppsUpdateUserPermissions");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/users/{user_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (userEmail != null) localVarPathParams.Add("user_email", this.Configuration.ApiClient.ParameterToString(userEmail)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsUpdateUserPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete the azure subscriptions for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureSubscriptionId">The unique ID (UUID) of the azure subscription</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void AzureSubscriptionDeleteForApp (Guid? azureSubscriptionId, string ownerName, string appName)
        {
             AzureSubscriptionDeleteForAppWithHttpInfo(azureSubscriptionId, ownerName, appName);
        }

        /// <summary>
        ///  Delete the azure subscriptions for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureSubscriptionId">The unique ID (UUID) of the azure subscription</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AzureSubscriptionDeleteForAppWithHttpInfo (Guid? azureSubscriptionId, string ownerName, string appName)
        {
            // verify the required parameter 'azureSubscriptionId' is set
            if (azureSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'azureSubscriptionId' when calling AccountApi->AzureSubscriptionDeleteForApp");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AzureSubscriptionDeleteForApp");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AzureSubscriptionDeleteForApp");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (azureSubscriptionId != null) localVarPathParams.Add("azure_subscription_id", this.Configuration.ApiClient.ParameterToString(azureSubscriptionId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AzureSubscriptionDeleteForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete the azure subscriptions for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureSubscriptionId">The unique ID (UUID) of the azure subscription</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AzureSubscriptionDeleteForAppAsync (Guid? azureSubscriptionId, string ownerName, string appName)
        {
             await AzureSubscriptionDeleteForAppAsyncWithHttpInfo(azureSubscriptionId, ownerName, appName);

        }

        /// <summary>
        ///  Delete the azure subscriptions for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureSubscriptionId">The unique ID (UUID) of the azure subscription</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AzureSubscriptionDeleteForAppAsyncWithHttpInfo (Guid? azureSubscriptionId, string ownerName, string appName)
        {
            // verify the required parameter 'azureSubscriptionId' is set
            if (azureSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'azureSubscriptionId' when calling AccountApi->AzureSubscriptionDeleteForApp");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AzureSubscriptionDeleteForApp");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AzureSubscriptionDeleteForApp");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (azureSubscriptionId != null) localVarPathParams.Add("azure_subscription_id", this.Configuration.ApiClient.ParameterToString(azureSubscriptionId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AzureSubscriptionDeleteForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Link azure subscription to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The azure subscription data needed to be link to the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void AzureSubscriptionLinkForApp (AppNameAzureSubscriptionsBody body, string ownerName, string appName)
        {
             AzureSubscriptionLinkForAppWithHttpInfo(body, ownerName, appName);
        }

        /// <summary>
        ///  Link azure subscription to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The azure subscription data needed to be link to the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AzureSubscriptionLinkForAppWithHttpInfo (AppNameAzureSubscriptionsBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->AzureSubscriptionLinkForApp");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AzureSubscriptionLinkForApp");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AzureSubscriptionLinkForApp");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AzureSubscriptionLinkForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Link azure subscription to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The azure subscription data needed to be link to the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AzureSubscriptionLinkForAppAsync (AppNameAzureSubscriptionsBody body, string ownerName, string appName)
        {
             await AzureSubscriptionLinkForAppAsyncWithHttpInfo(body, ownerName, appName);

        }

        /// <summary>
        ///  Link azure subscription to an app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The azure subscription data needed to be link to the app.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AzureSubscriptionLinkForAppAsyncWithHttpInfo (AppNameAzureSubscriptionsBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->AzureSubscriptionLinkForApp");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AzureSubscriptionLinkForApp");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AzureSubscriptionLinkForApp");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AzureSubscriptionLinkForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of azure subscriptions for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20011&gt;</returns>
        public List<InlineResponse20011> AzureSubscriptionListForApp (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20011>> localVarResponse = AzureSubscriptionListForAppWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of azure subscriptions for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20011&gt;</returns>
        public ApiResponse< List<InlineResponse20011> > AzureSubscriptionListForAppWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AzureSubscriptionListForApp");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AzureSubscriptionListForApp");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AzureSubscriptionListForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20011>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20011>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20011>)));
        }

        /// <summary>
        ///  Returns a list of azure subscriptions for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20011&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20011>> AzureSubscriptionListForAppAsync (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20011>> localVarResponse = await AzureSubscriptionListForAppAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of azure subscriptions for the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20011&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20011>>> AzureSubscriptionListForAppAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->AzureSubscriptionListForApp");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->AzureSubscriptionListForApp");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AzureSubscriptionListForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20011>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20011>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20011>)));
        }

        /// <summary>
        ///  Returns a list of azure subscriptions for the organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse20011&gt;</returns>
        public List<InlineResponse20011> AzureSubscriptionListForOrg (string orgName)
        {
             ApiResponse<List<InlineResponse20011>> localVarResponse = AzureSubscriptionListForOrgWithHttpInfo(orgName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of azure subscriptions for the organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20011&gt;</returns>
        public ApiResponse< List<InlineResponse20011> > AzureSubscriptionListForOrgWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->AzureSubscriptionListForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/azure_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AzureSubscriptionListForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20011>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20011>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20011>)));
        }

        /// <summary>
        ///  Returns a list of azure subscriptions for the organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse20011&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20011>> AzureSubscriptionListForOrgAsync (string orgName)
        {
             ApiResponse<List<InlineResponse20011>> localVarResponse = await AzureSubscriptionListForOrgAsyncWithHttpInfo(orgName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of azure subscriptions for the organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20011&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20011>>> AzureSubscriptionListForOrgAsyncWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->AzureSubscriptionListForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/azure_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AzureSubscriptionListForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20011>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20011>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20011>)));
        }

        /// <summary>
        ///  Returns a list of azure subscriptions for the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20011&gt;</returns>
        public List<InlineResponse20011> AzureSubscriptionListForUser ()
        {
             ApiResponse<List<InlineResponse20011>> localVarResponse = AzureSubscriptionListForUserWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of azure subscriptions for the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20011&gt;</returns>
        public ApiResponse< List<InlineResponse20011> > AzureSubscriptionListForUserWithHttpInfo ()
        {

            var localVarPath = "/v0.1/azure_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AzureSubscriptionListForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20011>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20011>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20011>)));
        }

        /// <summary>
        ///  Returns a list of azure subscriptions for the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20011&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20011>> AzureSubscriptionListForUserAsync ()
        {
             ApiResponse<List<InlineResponse20011>> localVarResponse = await AzureSubscriptionListForUserAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of azure subscriptions for the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20011&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20011>>> AzureSubscriptionListForUserAsyncWithHttpInfo ()
        {

            var localVarPath = "/v0.1/azure_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AzureSubscriptionListForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20011>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20011>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20011>)));
        }

        /// <summary>
        ///  Accepts all pending invitations to distribution groups for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns></returns>
        public void DistributionGroupInvitationsAcceptAll (Object body = null)
        {
             DistributionGroupInvitationsAcceptAllWithHttpInfo(body);
        }

        /// <summary>
        ///  Accepts all pending invitations to distribution groups for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DistributionGroupInvitationsAcceptAllWithHttpInfo (Object body = null)
        {

            var localVarPath = "/v0.1/user/invitations/distribution_groups/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupInvitationsAcceptAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Accepts all pending invitations to distribution groups for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DistributionGroupInvitationsAcceptAllAsync (Object body = null)
        {
             await DistributionGroupInvitationsAcceptAllAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  Accepts all pending invitations to distribution groups for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupInvitationsAcceptAllAsyncWithHttpInfo (Object body = null)
        {

            var localVarPath = "/v0.1/user/invitations/distribution_groups/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupInvitationsAcceptAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Add apps to distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be added to the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        public void DistributionGroupsAddApps (DistributionGroupNameAppsBody body, string orgName, string distributionGroupName)
        {
             DistributionGroupsAddAppsWithHttpInfo(body, orgName, distributionGroupName);
        }

        /// <summary>
        ///  Add apps to distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be added to the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DistributionGroupsAddAppsWithHttpInfo (DistributionGroupNameAppsBody body, string orgName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsAddApps");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsAddApps");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsAddApps");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsAddApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Add apps to distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be added to the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DistributionGroupsAddAppsAsync (DistributionGroupNameAppsBody body, string orgName, string distributionGroupName)
        {
             await DistributionGroupsAddAppsAsyncWithHttpInfo(body, orgName, distributionGroupName);

        }

        /// <summary>
        ///  Add apps to distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be added to the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsAddAppsAsyncWithHttpInfo (DistributionGroupNameAppsBody body, string orgName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsAddApps");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsAddApps");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsAddApps");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsAddApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Adds the members to the specified distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>List&lt;InlineResponse20010&gt;</returns>
        public List<InlineResponse20010> DistributionGroupsAddUser (DistributionGroupNameMembersBody1 body, string ownerName, string appName, string distributionGroupName)
        {
             ApiResponse<List<InlineResponse20010>> localVarResponse = DistributionGroupsAddUserWithHttpInfo(body, ownerName, appName, distributionGroupName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Adds the members to the specified distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20010&gt;</returns>
        public ApiResponse< List<InlineResponse20010> > DistributionGroupsAddUserWithHttpInfo (DistributionGroupNameMembersBody1 body, string ownerName, string appName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsAddUser");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsAddUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsAddUser");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsAddUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsAddUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20010>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20010>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20010>)));
        }

        /// <summary>
        ///  Adds the members to the specified distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of List&lt;InlineResponse20010&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20010>> DistributionGroupsAddUserAsync (DistributionGroupNameMembersBody1 body, string ownerName, string appName, string distributionGroupName)
        {
             ApiResponse<List<InlineResponse20010>> localVarResponse = await DistributionGroupsAddUserAsyncWithHttpInfo(body, ownerName, appName, distributionGroupName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Adds the members to the specified distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20010&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20010>>> DistributionGroupsAddUserAsyncWithHttpInfo (DistributionGroupNameMembersBody1 body, string ownerName, string appName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsAddUser");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsAddUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsAddUser");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsAddUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsAddUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20010>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20010>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20010>)));
        }

        /// <summary>
        ///  Accepts an array of user email addresses to get added to the specified group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">list of user email addresses that should get added as members to the specified group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>List&lt;InlineResponse20010&gt;</returns>
        public List<InlineResponse20010> DistributionGroupsAddUsersForOrg (DistributionGroupNameMembersBody body, string orgName, string distributionGroupName)
        {
             ApiResponse<List<InlineResponse20010>> localVarResponse = DistributionGroupsAddUsersForOrgWithHttpInfo(body, orgName, distributionGroupName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Accepts an array of user email addresses to get added to the specified group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">list of user email addresses that should get added as members to the specified group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20010&gt;</returns>
        public ApiResponse< List<InlineResponse20010> > DistributionGroupsAddUsersForOrgWithHttpInfo (DistributionGroupNameMembersBody body, string orgName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsAddUsersForOrg");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsAddUsersForOrg");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsAddUsersForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsAddUsersForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20010>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20010>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20010>)));
        }

        /// <summary>
        ///  Accepts an array of user email addresses to get added to the specified group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">list of user email addresses that should get added as members to the specified group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of List&lt;InlineResponse20010&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20010>> DistributionGroupsAddUsersForOrgAsync (DistributionGroupNameMembersBody body, string orgName, string distributionGroupName)
        {
             ApiResponse<List<InlineResponse20010>> localVarResponse = await DistributionGroupsAddUsersForOrgAsyncWithHttpInfo(body, orgName, distributionGroupName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Accepts an array of user email addresses to get added to the specified group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">list of user email addresses that should get added as members to the specified group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20010&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20010>>> DistributionGroupsAddUsersForOrgAsyncWithHttpInfo (DistributionGroupNameMembersBody body, string orgName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsAddUsersForOrg");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsAddUsersForOrg");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsAddUsersForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsAddUsersForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20010>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20010>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20010>)));
        }

        /// <summary>
        ///  Delete apps from distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        public void DistributionGroupsBulkDeleteApps (AppsBulkDeleteBody body, string orgName, string distributionGroupName)
        {
             DistributionGroupsBulkDeleteAppsWithHttpInfo(body, orgName, distributionGroupName);
        }

        /// <summary>
        ///  Delete apps from distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DistributionGroupsBulkDeleteAppsWithHttpInfo (AppsBulkDeleteBody body, string orgName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsBulkDeleteApps");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsBulkDeleteApps");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsBulkDeleteApps");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsBulkDeleteApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete apps from distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DistributionGroupsBulkDeleteAppsAsync (AppsBulkDeleteBody body, string orgName, string distributionGroupName)
        {
             await DistributionGroupsBulkDeleteAppsAsyncWithHttpInfo(body, orgName, distributionGroupName);

        }

        /// <summary>
        ///  Delete apps from distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsBulkDeleteAppsAsyncWithHttpInfo (AppsBulkDeleteBody body, string orgName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsBulkDeleteApps");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsBulkDeleteApps");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsBulkDeleteApps");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsBulkDeleteApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete testers from distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        public void DistributionGroupsBulkDeleteUsers (MembersBulkDeleteBody body, string orgName, string distributionGroupName)
        {
             DistributionGroupsBulkDeleteUsersWithHttpInfo(body, orgName, distributionGroupName);
        }

        /// <summary>
        ///  Delete testers from distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DistributionGroupsBulkDeleteUsersWithHttpInfo (MembersBulkDeleteBody body, string orgName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsBulkDeleteUsers");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsBulkDeleteUsers");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsBulkDeleteUsers");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsBulkDeleteUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete testers from distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DistributionGroupsBulkDeleteUsersAsync (MembersBulkDeleteBody body, string orgName, string distributionGroupName)
        {
             await DistributionGroupsBulkDeleteUsersAsyncWithHttpInfo(body, orgName, distributionGroupName);

        }

        /// <summary>
        ///  Delete testers from distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsBulkDeleteUsersAsyncWithHttpInfo (MembersBulkDeleteBody body, string orgName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsBulkDeleteUsers");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsBulkDeleteUsers");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsBulkDeleteUsers");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsBulkDeleteUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Creates a new distribution group and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object DistributionGroupsCreate (AppNameDistributionGroupsBody body, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = DistributionGroupsCreateWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new distribution group and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DistributionGroupsCreateWithHttpInfo (AppNameDistributionGroupsBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsCreate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsCreate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsCreate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates a new distribution group and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DistributionGroupsCreateAsync (AppNameDistributionGroupsBody body, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await DistributionGroupsCreateAsyncWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new distribution group and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsCreateAsyncWithHttpInfo (AppNameDistributionGroupsBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsCreate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsCreate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsCreate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates a disribution goup which can be shared across apps under an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Object</returns>
        public Object DistributionGroupsCreateForOrg (OrgNameDistributionGroupsBody body, string orgName)
        {
             ApiResponse<Object> localVarResponse = DistributionGroupsCreateForOrgWithHttpInfo(body, orgName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a disribution goup which can be shared across apps under an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DistributionGroupsCreateForOrgWithHttpInfo (OrgNameDistributionGroupsBody body, string orgName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsCreateForOrg");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsCreateForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsCreateForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates a disribution goup which can be shared across apps under an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DistributionGroupsCreateForOrgAsync (OrgNameDistributionGroupsBody body, string orgName)
        {
             ApiResponse<Object> localVarResponse = await DistributionGroupsCreateForOrgAsyncWithHttpInfo(body, orgName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a disribution goup which can be shared across apps under an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsCreateForOrgAsyncWithHttpInfo (OrgNameDistributionGroupsBody body, string orgName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsCreateForOrg");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsCreateForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsCreateForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Deletes a distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        public void DistributionGroupsDelete (string appName, string ownerName, string distributionGroupName)
        {
             DistributionGroupsDeleteWithHttpInfo(appName, ownerName, distributionGroupName);
        }

        /// <summary>
        ///  Deletes a distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DistributionGroupsDeleteWithHttpInfo (string appName, string ownerName, string distributionGroupName)
        {
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsDelete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsDelete");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes a distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DistributionGroupsDeleteAsync (string appName, string ownerName, string distributionGroupName)
        {
             await DistributionGroupsDeleteAsyncWithHttpInfo(appName, ownerName, distributionGroupName);

        }

        /// <summary>
        ///  Deletes a distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appName">The name of the application</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsDeleteAsyncWithHttpInfo (string appName, string ownerName, string distributionGroupName)
        {
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsDelete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsDelete");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes a single distribution group from an org with a given distribution group name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        public void DistributionGroupsDeleteForOrg (string orgName, string distributionGroupName)
        {
             DistributionGroupsDeleteForOrgWithHttpInfo(orgName, distributionGroupName);
        }

        /// <summary>
        ///  Deletes a single distribution group from an org with a given distribution group name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DistributionGroupsDeleteForOrgWithHttpInfo (string orgName, string distributionGroupName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsDeleteForOrg");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsDeleteForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsDeleteForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes a single distribution group from an org with a given distribution group name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DistributionGroupsDeleteForOrgAsync (string orgName, string distributionGroupName)
        {
             await DistributionGroupsDeleteForOrgAsyncWithHttpInfo(orgName, distributionGroupName);

        }

        /// <summary>
        ///  Deletes a single distribution group from an org with a given distribution group name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsDeleteForOrgAsyncWithHttpInfo (string orgName, string distributionGroupName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsDeleteForOrg");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsDeleteForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsDeleteForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of distribution groups with details for an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="appsLimit">The max number of apps to include in the response (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> DistributionGroupsDetailsForOrg (string orgName, decimal? appsLimit = null)
        {
             ApiResponse<List<Object>> localVarResponse = DistributionGroupsDetailsForOrgWithHttpInfo(orgName, appsLimit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of distribution groups with details for an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="appsLimit">The max number of apps to include in the response (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > DistributionGroupsDetailsForOrgWithHttpInfo (string orgName, decimal? appsLimit = null)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsDetailsForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups_details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (appsLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apps_limit", appsLimit)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsDetailsForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Returns a list of distribution groups with details for an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="appsLimit">The max number of apps to include in the response (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> DistributionGroupsDetailsForOrgAsync (string orgName, decimal? appsLimit = null)
        {
             ApiResponse<List<Object>> localVarResponse = await DistributionGroupsDetailsForOrgAsyncWithHttpInfo(orgName, appsLimit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of distribution groups with details for an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="appsLimit">The max number of apps to include in the response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> DistributionGroupsDetailsForOrgAsyncWithHttpInfo (string orgName, decimal? appsLimit = null)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsDetailsForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups_details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (appsLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apps_limit", appsLimit)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsDetailsForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Returns a single distribution group for a given distribution group name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Object</returns>
        public Object DistributionGroupsGet (string ownerName, string appName, string distributionGroupName)
        {
             ApiResponse<Object> localVarResponse = DistributionGroupsGetWithHttpInfo(ownerName, appName, distributionGroupName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a single distribution group for a given distribution group name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DistributionGroupsGetWithHttpInfo (string ownerName, string appName, string distributionGroupName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsGet");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a single distribution group for a given distribution group name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DistributionGroupsGetAsync (string ownerName, string appName, string distributionGroupName)
        {
             ApiResponse<Object> localVarResponse = await DistributionGroupsGetAsyncWithHttpInfo(ownerName, appName, distributionGroupName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a single distribution group for a given distribution group name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsGetAsyncWithHttpInfo (string ownerName, string appName, string distributionGroupName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsGet");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get apps from a distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> DistributionGroupsGetApps (string orgName, string distributionGroupName)
        {
             ApiResponse<List<Object>> localVarResponse = DistributionGroupsGetAppsWithHttpInfo(orgName, distributionGroupName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get apps from a distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > DistributionGroupsGetAppsWithHttpInfo (string orgName, string distributionGroupName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsGetApps");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsGetApps");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsGetApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Get apps from a distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> DistributionGroupsGetAppsAsync (string orgName, string distributionGroupName)
        {
             ApiResponse<List<Object>> localVarResponse = await DistributionGroupsGetAppsAsyncWithHttpInfo(orgName, distributionGroupName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get apps from a distribution group in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> DistributionGroupsGetAppsAsyncWithHttpInfo (string orgName, string distributionGroupName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsGetApps");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsGetApps");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsGetApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Returns a single distribution group in org for a given distribution group name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Object</returns>
        public Object DistributionGroupsGetForOrg (string orgName, string distributionGroupName)
        {
             ApiResponse<Object> localVarResponse = DistributionGroupsGetForOrgWithHttpInfo(orgName, distributionGroupName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a single distribution group in org for a given distribution group name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DistributionGroupsGetForOrgWithHttpInfo (string orgName, string distributionGroupName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsGetForOrg");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsGetForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsGetForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a single distribution group in org for a given distribution group name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DistributionGroupsGetForOrgAsync (string orgName, string distributionGroupName)
        {
             ApiResponse<Object> localVarResponse = await DistributionGroupsGetForOrgAsyncWithHttpInfo(orgName, distributionGroupName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a single distribution group in org for a given distribution group name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsGetForOrgAsyncWithHttpInfo (string orgName, string distributionGroupName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsGetForOrg");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsGetForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsGetForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a list of distribution groups in the app specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse201&gt;</returns>
        public List<InlineResponse201> DistributionGroupsList (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse201>> localVarResponse = DistributionGroupsListWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of distribution groups in the app specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse201&gt;</returns>
        public ApiResponse< List<InlineResponse201> > DistributionGroupsListWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse201>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse201>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse201>)));
        }

        /// <summary>
        ///  Returns a list of distribution groups in the app specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse201&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse201>> DistributionGroupsListAsync (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse201>> localVarResponse = await DistributionGroupsListAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of distribution groups in the app specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse201&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse201>>> DistributionGroupsListAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse201>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse201>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse201>)));
        }

        /// <summary>
        ///  Returns a unique list of users including the whole organization members plus testers in any shared group of that org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse2006&gt;</returns>
        public List<InlineResponse2006> DistributionGroupsListAllTestersForOrg (string orgName)
        {
             ApiResponse<List<InlineResponse2006>> localVarResponse = DistributionGroupsListAllTestersForOrgWithHttpInfo(orgName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a unique list of users including the whole organization members plus testers in any shared group of that org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2006&gt;</returns>
        public ApiResponse< List<InlineResponse2006> > DistributionGroupsListAllTestersForOrgWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsListAllTestersForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/testers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsListAllTestersForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2006>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2006>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2006>)));
        }

        /// <summary>
        ///  Returns a unique list of users including the whole organization members plus testers in any shared group of that org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse2006&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2006>> DistributionGroupsListAllTestersForOrgAsync (string orgName)
        {
             ApiResponse<List<InlineResponse2006>> localVarResponse = await DistributionGroupsListAllTestersForOrgAsyncWithHttpInfo(orgName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a unique list of users including the whole organization members plus testers in any shared group of that org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2006&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2006>>> DistributionGroupsListAllTestersForOrgAsyncWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsListAllTestersForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/testers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsListAllTestersForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2006>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2006>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2006>)));
        }

        /// <summary>
        ///  Returns a list of distribution groups in the org specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse201&gt;</returns>
        public List<InlineResponse201> DistributionGroupsListForOrg (string orgName)
        {
             ApiResponse<List<InlineResponse201>> localVarResponse = DistributionGroupsListForOrgWithHttpInfo(orgName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of distribution groups in the org specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse201&gt;</returns>
        public ApiResponse< List<InlineResponse201> > DistributionGroupsListForOrgWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsListForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsListForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse201>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse201>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse201>)));
        }

        /// <summary>
        ///  Returns a list of distribution groups in the org specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse201&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse201>> DistributionGroupsListForOrgAsync (string orgName)
        {
             ApiResponse<List<InlineResponse201>> localVarResponse = await DistributionGroupsListForOrgAsyncWithHttpInfo(orgName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of distribution groups in the org specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse201&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse201>>> DistributionGroupsListForOrgAsyncWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsListForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsListForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse201>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse201>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse201>)));
        }

        /// <summary>
        ///  Returns a list of member details in the distribution group specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="excludePendingInvitations">Whether to exclude pending invitations in the response (optional)</param>
        /// <returns>List&lt;InlineResponse2009&gt;</returns>
        public List<InlineResponse2009> DistributionGroupsListUsers (string ownerName, string appName, string distributionGroupName, bool? excludePendingInvitations = null)
        {
             ApiResponse<List<InlineResponse2009>> localVarResponse = DistributionGroupsListUsersWithHttpInfo(ownerName, appName, distributionGroupName, excludePendingInvitations);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of member details in the distribution group specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="excludePendingInvitations">Whether to exclude pending invitations in the response (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2009&gt;</returns>
        public ApiResponse< List<InlineResponse2009> > DistributionGroupsListUsersWithHttpInfo (string ownerName, string appName, string distributionGroupName, bool? excludePendingInvitations = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsListUsers");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsListUsers");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsListUsers");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (excludePendingInvitations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_pending_invitations", excludePendingInvitations)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsListUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2009>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2009>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2009>)));
        }

        /// <summary>
        ///  Returns a list of member details in the distribution group specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="excludePendingInvitations">Whether to exclude pending invitations in the response (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2009&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2009>> DistributionGroupsListUsersAsync (string ownerName, string appName, string distributionGroupName, bool? excludePendingInvitations = null)
        {
             ApiResponse<List<InlineResponse2009>> localVarResponse = await DistributionGroupsListUsersAsyncWithHttpInfo(ownerName, appName, distributionGroupName, excludePendingInvitations);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of member details in the distribution group specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="excludePendingInvitations">Whether to exclude pending invitations in the response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2009&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2009>>> DistributionGroupsListUsersAsyncWithHttpInfo (string ownerName, string appName, string distributionGroupName, bool? excludePendingInvitations = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsListUsers");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsListUsers");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsListUsers");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (excludePendingInvitations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_pending_invitations", excludePendingInvitations)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsListUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2009>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2009>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2009>)));
        }

        /// <summary>
        ///  Returns a list of member in the distribution group specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>List&lt;InlineResponse2009&gt;</returns>
        public List<InlineResponse2009> DistributionGroupsListUsersForOrg (string orgName, string distributionGroupName)
        {
             ApiResponse<List<InlineResponse2009>> localVarResponse = DistributionGroupsListUsersForOrgWithHttpInfo(orgName, distributionGroupName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of member in the distribution group specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2009&gt;</returns>
        public ApiResponse< List<InlineResponse2009> > DistributionGroupsListUsersForOrgWithHttpInfo (string orgName, string distributionGroupName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsListUsersForOrg");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsListUsersForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsListUsersForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2009>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2009>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2009>)));
        }

        /// <summary>
        ///  Returns a list of member in the distribution group specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of List&lt;InlineResponse2009&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2009>> DistributionGroupsListUsersForOrgAsync (string orgName, string distributionGroupName)
        {
             ApiResponse<List<InlineResponse2009>> localVarResponse = await DistributionGroupsListUsersForOrgAsyncWithHttpInfo(orgName, distributionGroupName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of member in the distribution group specified
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2009&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2009>>> DistributionGroupsListUsersForOrgAsyncWithHttpInfo (string orgName, string distributionGroupName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsListUsersForOrg");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsListUsersForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsListUsersForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2009>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2009>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2009>)));
        }

        /// <summary>
        ///  Update one given distribution group name in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="body">The attributes to update for the distribution group (optional)</param>
        /// <returns>Object</returns>
        public Object DistributionGroupsPatchForOrg (string orgName, string distributionGroupName, DistributionGroupsDistributionGroupNameBody body = null)
        {
             ApiResponse<Object> localVarResponse = DistributionGroupsPatchForOrgWithHttpInfo(orgName, distributionGroupName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update one given distribution group name in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="body">The attributes to update for the distribution group (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DistributionGroupsPatchForOrgWithHttpInfo (string orgName, string distributionGroupName, DistributionGroupsDistributionGroupNameBody body = null)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsPatchForOrg");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsPatchForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsPatchForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Update one given distribution group name in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="body">The attributes to update for the distribution group (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DistributionGroupsPatchForOrgAsync (string orgName, string distributionGroupName, DistributionGroupsDistributionGroupNameBody body = null)
        {
             ApiResponse<Object> localVarResponse = await DistributionGroupsPatchForOrgAsyncWithHttpInfo(orgName, distributionGroupName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update one given distribution group name in an org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <param name="body">The attributes to update for the distribution group (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsPatchForOrgAsyncWithHttpInfo (string orgName, string distributionGroupName, DistributionGroupsDistributionGroupNameBody body = null)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsPatchForOrg");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsPatchForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsPatchForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Remove the users from the distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>List&lt;InlineResponse20060&gt;</returns>
        public List<InlineResponse20060> DistributionGroupsRemoveUser (MembersBulkDeleteBody1 body, string ownerName, string appName, string distributionGroupName)
        {
             ApiResponse<List<InlineResponse20060>> localVarResponse = DistributionGroupsRemoveUserWithHttpInfo(body, ownerName, appName, distributionGroupName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Remove the users from the distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20060&gt;</returns>
        public ApiResponse< List<InlineResponse20060> > DistributionGroupsRemoveUserWithHttpInfo (MembersBulkDeleteBody1 body, string ownerName, string appName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsRemoveUser");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsRemoveUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsRemoveUser");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsRemoveUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsRemoveUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20060>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20060>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20060>)));
        }

        /// <summary>
        ///  Remove the users from the distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of List&lt;InlineResponse20060&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20060>> DistributionGroupsRemoveUserAsync (MembersBulkDeleteBody1 body, string ownerName, string appName, string distributionGroupName)
        {
             ApiResponse<List<InlineResponse20060>> localVarResponse = await DistributionGroupsRemoveUserAsyncWithHttpInfo(body, ownerName, appName, distributionGroupName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Remove the users from the distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20060&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20060>>> DistributionGroupsRemoveUserAsyncWithHttpInfo (MembersBulkDeleteBody1 body, string ownerName, string appName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsRemoveUser");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsRemoveUser");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsRemoveUser");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsRemoveUser");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsRemoveUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20060>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20060>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20060>)));
        }

        /// <summary>
        ///  Resend distribution group app invite notification to previously invited testers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        public void DistributionGroupsResendInvite (DistributionGroupNameResendInviteBody1 body, string ownerName, string appName, string distributionGroupName)
        {
             DistributionGroupsResendInviteWithHttpInfo(body, ownerName, appName, distributionGroupName);
        }

        /// <summary>
        ///  Resend distribution group app invite notification to previously invited testers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DistributionGroupsResendInviteWithHttpInfo (DistributionGroupNameResendInviteBody1 body, string ownerName, string appName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsResendInvite");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsResendInvite");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsResendInvite");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsResendInvite");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsResendInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Resend distribution group app invite notification to previously invited testers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DistributionGroupsResendInviteAsync (DistributionGroupNameResendInviteBody1 body, string ownerName, string appName, string distributionGroupName)
        {
             await DistributionGroupsResendInviteAsyncWithHttpInfo(body, ownerName, appName, distributionGroupName);

        }

        /// <summary>
        ///  Resend distribution group app invite notification to previously invited testers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsResendInviteAsyncWithHttpInfo (DistributionGroupNameResendInviteBody1 body, string ownerName, string appName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsResendInvite");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsResendInvite");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsResendInvite");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsResendInvite");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsResendInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Resend shared distribution group invite notification to previously invited testers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns></returns>
        public void DistributionGroupsResendSharedInvite (DistributionGroupNameResendInviteBody body, string orgName, string distributionGroupName)
        {
             DistributionGroupsResendSharedInviteWithHttpInfo(body, orgName, distributionGroupName);
        }

        /// <summary>
        ///  Resend shared distribution group invite notification to previously invited testers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DistributionGroupsResendSharedInviteWithHttpInfo (DistributionGroupNameResendInviteBody body, string orgName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsResendSharedInvite");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsResendSharedInvite");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsResendSharedInvite");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsResendSharedInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Resend shared distribution group invite notification to previously invited testers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DistributionGroupsResendSharedInviteAsync (DistributionGroupNameResendInviteBody body, string orgName, string distributionGroupName)
        {
             await DistributionGroupsResendSharedInviteAsyncWithHttpInfo(body, orgName, distributionGroupName);

        }

        /// <summary>
        ///  Resend shared distribution group invite notification to previously invited testers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of members to add</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsResendSharedInviteAsyncWithHttpInfo (DistributionGroupNameResendInviteBody body, string orgName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsResendSharedInvite");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->DistributionGroupsResendSharedInvite");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsResendSharedInvite");

            var localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsResendSharedInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Updates the attributes of distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Object</returns>
        public Object DistributionGroupsUpdate (DistributionGroupsDistributionGroupNameBody1 body, string ownerName, string appName, string distributionGroupName)
        {
             ApiResponse<Object> localVarResponse = DistributionGroupsUpdateWithHttpInfo(body, ownerName, appName, distributionGroupName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates the attributes of distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DistributionGroupsUpdateWithHttpInfo (DistributionGroupsDistributionGroupNameBody1 body, string ownerName, string appName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsUpdate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsUpdate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsUpdate");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsUpdate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Updates the attributes of distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DistributionGroupsUpdateAsync (DistributionGroupsDistributionGroupNameBody1 body, string ownerName, string appName, string distributionGroupName)
        {
             ApiResponse<Object> localVarResponse = await DistributionGroupsUpdateAsyncWithHttpInfo(body, ownerName, appName, distributionGroupName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates the attributes of distribution group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The attributes to update for the distribution group</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="distributionGroupName">The name of the distribution group</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DistributionGroupsUpdateAsyncWithHttpInfo (DistributionGroupsDistributionGroupNameBody1 body, string ownerName, string appName, string distributionGroupName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->DistributionGroupsUpdate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->DistributionGroupsUpdate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->DistributionGroupsUpdate");
            // verify the required parameter 'distributionGroupName' is set
            if (distributionGroupName == null)
                throw new ApiException(400, "Missing required parameter 'distributionGroupName' when calling AccountApi->DistributionGroupsUpdate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (distributionGroupName != null) localVarPathParams.Add("distribution_group_name", this.Configuration.ApiClient.ParameterToString(distributionGroupName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributionGroupsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns all invitations sent by the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20014&gt;</returns>
        public List<InlineResponse20014> InvitationsSent ()
        {
             ApiResponse<List<InlineResponse20014>> localVarResponse = InvitationsSentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all invitations sent by the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20014&gt;</returns>
        public ApiResponse< List<InlineResponse20014> > InvitationsSentWithHttpInfo ()
        {

            var localVarPath = "/v0.1/invitations/sent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvitationsSent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20014>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20014>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20014>)));
        }

        /// <summary>
        ///  Returns all invitations sent by the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20014&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20014>> InvitationsSentAsync ()
        {
             ApiResponse<List<InlineResponse20014>> localVarResponse = await InvitationsSentAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all invitations sent by the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20014&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20014>>> InvitationsSentAsyncWithHttpInfo ()
        {

            var localVarPath = "/v0.1/invitations/sent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvitationsSent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20014>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20014>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20014>)));
        }

        /// <summary>
        ///  Removes a user&#x27;s invitation to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns></returns>
        public void OrgInvitations (string orgName, string email, Object body = null)
        {
             OrgInvitationsWithHttpInfo(orgName, email, body);
        }

        /// <summary>
        ///  Removes a user&#x27;s invitation to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrgInvitationsWithHttpInfo (string orgName, string email, Object body = null)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrgInvitations");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AccountApi->OrgInvitations");

            var localVarPath = "/v0.1/orgs/{org_name}/invitations/{email}/revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a user&#x27;s invitation to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrgInvitationsAsync (string orgName, string email, Object body = null)
        {
             await OrgInvitationsAsyncWithHttpInfo(orgName, email, body);

        }

        /// <summary>
        ///  Removes a user&#x27;s invitation to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsAsyncWithHttpInfo (string orgName, string email, Object body = null)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrgInvitations");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AccountApi->OrgInvitations");

            var localVarPath = "/v0.1/orgs/{org_name}/invitations/{email}/revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Accepts a pending organization invitation for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns></returns>
        public void OrgInvitationsAccept (string invitationToken, Object body = null)
        {
             OrgInvitationsAcceptWithHttpInfo(invitationToken, body);
        }

        /// <summary>
        ///  Accepts a pending organization invitation for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrgInvitationsAcceptWithHttpInfo (string invitationToken, Object body = null)
        {
            // verify the required parameter 'invitationToken' is set
            if (invitationToken == null)
                throw new ApiException(400, "Missing required parameter 'invitationToken' when calling AccountApi->OrgInvitationsAccept");

            var localVarPath = "/v0.1/user/invitations/orgs/{invitation_token}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationToken != null) localVarPathParams.Add("invitation_token", this.Configuration.ApiClient.ParameterToString(invitationToken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsAccept", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Accepts a pending organization invitation for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrgInvitationsAcceptAsync (string invitationToken, Object body = null)
        {
             await OrgInvitationsAcceptAsyncWithHttpInfo(invitationToken, body);

        }

        /// <summary>
        ///  Accepts a pending organization invitation for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsAcceptAsyncWithHttpInfo (string invitationToken, Object body = null)
        {
            // verify the required parameter 'invitationToken' is set
            if (invitationToken == null)
                throw new ApiException(400, "Missing required parameter 'invitationToken' when calling AccountApi->OrgInvitationsAccept");

            var localVarPath = "/v0.1/user/invitations/orgs/{invitation_token}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationToken != null) localVarPathParams.Add("invitation_token", this.Configuration.ApiClient.ParameterToString(invitationToken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsAccept", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Invites a new or existing user to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to invite</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns></returns>
        public void OrgInvitationsCreate (OrgNameInvitationsBody body, string orgName)
        {
             OrgInvitationsCreateWithHttpInfo(body, orgName);
        }

        /// <summary>
        ///  Invites a new or existing user to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to invite</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrgInvitationsCreateWithHttpInfo (OrgNameInvitationsBody body, string orgName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->OrgInvitationsCreate");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrgInvitationsCreate");

            var localVarPath = "/v0.1/orgs/{org_name}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Invites a new or existing user to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to invite</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrgInvitationsCreateAsync (OrgNameInvitationsBody body, string orgName)
        {
             await OrgInvitationsCreateAsyncWithHttpInfo(body, orgName);

        }

        /// <summary>
        ///  Invites a new or existing user to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to invite</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsCreateAsyncWithHttpInfo (OrgNameInvitationsBody body, string orgName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->OrgInvitationsCreate");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrgInvitationsCreate");

            var localVarPath = "/v0.1/orgs/{org_name}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a user&#x27;s invitation to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user whose invitation should be removed</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns></returns>
        public void OrgInvitationsDelete (OrgNameInvitationsBody1 body, string orgName)
        {
             OrgInvitationsDeleteWithHttpInfo(body, orgName);
        }

        /// <summary>
        ///  Removes a user&#x27;s invitation to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user whose invitation should be removed</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrgInvitationsDeleteWithHttpInfo (OrgNameInvitationsBody1 body, string orgName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->OrgInvitationsDelete");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrgInvitationsDelete");

            var localVarPath = "/v0.1/orgs/{org_name}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a user&#x27;s invitation to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user whose invitation should be removed</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrgInvitationsDeleteAsync (OrgNameInvitationsBody1 body, string orgName)
        {
             await OrgInvitationsDeleteAsyncWithHttpInfo(body, orgName);

        }

        /// <summary>
        ///  Removes a user&#x27;s invitation to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user whose invitation should be removed</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsDeleteAsyncWithHttpInfo (OrgNameInvitationsBody1 body, string orgName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->OrgInvitationsDelete");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrgInvitationsDelete");

            var localVarPath = "/v0.1/orgs/{org_name}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Gets the pending invitations for the organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse2008&gt;</returns>
        public List<InlineResponse2008> OrgInvitationsListPending (string orgName)
        {
             ApiResponse<List<InlineResponse2008>> localVarResponse = OrgInvitationsListPendingWithHttpInfo(orgName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the pending invitations for the organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2008&gt;</returns>
        public ApiResponse< List<InlineResponse2008> > OrgInvitationsListPendingWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrgInvitationsListPending");

            var localVarPath = "/v0.1/orgs/{org_name}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsListPending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2008>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2008>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2008>)));
        }

        /// <summary>
        ///  Gets the pending invitations for the organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse2008&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2008>> OrgInvitationsListPendingAsync (string orgName)
        {
             ApiResponse<List<InlineResponse2008>> localVarResponse = await OrgInvitationsListPendingAsyncWithHttpInfo(orgName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the pending invitations for the organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2008&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2008>>> OrgInvitationsListPendingAsyncWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrgInvitationsListPending");

            var localVarPath = "/v0.1/orgs/{org_name}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsListPending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2008>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2008>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2008>)));
        }

        /// <summary>
        ///  Rejects a pending organization invitation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns></returns>
        public void OrgInvitationsReject (string invitationToken, Object body = null)
        {
             OrgInvitationsRejectWithHttpInfo(invitationToken, body);
        }

        /// <summary>
        ///  Rejects a pending organization invitation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrgInvitationsRejectWithHttpInfo (string invitationToken, Object body = null)
        {
            // verify the required parameter 'invitationToken' is set
            if (invitationToken == null)
                throw new ApiException(400, "Missing required parameter 'invitationToken' when calling AccountApi->OrgInvitationsReject");

            var localVarPath = "/v0.1/user/invitations/orgs/{invitation_token}/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationToken != null) localVarPathParams.Add("invitation_token", this.Configuration.ApiClient.ParameterToString(invitationToken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsReject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Rejects a pending organization invitation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrgInvitationsRejectAsync (string invitationToken, Object body = null)
        {
             await OrgInvitationsRejectAsyncWithHttpInfo(invitationToken, body);

        }

        /// <summary>
        ///  Rejects a pending organization invitation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationToken">The app invitation token that was sent to the user</param>
        /// <param name="body">allow empty body for custom http-client lib (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsRejectAsyncWithHttpInfo (string invitationToken, Object body = null)
        {
            // verify the required parameter 'invitationToken' is set
            if (invitationToken == null)
                throw new ApiException(400, "Missing required parameter 'invitationToken' when calling AccountApi->OrgInvitationsReject");

            var localVarPath = "/v0.1/user/invitations/orgs/{invitation_token}/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationToken != null) localVarPathParams.Add("invitation_token", this.Configuration.ApiClient.ParameterToString(invitationToken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsReject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Cancels an existing organization invitation for the user and sends a new one
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns></returns>
        public void OrgInvitationsSendNewInvitation (string orgName, string email, EmailResendBody body = null)
        {
             OrgInvitationsSendNewInvitationWithHttpInfo(orgName, email, body);
        }

        /// <summary>
        ///  Cancels an existing organization invitation for the user and sends a new one
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrgInvitationsSendNewInvitationWithHttpInfo (string orgName, string email, EmailResendBody body = null)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrgInvitationsSendNewInvitation");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AccountApi->OrgInvitationsSendNewInvitation");

            var localVarPath = "/v0.1/orgs/{org_name}/invitations/{email}/resend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsSendNewInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Cancels an existing organization invitation for the user and sends a new one
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrgInvitationsSendNewInvitationAsync (string orgName, string email, EmailResendBody body = null)
        {
             await OrgInvitationsSendNewInvitationAsyncWithHttpInfo(orgName, email, body);

        }

        /// <summary>
        ///  Cancels an existing organization invitation for the user and sends a new one
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <param name="body">The role of the user to be added (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsSendNewInvitationAsyncWithHttpInfo (string orgName, string email, EmailResendBody body = null)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrgInvitationsSendNewInvitation");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AccountApi->OrgInvitationsSendNewInvitation");

            var localVarPath = "/v0.1/orgs/{org_name}/invitations/{email}/resend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsSendNewInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Allows the role of an invited user to be changed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new role of the user</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <returns></returns>
        public void OrgInvitationsUpdate (InvitationsEmailBody body, string orgName, string email)
        {
             OrgInvitationsUpdateWithHttpInfo(body, orgName, email);
        }

        /// <summary>
        ///  Allows the role of an invited user to be changed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new role of the user</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrgInvitationsUpdateWithHttpInfo (InvitationsEmailBody body, string orgName, string email)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->OrgInvitationsUpdate");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrgInvitationsUpdate");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AccountApi->OrgInvitationsUpdate");

            var localVarPath = "/v0.1/orgs/{org_name}/invitations/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Allows the role of an invited user to be changed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new role of the user</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrgInvitationsUpdateAsync (InvitationsEmailBody body, string orgName, string email)
        {
             await OrgInvitationsUpdateAsyncWithHttpInfo(body, orgName, email);

        }

        /// <summary>
        ///  Allows the role of an invited user to be changed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new role of the user</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="email">The email address of the user to send the password reset mail to.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrgInvitationsUpdateAsyncWithHttpInfo (InvitationsEmailBody body, string orgName, string email)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->OrgInvitationsUpdate");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrgInvitationsUpdate");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AccountApi->OrgInvitationsUpdate");

            var localVarPath = "/v0.1/orgs/{org_name}/invitations/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgInvitationsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes the uploaded organization avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Object</returns>
        public Object OrganizationDeleteAvatar (string orgName)
        {
             ApiResponse<Object> localVarResponse = OrganizationDeleteAvatarWithHttpInfo(orgName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes the uploaded organization avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > OrganizationDeleteAvatarWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrganizationDeleteAvatar");

            var localVarPath = "/v0.1/orgs/{org_name}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationDeleteAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Deletes the uploaded organization avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OrganizationDeleteAvatarAsync (string orgName)
        {
             ApiResponse<Object> localVarResponse = await OrganizationDeleteAvatarAsyncWithHttpInfo(orgName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Deletes the uploaded organization avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationDeleteAvatarAsyncWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrganizationDeleteAvatar");

            var localVarPath = "/v0.1/orgs/{org_name}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationDeleteAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Sets the organization avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>Object</returns>
        public Object OrganizationUpdateAvatar (string orgName, byte[] avatar = null)
        {
             ApiResponse<Object> localVarResponse = OrganizationUpdateAvatarWithHttpInfo(orgName, avatar);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Sets the organization avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > OrganizationUpdateAvatarWithHttpInfo (string orgName, byte[] avatar = null)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrganizationUpdateAvatar");

            var localVarPath = "/v0.1/orgs/{org_name}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (avatar != null) localVarFileParams.Add("avatar", this.Configuration.ApiClient.ParameterToFile("avatar", avatar));
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationUpdateAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Sets the organization avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OrganizationUpdateAvatarAsync (string orgName, byte[] avatar = null)
        {
             ApiResponse<Object> localVarResponse = await OrganizationUpdateAvatarAsyncWithHttpInfo(orgName, avatar);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Sets the organization avatar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="avatar"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationUpdateAvatarAsyncWithHttpInfo (string orgName, byte[] avatar = null)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrganizationUpdateAvatar");

            var localVarPath = "/v0.1/orgs/{org_name}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (avatar != null) localVarFileParams.Add("avatar", this.Configuration.ApiClient.ParameterToFile("avatar", avatar));
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationUpdateAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates a new organization and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The organization data</param>
        /// <returns>Object</returns>
        public Object OrganizationsCreateOrUpdate (V01OrgsBody body)
        {
             ApiResponse<Object> localVarResponse = OrganizationsCreateOrUpdateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new organization and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The organization data</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > OrganizationsCreateOrUpdateWithHttpInfo (V01OrgsBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->OrganizationsCreateOrUpdate");

            var localVarPath = "/v0.1/orgs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsCreateOrUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates a new organization and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The organization data</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OrganizationsCreateOrUpdateAsync (V01OrgsBody body)
        {
             ApiResponse<Object> localVarResponse = await OrganizationsCreateOrUpdateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new organization and returns it to the caller
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The organization data</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationsCreateOrUpdateAsyncWithHttpInfo (V01OrgsBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->OrganizationsCreateOrUpdate");

            var localVarPath = "/v0.1/orgs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsCreateOrUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Deletes a single organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns></returns>
        public void OrganizationsDelete (string orgName)
        {
             OrganizationsDeleteWithHttpInfo(orgName);
        }

        /// <summary>
        ///  Deletes a single organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrganizationsDeleteWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrganizationsDelete");

            var localVarPath = "/v0.1/orgs/{org_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes a single organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrganizationsDeleteAsync (string orgName)
        {
             await OrganizationsDeleteAsyncWithHttpInfo(orgName);

        }

        /// <summary>
        ///  Deletes a single organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationsDeleteAsyncWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrganizationsDelete");

            var localVarPath = "/v0.1/orgs/{org_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns the details of a single organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Object</returns>
        public Object OrganizationsGet (string orgName)
        {
             ApiResponse<Object> localVarResponse = OrganizationsGetWithHttpInfo(orgName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the details of a single organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > OrganizationsGetWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrganizationsGet");

            var localVarPath = "/v0.1/orgs/{org_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the details of a single organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OrganizationsGetAsync (string orgName)
        {
             ApiResponse<Object> localVarResponse = await OrganizationsGetAsyncWithHttpInfo(orgName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the details of a single organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationsGetAsyncWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrganizationsGet");

            var localVarPath = "/v0.1/orgs/{org_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a list of organizations the requesting user has access to
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20013&gt;</returns>
        public List<InlineResponse20013> OrganizationsList ()
        {
             ApiResponse<List<InlineResponse20013>> localVarResponse = OrganizationsListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of organizations the requesting user has access to
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20013&gt;</returns>
        public ApiResponse< List<InlineResponse20013> > OrganizationsListWithHttpInfo ()
        {

            var localVarPath = "/v0.1/orgs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20013>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20013>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20013>)));
        }

        /// <summary>
        ///  Returns a list of organizations the requesting user has access to
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20013&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20013>> OrganizationsListAsync ()
        {
             ApiResponse<List<InlineResponse20013>> localVarResponse = await OrganizationsListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of organizations the requesting user has access to
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20013&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20013>>> OrganizationsListAsyncWithHttpInfo ()
        {

            var localVarPath = "/v0.1/orgs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20013>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20013>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20013>)));
        }

        /// <summary>
        ///  Returns a list organizations in which the requesting user is an admin
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20097</returns>
        public InlineResponse20097 OrganizationsListAdministered ()
        {
             ApiResponse<InlineResponse20097> localVarResponse = OrganizationsListAdministeredWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list organizations in which the requesting user is an admin
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20097</returns>
        public ApiResponse< InlineResponse20097 > OrganizationsListAdministeredWithHttpInfo ()
        {

            var localVarPath = "/v0.1/administeredOrgs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsListAdministered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20097>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20097) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20097)));
        }

        /// <summary>
        ///  Returns a list organizations in which the requesting user is an admin
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20097</returns>
        public async System.Threading.Tasks.Task<InlineResponse20097> OrganizationsListAdministeredAsync ()
        {
             ApiResponse<InlineResponse20097> localVarResponse = await OrganizationsListAdministeredAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list organizations in which the requesting user is an admin
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20097)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20097>> OrganizationsListAdministeredAsyncWithHttpInfo ()
        {

            var localVarPath = "/v0.1/administeredOrgs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsListAdministered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20097>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20097) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20097)));
        }

        /// <summary>
        ///  Returns a list of organizations the requesting user has access to
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the org</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Object</returns>
        public Object OrganizationsUpdate (OrgsOrgNameBody body, string orgName)
        {
             ApiResponse<Object> localVarResponse = OrganizationsUpdateWithHttpInfo(body, orgName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of organizations the requesting user has access to
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the org</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > OrganizationsUpdateWithHttpInfo (OrgsOrgNameBody body, string orgName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->OrganizationsUpdate");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrganizationsUpdate");

            var localVarPath = "/v0.1/orgs/{org_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a list of organizations the requesting user has access to
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the org</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OrganizationsUpdateAsync (OrgsOrgNameBody body, string orgName)
        {
             ApiResponse<Object> localVarResponse = await OrganizationsUpdateAsyncWithHttpInfo(body, orgName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of organizations the requesting user has access to
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the org</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationsUpdateAsyncWithHttpInfo (OrgsOrgNameBody body, string orgName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->OrganizationsUpdate");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->OrganizationsUpdate");

            var localVarPath = "/v0.1/orgs/{org_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Gets all service connections of the service type for GDPR export.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse2001&gt;</returns>
        public List<InlineResponse2001> SharedconnectionConnections ()
        {
             ApiResponse<List<InlineResponse2001>> localVarResponse = SharedconnectionConnectionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all service connections of the service type for GDPR export.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse2001&gt;</returns>
        public ApiResponse< List<InlineResponse2001> > SharedconnectionConnectionsWithHttpInfo ()
        {

            var localVarPath = "/v0.1/user/export/serviceConnections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharedconnectionConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2001>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2001>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2001>)));
        }

        /// <summary>
        ///  Gets all service connections of the service type for GDPR export.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse2001&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2001>> SharedconnectionConnectionsAsync ()
        {
             ApiResponse<List<InlineResponse2001>> localVarResponse = await SharedconnectionConnectionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all service connections of the service type for GDPR export.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2001&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2001>>> SharedconnectionConnectionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v0.1/user/export/serviceConnections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharedconnectionConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2001>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2001>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2001>)));
        }

        /// <summary>
        ///  Adds an app to a team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the app to be added to the team. The app has to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Object</returns>
        public Object TeamsAddApp (TeamNameAppsBody body, string orgName, string teamName)
        {
             ApiResponse<Object> localVarResponse = TeamsAddAppWithHttpInfo(body, orgName, teamName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Adds an app to a team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the app to be added to the team. The app has to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TeamsAddAppWithHttpInfo (TeamNameAppsBody body, string orgName, string teamName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->TeamsAddApp");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsAddApp");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsAddApp");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsAddApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Adds an app to a team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the app to be added to the team. The app has to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TeamsAddAppAsync (TeamNameAppsBody body, string orgName, string teamName)
        {
             ApiResponse<Object> localVarResponse = await TeamsAddAppAsyncWithHttpInfo(body, orgName, teamName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Adds an app to a team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The name of the app to be added to the team. The app has to be owned by the organization.</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamsAddAppAsyncWithHttpInfo (TeamNameAppsBody body, string orgName, string teamName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->TeamsAddApp");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsAddApp");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsAddApp");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsAddApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Adds a new user to a team that is owned by an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to add to the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Object</returns>
        public Object TeamsAddUser (TeamNameUsersBody body, string orgName, string teamName)
        {
             ApiResponse<Object> localVarResponse = TeamsAddUserWithHttpInfo(body, orgName, teamName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Adds a new user to a team that is owned by an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to add to the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TeamsAddUserWithHttpInfo (TeamNameUsersBody body, string orgName, string teamName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->TeamsAddUser");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsAddUser");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsAddUser");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsAddUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Adds a new user to a team that is owned by an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to add to the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TeamsAddUserAsync (TeamNameUsersBody body, string orgName, string teamName)
        {
             ApiResponse<Object> localVarResponse = await TeamsAddUserAsyncWithHttpInfo(body, orgName, teamName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Adds a new user to a team that is owned by an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The email of the user to add to the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamsAddUserAsyncWithHttpInfo (TeamNameUsersBody body, string orgName, string teamName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->TeamsAddUser");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsAddUser");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsAddUser");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsAddUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates a team and returns it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to create the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse2007&gt;</returns>
        public List<InlineResponse2007> TeamsCreateTeam (OrgNameTeamsBody body, string orgName)
        {
             ApiResponse<List<InlineResponse2007>> localVarResponse = TeamsCreateTeamWithHttpInfo(body, orgName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a team and returns it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to create the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2007&gt;</returns>
        public ApiResponse< List<InlineResponse2007> > TeamsCreateTeamWithHttpInfo (OrgNameTeamsBody body, string orgName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->TeamsCreateTeam");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsCreateTeam");

            var localVarPath = "/v0.1/orgs/{org_name}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsCreateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2007>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2007>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2007>)));
        }

        /// <summary>
        ///  Creates a team and returns it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to create the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse2007&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2007>> TeamsCreateTeamAsync (OrgNameTeamsBody body, string orgName)
        {
             ApiResponse<List<InlineResponse2007>> localVarResponse = await TeamsCreateTeamAsyncWithHttpInfo(body, orgName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a team and returns it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to create the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2007&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2007>>> TeamsCreateTeamAsyncWithHttpInfo (OrgNameTeamsBody body, string orgName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->TeamsCreateTeam");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsCreateTeam");

            var localVarPath = "/v0.1/orgs/{org_name}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsCreateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2007>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2007>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2007>)));
        }

        /// <summary>
        ///  Deletes a single team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns></returns>
        public void TeamsDelete (string orgName, string teamName)
        {
             TeamsDeleteWithHttpInfo(orgName, teamName);
        }

        /// <summary>
        ///  Deletes a single team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamsDeleteWithHttpInfo (string orgName, string teamName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsDelete");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsDelete");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes a single team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamsDeleteAsync (string orgName, string teamName)
        {
             await TeamsDeleteAsyncWithHttpInfo(orgName, teamName);

        }

        /// <summary>
        ///  Deletes a single team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamsDeleteAsyncWithHttpInfo (string orgName, string teamName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsDelete");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsDelete");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns the details of a single team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Object</returns>
        public Object TeamsGetTeam (string orgName, string teamName)
        {
             ApiResponse<Object> localVarResponse = TeamsGetTeamWithHttpInfo(orgName, teamName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the details of a single team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TeamsGetTeamWithHttpInfo (string orgName, string teamName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsGetTeam");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsGetTeam");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsGetTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the details of a single team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TeamsGetTeamAsync (string orgName, string teamName)
        {
             ApiResponse<Object> localVarResponse = await TeamsGetTeamAsyncWithHttpInfo(orgName, teamName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the details of a single team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamsGetTeamAsyncWithHttpInfo (string orgName, string teamName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsGetTeam");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsGetTeam");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsGetTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the users of a team which is owned by an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Object</returns>
        public Object TeamsGetUsers (string orgName, string teamName)
        {
             ApiResponse<Object> localVarResponse = TeamsGetUsersWithHttpInfo(orgName, teamName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the users of a team which is owned by an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TeamsGetUsersWithHttpInfo (string orgName, string teamName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsGetUsers");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsGetUsers");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsGetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the users of a team which is owned by an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TeamsGetUsersAsync (string orgName, string teamName)
        {
             ApiResponse<Object> localVarResponse = await TeamsGetUsersAsyncWithHttpInfo(orgName, teamName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the users of a team which is owned by an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamsGetUsersAsyncWithHttpInfo (string orgName, string teamName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsGetUsers");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsGetUsers");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsGetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the list of all teams in this org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse2007&gt;</returns>
        public List<InlineResponse2007> TeamsListAll (string orgName)
        {
             ApiResponse<List<InlineResponse2007>> localVarResponse = TeamsListAllWithHttpInfo(orgName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the list of all teams in this org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2007&gt;</returns>
        public ApiResponse< List<InlineResponse2007> > TeamsListAllWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsListAll");

            var localVarPath = "/v0.1/orgs/{org_name}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsListAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2007>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2007>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2007>)));
        }

        /// <summary>
        ///  Returns the list of all teams in this org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse2007&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2007>> TeamsListAllAsync (string orgName)
        {
             ApiResponse<List<InlineResponse2007>> localVarResponse = await TeamsListAllAsyncWithHttpInfo(orgName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the list of all teams in this org
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2007&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2007>>> TeamsListAllAsyncWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsListAll");

            var localVarPath = "/v0.1/orgs/{org_name}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsListAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2007>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2007>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2007>)));
        }

        /// <summary>
        ///  Returns the apps a team has access to
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> TeamsListApps (string orgName, string teamName)
        {
             ApiResponse<List<Object>> localVarResponse = TeamsListAppsWithHttpInfo(orgName, teamName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the apps a team has access to
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > TeamsListAppsWithHttpInfo (string orgName, string teamName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsListApps");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsListApps");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsListApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Returns the apps a team has access to
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> TeamsListAppsAsync (string orgName, string teamName)
        {
             ApiResponse<List<Object>> localVarResponse = await TeamsListAppsAsyncWithHttpInfo(orgName, teamName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the apps a team has access to
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> TeamsListAppsAsyncWithHttpInfo (string orgName, string teamName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsListApps");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsListApps");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsListApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Removes an app from a team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void TeamsRemoveApp (string orgName, string teamName, string appName)
        {
             TeamsRemoveAppWithHttpInfo(orgName, teamName, appName);
        }

        /// <summary>
        ///  Removes an app from a team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamsRemoveAppWithHttpInfo (string orgName, string teamName, string appName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsRemoveApp");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsRemoveApp");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->TeamsRemoveApp");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsRemoveApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes an app from a team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamsRemoveAppAsync (string orgName, string teamName, string appName)
        {
             await TeamsRemoveAppAsyncWithHttpInfo(orgName, teamName, appName);

        }

        /// <summary>
        ///  Removes an app from a team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamsRemoveAppAsyncWithHttpInfo (string orgName, string teamName, string appName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsRemoveApp");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsRemoveApp");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->TeamsRemoveApp");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsRemoveApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a user from a team that is owned by an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns></returns>
        public void TeamsRemoveUser (string orgName, string teamName, string userName)
        {
             TeamsRemoveUserWithHttpInfo(orgName, teamName, userName);
        }

        /// <summary>
        ///  Removes a user from a team that is owned by an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamsRemoveUserWithHttpInfo (string orgName, string teamName, string userName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsRemoveUser");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsRemoveUser");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling AccountApi->TeamsRemoveUser");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            if (userName != null) localVarPathParams.Add("user_name", this.Configuration.ApiClient.ParameterToString(userName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsRemoveUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a user from a team that is owned by an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamsRemoveUserAsync (string orgName, string teamName, string userName)
        {
             await TeamsRemoveUserAsyncWithHttpInfo(orgName, teamName, userName);

        }

        /// <summary>
        ///  Removes a user from a team that is owned by an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamsRemoveUserAsyncWithHttpInfo (string orgName, string teamName, string userName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsRemoveUser");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsRemoveUser");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling AccountApi->TeamsRemoveUser");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            if (userName != null) localVarPathParams.Add("user_name", this.Configuration.ApiClient.ParameterToString(userName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsRemoveUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Updates a single team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to update the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Object</returns>
        public Object TeamsUpdate (TeamsTeamNameBody body, string orgName, string teamName)
        {
             ApiResponse<Object> localVarResponse = TeamsUpdateWithHttpInfo(body, orgName, teamName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates a single team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to update the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TeamsUpdateWithHttpInfo (TeamsTeamNameBody body, string orgName, string teamName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->TeamsUpdate");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsUpdate");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsUpdate");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Updates a single team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to update the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TeamsUpdateAsync (TeamsTeamNameBody body, string orgName, string teamName)
        {
             ApiResponse<Object> localVarResponse = await TeamsUpdateAsyncWithHttpInfo(body, orgName, teamName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates a single team
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The information used to update the team</param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamsUpdateAsyncWithHttpInfo (TeamsTeamNameBody body, string orgName, string teamName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->TeamsUpdate");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsUpdate");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsUpdate");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Updates the permissions the team has to the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object TeamsUpdatePermissions (AppsAppNameBody body, string orgName, string teamName, string appName)
        {
             ApiResponse<Object> localVarResponse = TeamsUpdatePermissionsWithHttpInfo(body, orgName, teamName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates the permissions the team has to the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TeamsUpdatePermissionsWithHttpInfo (AppsAppNameBody body, string orgName, string teamName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->TeamsUpdatePermissions");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsUpdatePermissions");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsUpdatePermissions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->TeamsUpdatePermissions");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsUpdatePermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Updates the permissions the team has to the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TeamsUpdatePermissionsAsync (AppsAppNameBody body, string orgName, string teamName, string appName)
        {
             ApiResponse<Object> localVarResponse = await TeamsUpdatePermissionsAsyncWithHttpInfo(body, orgName, teamName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates the permissions the team has to the app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="teamName">The team&#x27;s name</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamsUpdatePermissionsAsyncWithHttpInfo (AppsAppNameBody body, string orgName, string teamName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->TeamsUpdatePermissions");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->TeamsUpdatePermissions");
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new ApiException(400, "Missing required parameter 'teamName' when calling AccountApi->TeamsUpdatePermissions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->TeamsUpdatePermissions");

            var localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamName != null) localVarPathParams.Add("team_name", this.Configuration.ApiClient.ParameterToString(teamName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamsUpdatePermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Delete the user api_token object with the specific id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns></returns>
        public void UserApiTokensDelete (string apiTokenId)
        {
             UserApiTokensDeleteWithHttpInfo(apiTokenId);
        }

        /// <summary>
        ///  Delete the user api_token object with the specific id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UserApiTokensDeleteWithHttpInfo (string apiTokenId)
        {
            // verify the required parameter 'apiTokenId' is set
            if (apiTokenId == null)
                throw new ApiException(400, "Missing required parameter 'apiTokenId' when calling AccountApi->UserApiTokensDelete");

            var localVarPath = "/v0.1/api_tokens/{api_token_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiTokenId != null) localVarPathParams.Add("api_token_id", this.Configuration.ApiClient.ParameterToString(apiTokenId)); // path parameter
            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserApiTokensDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete the user api_token object with the specific id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserApiTokensDeleteAsync (string apiTokenId)
        {
             await UserApiTokensDeleteAsyncWithHttpInfo(apiTokenId);

        }

        /// <summary>
        ///  Delete the user api_token object with the specific id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiTokenId">The unique ID (UUID) of the api token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UserApiTokensDeleteAsyncWithHttpInfo (string apiTokenId)
        {
            // verify the required parameter 'apiTokenId' is set
            if (apiTokenId == null)
                throw new ApiException(400, "Missing required parameter 'apiTokenId' when calling AccountApi->UserApiTokensDelete");

            var localVarPath = "/v0.1/api_tokens/{api_token_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiTokenId != null) localVarPathParams.Add("api_token_id", this.Configuration.ApiClient.ParameterToString(apiTokenId)); // path parameter
            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserApiTokensDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns api tokens for the authenticated user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20075&gt;</returns>
        public List<InlineResponse20075> UserApiTokensList ()
        {
             ApiResponse<List<InlineResponse20075>> localVarResponse = UserApiTokensListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns api tokens for the authenticated user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20075&gt;</returns>
        public ApiResponse< List<InlineResponse20075> > UserApiTokensListWithHttpInfo ()
        {

            var localVarPath = "/v0.1/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserApiTokensList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20075>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20075>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20075>)));
        }

        /// <summary>
        ///  Returns api tokens for the authenticated user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20075&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20075>> UserApiTokensListAsync ()
        {
             ApiResponse<List<InlineResponse20075>> localVarResponse = await UserApiTokensListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns api tokens for the authenticated user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20075&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20075>>> UserApiTokensListAsyncWithHttpInfo ()
        {

            var localVarPath = "/v0.1/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserApiTokensList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20075>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20075>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20075>)));
        }

        /// <summary>
        ///  Creates a new User API token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>Object</returns>
        public Object UserApiTokensNew (V01ApiTokensBody body = null)
        {
             ApiResponse<Object> localVarResponse = UserApiTokensNewWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new User API token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UserApiTokensNewWithHttpInfo (V01ApiTokensBody body = null)
        {

            var localVarPath = "/v0.1/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserApiTokensNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates a new User API token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UserApiTokensNewAsync (V01ApiTokensBody body = null)
        {
             ApiResponse<Object> localVarResponse = await UserApiTokensNewAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new User API token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Description of the token (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UserApiTokensNewAsyncWithHttpInfo (V01ApiTokensBody body = null)
        {

            var localVarPath = "/v0.1/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserApiTokensNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the user profile data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object UsersGet ()
        {
             ApiResponse<Object> localVarResponse = UsersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the user profile data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UsersGetWithHttpInfo ()
        {

            var localVarPath = "/v0.1/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the user profile data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UsersGetAsync ()
        {
             ApiResponse<Object> localVarResponse = await UsersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the user profile data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v0.1/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Object</returns>
        public Object UsersGetForOrg (string orgName, string userName)
        {
             ApiResponse<Object> localVarResponse = UsersGetForOrgWithHttpInfo(orgName, userName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UsersGetForOrgWithHttpInfo (string orgName, string userName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->UsersGetForOrg");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling AccountApi->UsersGetForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/users/{user_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (userName != null) localVarPathParams.Add("user_name", this.Configuration.ApiClient.ParameterToString(userName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UsersGetForOrgAsync (string orgName, string userName)
        {
             ApiResponse<Object> localVarResponse = await UsersGetForOrgAsyncWithHttpInfo(orgName, userName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersGetForOrgAsyncWithHttpInfo (string orgName, string userName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->UsersGetForOrg");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling AccountApi->UsersGetForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/users/{user_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (userName != null) localVarPathParams.Add("user_name", this.Configuration.ApiClient.ParameterToString(userName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object UsersGetUserMetadata ()
        {
             ApiResponse<Object> localVarResponse = UsersGetUserMetadataWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UsersGetUserMetadataWithHttpInfo ()
        {

            var localVarPath = "/v0.1/user/metadata/optimizely";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UsersGetUserMetadataAsync ()
        {
             ApiResponse<Object> localVarResponse = await UsersGetUserMetadataAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersGetUserMetadataAsyncWithHttpInfo ()
        {

            var localVarPath = "/v0.1/user/metadata/optimizely";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the users associated with the app specified with the given app name which belongs to the given owner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20019&gt;</returns>
        public List<InlineResponse20019> UsersList (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20019>> localVarResponse = UsersListWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the users associated with the app specified with the given app name which belongs to the given owner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20019&gt;</returns>
        public ApiResponse< List<InlineResponse20019> > UsersListWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->UsersList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->UsersList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20019>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20019>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20019>)));
        }

        /// <summary>
        ///  Returns the users associated with the app specified with the given app name which belongs to the given owner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20019&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20019>> UsersListAsync (string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20019>> localVarResponse = await UsersListAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the users associated with the app specified with the given app name which belongs to the given owner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20019&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20019>>> UsersListAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AccountApi->UsersList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AccountApi->UsersList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20019>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20019>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20019>)));
        }

        /// <summary>
        ///  Returns a list of users that belong to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>List&lt;InlineResponse2005&gt;</returns>
        public List<InlineResponse2005> UsersListForOrg (string orgName)
        {
             ApiResponse<List<InlineResponse2005>> localVarResponse = UsersListForOrgWithHttpInfo(orgName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of users that belong to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2005&gt;</returns>
        public ApiResponse< List<InlineResponse2005> > UsersListForOrgWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->UsersListForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersListForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2005>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2005>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2005>)));
        }

        /// <summary>
        ///  Returns a list of users that belong to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of List&lt;InlineResponse2005&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2005>> UsersListForOrgAsync (string orgName)
        {
             ApiResponse<List<InlineResponse2005>> localVarResponse = await UsersListForOrgAsyncWithHttpInfo(orgName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of users that belong to an organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2005&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2005>>> UsersListForOrgAsyncWithHttpInfo (string orgName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->UsersListForOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersListForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2005>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2005>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2005>)));
        }

        /// <summary>
        ///  Removes a user from an organization.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns></returns>
        public void UsersRemoveFromOrg (string orgName, string userName)
        {
             UsersRemoveFromOrgWithHttpInfo(orgName, userName);
        }

        /// <summary>
        ///  Removes a user from an organization.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersRemoveFromOrgWithHttpInfo (string orgName, string userName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->UsersRemoveFromOrg");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling AccountApi->UsersRemoveFromOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/users/{user_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (userName != null) localVarPathParams.Add("user_name", this.Configuration.ApiClient.ParameterToString(userName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersRemoveFromOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a user from an organization.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersRemoveFromOrgAsync (string orgName, string userName)
        {
             await UsersRemoveFromOrgAsyncWithHttpInfo(orgName, userName);

        }

        /// <summary>
        ///  Removes a user from an organization.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersRemoveFromOrgAsyncWithHttpInfo (string orgName, string userName)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->UsersRemoveFromOrg");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling AccountApi->UsersRemoveFromOrg");

            var localVarPath = "/v0.1/orgs/{org_name}/users/{user_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (userName != null) localVarPathParams.Add("user_name", this.Configuration.ApiClient.ParameterToString(userName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersRemoveFromOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Updates the user profile and returns the updated user data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the created user</param>
        /// <returns>Object</returns>
        public Object UsersUpdate (V01UserBody body)
        {
             ApiResponse<Object> localVarResponse = UsersUpdateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates the user profile and returns the updated user data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the created user</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UsersUpdateWithHttpInfo (V01UserBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->UsersUpdate");

            var localVarPath = "/v0.1/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Updates the user profile and returns the updated user data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the created user</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UsersUpdateAsync (V01UserBody body)
        {
             ApiResponse<Object> localVarResponse = await UsersUpdateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates the user profile and returns the updated user data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The data for the created user</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersUpdateAsyncWithHttpInfo (V01UserBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->UsersUpdate");

            var localVarPath = "/v0.1/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Updates the given organization user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Object</returns>
        public Object UsersUpdateOrgRole (UsersUserNameBody body, string orgName, string userName)
        {
             ApiResponse<Object> localVarResponse = UsersUpdateOrgRoleWithHttpInfo(body, orgName, userName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates the given organization user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UsersUpdateOrgRoleWithHttpInfo (UsersUserNameBody body, string orgName, string userName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->UsersUpdateOrgRole");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->UsersUpdateOrgRole");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling AccountApi->UsersUpdateOrgRole");

            var localVarPath = "/v0.1/orgs/{org_name}/users/{user_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (userName != null) localVarPathParams.Add("user_name", this.Configuration.ApiClient.ParameterToString(userName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdateOrgRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Updates the given organization user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UsersUpdateOrgRoleAsync (UsersUserNameBody body, string orgName, string userName)
        {
             ApiResponse<Object> localVarResponse = await UsersUpdateOrgRoleAsyncWithHttpInfo(body, orgName, userName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates the given organization user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="orgName">The organization&#x27;s name</param>
        /// <param name="userName">The slug name of the user</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersUpdateOrgRoleAsyncWithHttpInfo (UsersUserNameBody body, string orgName, string userName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountApi->UsersUpdateOrgRole");
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling AccountApi->UsersUpdateOrgRole");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling AccountApi->UsersUpdateOrgRole");

            var localVarPath = "/v0.1/orgs/{org_name}/users/{user_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (userName != null) localVarPathParams.Add("user_name", this.Configuration.ApiClient.ParameterToString(userName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdateOrgRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
