/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAnalyticsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns whether audience definition exists.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void AnalyticsAudienceNameExists (string audienceName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns whether audience definition exists.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AnalyticsAudienceNameExistsWithHttpInfo (string audienceName, string ownerName, string appName);
        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20095</returns>
        InlineResponse20095 AnalyticsCrashCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20095</returns>
        ApiResponse<InlineResponse20095> AnalyticsCrashCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>InlineResponse20091</returns>
        InlineResponse20091 AnalyticsCrashFreeDevicePercentages (DateTime? start, string version, string ownerName, string appName, DateTime? end = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20091</returns>
        ApiResponse<InlineResponse20091> AnalyticsCrashFreeDevicePercentagesWithHttpInfo (DateTime? start, string version, string ownerName, string appName, DateTime? end = null);
        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>InlineResponse20095</returns>
        InlineResponse20095 AnalyticsCrashGroupCounts (string crashGroupId, string version, DateTime? start, string ownerName, string appName, DateTime? end = null);

        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20095</returns>
        ApiResponse<InlineResponse20095> AnalyticsCrashGroupCountsWithHttpInfo (string crashGroupId, string version, DateTime? start, string ownerName, string appName, DateTime? end = null);
        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Top models of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>InlineResponse20094</returns>
        InlineResponse20094 AnalyticsCrashGroupModelCounts (string crashGroupId, string version, string ownerName, string appName, long? top = null);

        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Top models of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>ApiResponse of InlineResponse20094</returns>
        ApiResponse<InlineResponse20094> AnalyticsCrashGroupModelCountsWithHttpInfo (string crashGroupId, string version, string ownerName, string appName, long? top = null);
        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Top OSes of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>InlineResponse20093</returns>
        InlineResponse20093 AnalyticsCrashGroupOperatingSystemCounts (string crashGroupId, string version, string ownerName, string appName, long? top = null);

        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Top OSes of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>ApiResponse of InlineResponse20093</returns>
        ApiResponse<InlineResponse20093> AnalyticsCrashGroupOperatingSystemCountsWithHttpInfo (string crashGroupId, string version, string ownerName, string appName, long? top = null);
        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20092</returns>
        InlineResponse20092 AnalyticsCrashGroupTotals (string crashGroupId, string version, string ownerName, string appName);

        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20092</returns>
        ApiResponse<InlineResponse20092> AnalyticsCrashGroupTotalsWithHttpInfo (string crashGroupId, string version, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Overall crashes and affected users count of the selected crash groups with selected versions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20096&gt;</returns>
        List<InlineResponse20096> AnalyticsCrashGroupsTotals (AnalyticsCrashGroupsBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Overall crashes and affected users count of the selected crash groups with selected versions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20096&gt;</returns>
        ApiResponse<List<InlineResponse20096>> AnalyticsCrashGroupsTotalsWithHttpInfo (AnalyticsCrashGroupsBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object AnalyticsCreateOrUpdateAudience (AudiencesAudienceNameBody body, string audienceName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyticsCreateOrUpdateAudienceWithHttpInfo (AudiencesAudienceNameBody body, string audienceName, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void AnalyticsDeleteAudience (string audienceName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AnalyticsDeleteAudienceWithHttpInfo (string audienceName, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of active devices by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="appBuild">Application build number. If build number is specified than multiple versions are not allowed. (optional)</param>
        /// <returns>Object</returns>
        Object AnalyticsDeviceCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of active devices by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="appBuild">Application build number. If build number is specified than multiple versions are not allowed. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyticsDeviceCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of total downloads for the provided distribution releases.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The releases to retrieve.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20090</returns>
        InlineResponse20090 AnalyticsDistributionReleaseCounts (DistributionReleaseCountsBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of total downloads for the provided distribution releases.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The releases to retrieve.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20090</returns>
        ApiResponse<InlineResponse20090> AnalyticsDistributionReleaseCountsWithHttpInfo (DistributionReleaseCountsBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of events by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20086</returns>
        InlineResponse20086 AnalyticsEventCount (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of events by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20086</returns>
        ApiResponse<InlineResponse20086> AnalyticsEventCountWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of devices for an event by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20087</returns>
        InlineResponse20087 AnalyticsEventDeviceCount (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of devices for an event by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20087</returns>
        ApiResponse<InlineResponse20087> AnalyticsEventDeviceCountWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of events per device by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20089</returns>
        InlineResponse20089 AnalyticsEventPerDeviceCount (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of events per device by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20089</returns>
        ApiResponse<InlineResponse20089> AnalyticsEventPerDeviceCountWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of events per session by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20088</returns>
        InlineResponse20088 AnalyticsEventPerSessionCount (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of events per session by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20088</returns>
        ApiResponse<InlineResponse20088> AnalyticsEventPerSessionCountWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Event properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20085</returns>
        InlineResponse20085 AnalyticsEventProperties (string eventName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Event properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20085</returns>
        ApiResponse<InlineResponse20085> AnalyticsEventPropertiesWithHttpInfo (string eventName, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Event properties value counts during the time range in descending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="eventPropertyName">The id of the event property.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="top">The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)</param>
        /// <returns>InlineResponse20084</returns>
        InlineResponse20084 AnalyticsEventPropertyCounts (string eventName, string eventPropertyName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, long? top = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Event properties value counts during the time range in descending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="eventPropertyName">The id of the event property.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="top">The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)</param>
        /// <returns>ApiResponse of InlineResponse20084</returns>
        ApiResponse<InlineResponse20084> AnalyticsEventPropertyCountsWithHttpInfo (string eventName, string eventPropertyName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, long? top = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of active events in the time range ordered by event.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="eventName">To select the specific events. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <returns>Object</returns>
        Object AnalyticsEvents (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, List<string> eventName = null, long? top = null, long? skip = null, string inlinecount = null, string orderby = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of active events in the time range ordered by event.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="eventName">To select the specific events. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyticsEventsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, List<string> eventName = null, long? top = null, long? skip = null, string inlinecount = null, string orderby = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the set of Events with the specified event names.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void AnalyticsEventsDelete (string eventName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the set of Events with the specified event names.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AnalyticsEventsDeleteWithHttpInfo (string eventName, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the set of Events with the specified event names.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void AnalyticsEventsDeleteLogs (string eventName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the set of Events with the specified event names.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AnalyticsEventsDeleteLogsWithHttpInfo (string eventName, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>InlineResponse20083</returns>
        InlineResponse20083 AnalyticsGenericLogFlow (string ownerName, string appName, DateTime? start = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20083</returns>
        ApiResponse<InlineResponse20083> AnalyticsGenericLogFlowWithHttpInfo (string ownerName, string appName, DateTime? start = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object AnalyticsGetAudience (string audienceName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyticsGetAudienceWithHttpInfo (string audienceName, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Languages in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20082</returns>
        InlineResponse20082 AnalyticsLanguageCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Languages in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20082</returns>
        ApiResponse<InlineResponse20082> AnalyticsLanguageCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of audiences.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeDisabled">Include disabled audience definitions (optional)</param>
        /// <returns>Object</returns>
        Object AnalyticsListAudiences (string ownerName, string appName, bool? includeDisabled = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of audiences.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeDisabled">Include disabled audience definitions (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyticsListAudiencesWithHttpInfo (string ownerName, string appName, bool? includeDisabled = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of custom properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object AnalyticsListCustomProperties (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of custom properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyticsListCustomPropertiesWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of device properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object AnalyticsListDeviceProperties (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of device properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyticsListDevicePropertiesWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of device property values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">Device property</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="contains">Contains string (optional)</param>
        /// <returns>Object</returns>
        Object AnalyticsListDevicePropertyValues (string propertyName, string ownerName, string appName, string contains = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of device property values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">Device property</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="contains">Contains string (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyticsListDevicePropertyValuesWithHttpInfo (string propertyName, string ownerName, string appName, string contains = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>InlineResponse20081</returns>
        InlineResponse20081 AnalyticsLogFlow (string ownerName, string appName, DateTime? start = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20081</returns>
        ApiResponse<InlineResponse20081> AnalyticsLogFlowWithHttpInfo (string ownerName, string appName, DateTime? start = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Models in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20080</returns>
        InlineResponse20080 AnalyticsModelCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Models in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20080</returns>
        ApiResponse<InlineResponse20080> AnalyticsModelCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// OSes in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20079</returns>
        InlineResponse20079 AnalyticsOperatingSystemCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// OSes in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        ApiResponse<InlineResponse20079> AnalyticsOperatingSystemCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of sessions per device in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20076</returns>
        InlineResponse20076 AnalyticsPerDeviceCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of sessions per device in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20076</returns>
        ApiResponse<InlineResponse20076> AnalyticsPerDeviceCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Places in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Object</returns>
        Object AnalyticsPlaceCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Places in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyticsPlaceCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of sessions in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>List&lt;InlineResponse20078&gt;</returns>
        List<InlineResponse20078> AnalyticsSessionCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of sessions in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20078&gt;</returns>
        ApiResponse<List<InlineResponse20078>> AnalyticsSessionCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets session duration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20077</returns>
        InlineResponse20077 AnalyticsSessionDurationsDistribution (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets session duration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20077</returns>
        ApiResponse<InlineResponse20077> AnalyticsSessionDurationsDistributionWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Tests audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        Object AnalyticsTestAudience (DefinitionTestBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Tests audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyticsTestAudienceWithHttpInfo (DefinitionTestBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of active versions in the time range ordered by version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Object</returns>
        Object AnalyticsVersions (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of active versions in the time range ordered by version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyticsVersionsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>string</returns>
        string AppBlockLogs (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AppBlockLogsWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get session logs by crash ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">The id of the a crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>InlineResponse20065</returns>
        InlineResponse20065 CrashesListSessionLogs (string crashId, string ownerName, string appName, DateTime? date = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get session logs by crash ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">The id of the a crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        ApiResponse<InlineResponse20065> CrashesListSessionLogsWithHttpInfo (string crashId, string ownerName, string appName, DateTime? date = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installId">The id of the device</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>string</returns>
        string DevicesBlockLogs (string installId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installId">The id of the device</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DevicesBlockLogsWithHttpInfo (string installId, string ownerName, string appName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns whether audience definition exists.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AnalyticsAudienceNameExistsAsync (string audienceName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns whether audience definition exists.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsAudienceNameExistsAsyncWithHttpInfo (string audienceName, string ownerName, string appName);
        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20095</returns>
        System.Threading.Tasks.Task<InlineResponse20095> AnalyticsCrashCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20095)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20095>> AnalyticsCrashCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>Task of InlineResponse20091</returns>
        System.Threading.Tasks.Task<InlineResponse20091> AnalyticsCrashFreeDevicePercentagesAsync (DateTime? start, string version, string ownerName, string appName, DateTime? end = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20091)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20091>> AnalyticsCrashFreeDevicePercentagesAsyncWithHttpInfo (DateTime? start, string version, string ownerName, string appName, DateTime? end = null);
        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>Task of InlineResponse20095</returns>
        System.Threading.Tasks.Task<InlineResponse20095> AnalyticsCrashGroupCountsAsync (string crashGroupId, string version, DateTime? start, string ownerName, string appName, DateTime? end = null);

        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20095)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20095>> AnalyticsCrashGroupCountsAsyncWithHttpInfo (string crashGroupId, string version, DateTime? start, string ownerName, string appName, DateTime? end = null);
        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Top models of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>Task of InlineResponse20094</returns>
        System.Threading.Tasks.Task<InlineResponse20094> AnalyticsCrashGroupModelCountsAsync (string crashGroupId, string version, string ownerName, string appName, long? top = null);

        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Top models of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (InlineResponse20094)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20094>> AnalyticsCrashGroupModelCountsAsyncWithHttpInfo (string crashGroupId, string version, string ownerName, string appName, long? top = null);
        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Top OSes of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>Task of InlineResponse20093</returns>
        System.Threading.Tasks.Task<InlineResponse20093> AnalyticsCrashGroupOperatingSystemCountsAsync (string crashGroupId, string version, string ownerName, string appName, long? top = null);

        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Top OSes of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (InlineResponse20093)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20093>> AnalyticsCrashGroupOperatingSystemCountsAsyncWithHttpInfo (string crashGroupId, string version, string ownerName, string appName, long? top = null);
        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20092</returns>
        System.Threading.Tasks.Task<InlineResponse20092> AnalyticsCrashGroupTotalsAsync (string crashGroupId, string version, string ownerName, string appName);

        /// <summary>
        /// Available for UWP apps only.
        /// </summary>
        /// <remarks>
        /// Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20092)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20092>> AnalyticsCrashGroupTotalsAsyncWithHttpInfo (string crashGroupId, string version, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Overall crashes and affected users count of the selected crash groups with selected versions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20096&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20096>> AnalyticsCrashGroupsTotalsAsync (AnalyticsCrashGroupsBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Overall crashes and affected users count of the selected crash groups with selected versions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20096&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20096>>> AnalyticsCrashGroupsTotalsAsyncWithHttpInfo (AnalyticsCrashGroupsBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyticsCreateOrUpdateAudienceAsync (AudiencesAudienceNameBody body, string audienceName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsCreateOrUpdateAudienceAsyncWithHttpInfo (AudiencesAudienceNameBody body, string audienceName, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AnalyticsDeleteAudienceAsync (string audienceName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsDeleteAudienceAsyncWithHttpInfo (string audienceName, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of active devices by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="appBuild">Application build number. If build number is specified than multiple versions are not allowed. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyticsDeviceCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of active devices by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="appBuild">Application build number. If build number is specified than multiple versions are not allowed. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsDeviceCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of total downloads for the provided distribution releases.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The releases to retrieve.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20090</returns>
        System.Threading.Tasks.Task<InlineResponse20090> AnalyticsDistributionReleaseCountsAsync (DistributionReleaseCountsBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of total downloads for the provided distribution releases.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The releases to retrieve.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20090)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20090>> AnalyticsDistributionReleaseCountsAsyncWithHttpInfo (DistributionReleaseCountsBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of events by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20086</returns>
        System.Threading.Tasks.Task<InlineResponse20086> AnalyticsEventCountAsync (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of events by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20086)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20086>> AnalyticsEventCountAsyncWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of devices for an event by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20087</returns>
        System.Threading.Tasks.Task<InlineResponse20087> AnalyticsEventDeviceCountAsync (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of devices for an event by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20087)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20087>> AnalyticsEventDeviceCountAsyncWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of events per device by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20089</returns>
        System.Threading.Tasks.Task<InlineResponse20089> AnalyticsEventPerDeviceCountAsync (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of events per device by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20089)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20089>> AnalyticsEventPerDeviceCountAsyncWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of events per session by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20088</returns>
        System.Threading.Tasks.Task<InlineResponse20088> AnalyticsEventPerSessionCountAsync (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of events per session by interval in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20088)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20088>> AnalyticsEventPerSessionCountAsyncWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Event properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20085</returns>
        System.Threading.Tasks.Task<InlineResponse20085> AnalyticsEventPropertiesAsync (string eventName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Event properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20085)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20085>> AnalyticsEventPropertiesAsyncWithHttpInfo (string eventName, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Event properties value counts during the time range in descending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="eventPropertyName">The id of the event property.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="top">The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)</param>
        /// <returns>Task of InlineResponse20084</returns>
        System.Threading.Tasks.Task<InlineResponse20084> AnalyticsEventPropertyCountsAsync (string eventName, string eventPropertyName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, long? top = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Event properties value counts during the time range in descending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="eventPropertyName">The id of the event property.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="top">The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (InlineResponse20084)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20084>> AnalyticsEventPropertyCountsAsyncWithHttpInfo (string eventName, string eventPropertyName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, long? top = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of active events in the time range ordered by event.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="eventName">To select the specific events. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyticsEventsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, List<string> eventName = null, long? top = null, long? skip = null, string inlinecount = null, string orderby = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of active events in the time range ordered by event.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="eventName">To select the specific events. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsEventsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, List<string> eventName = null, long? top = null, long? skip = null, string inlinecount = null, string orderby = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the set of Events with the specified event names.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AnalyticsEventsDeleteAsync (string eventName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the set of Events with the specified event names.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsEventsDeleteAsyncWithHttpInfo (string eventName, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the set of Events with the specified event names.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AnalyticsEventsDeleteLogsAsync (string eventName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the set of Events with the specified event names.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsEventsDeleteLogsAsyncWithHttpInfo (string eventName, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>Task of InlineResponse20083</returns>
        System.Threading.Tasks.Task<InlineResponse20083> AnalyticsGenericLogFlowAsync (string ownerName, string appName, DateTime? start = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20083)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20083>> AnalyticsGenericLogFlowAsyncWithHttpInfo (string ownerName, string appName, DateTime? start = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyticsGetAudienceAsync (string audienceName, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsGetAudienceAsyncWithHttpInfo (string audienceName, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Languages in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20082</returns>
        System.Threading.Tasks.Task<InlineResponse20082> AnalyticsLanguageCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Languages in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20082)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20082>> AnalyticsLanguageCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of audiences.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeDisabled">Include disabled audience definitions (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyticsListAudiencesAsync (string ownerName, string appName, bool? includeDisabled = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of audiences.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeDisabled">Include disabled audience definitions (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsListAudiencesAsyncWithHttpInfo (string ownerName, string appName, bool? includeDisabled = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of custom properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyticsListCustomPropertiesAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of custom properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsListCustomPropertiesAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of device properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyticsListDevicePropertiesAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of device properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsListDevicePropertiesAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of device property values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">Device property</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="contains">Contains string (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyticsListDevicePropertyValuesAsync (string propertyName, string ownerName, string appName, string contains = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of device property values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">Device property</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="contains">Contains string (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsListDevicePropertyValuesAsyncWithHttpInfo (string propertyName, string ownerName, string appName, string contains = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>Task of InlineResponse20081</returns>
        System.Threading.Tasks.Task<InlineResponse20081> AnalyticsLogFlowAsync (string ownerName, string appName, DateTime? start = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20081)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20081>> AnalyticsLogFlowAsyncWithHttpInfo (string ownerName, string appName, DateTime? start = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Models in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20080</returns>
        System.Threading.Tasks.Task<InlineResponse20080> AnalyticsModelCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Models in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20080)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20080>> AnalyticsModelCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// OSes in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20079</returns>
        System.Threading.Tasks.Task<InlineResponse20079> AnalyticsOperatingSystemCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// OSes in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> AnalyticsOperatingSystemCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of sessions per device in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20076</returns>
        System.Threading.Tasks.Task<InlineResponse20076> AnalyticsPerDeviceCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of sessions per device in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20076)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20076>> AnalyticsPerDeviceCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Places in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyticsPlaceCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Places in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsPlaceCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of sessions in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of List&lt;InlineResponse20078&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20078>> AnalyticsSessionCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of sessions in the time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20078&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20078>>> AnalyticsSessionCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets session duration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20077</returns>
        System.Threading.Tasks.Task<InlineResponse20077> AnalyticsSessionDurationsDistributionAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets session duration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20077)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20077>> AnalyticsSessionDurationsDistributionAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Tests audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyticsTestAudienceAsync (DefinitionTestBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Tests audience definition.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsTestAudienceAsyncWithHttpInfo (DefinitionTestBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of active versions in the time range ordered by version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyticsVersionsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count of active versions in the time range ordered by version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsVersionsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AppBlockLogsAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AppBlockLogsAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get session logs by crash ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">The id of the a crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>Task of InlineResponse20065</returns>
        System.Threading.Tasks.Task<InlineResponse20065> CrashesListSessionLogsAsync (string crashId, string ownerName, string appName, DateTime? date = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get session logs by crash ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">The id of the a crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20065>> CrashesListSessionLogsAsyncWithHttpInfo (string crashId, string ownerName, string appName, DateTime? date = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installId">The id of the device</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DevicesBlockLogsAsync (string installId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installId">The id of the device</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DevicesBlockLogsAsyncWithHttpInfo (string installId, string ownerName, string appName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AnalyticsApi : IAnalyticsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalyticsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AnalyticsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnalyticsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns whether audience definition exists.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void AnalyticsAudienceNameExists (string audienceName, string ownerName, string appName)
        {
             AnalyticsAudienceNameExistsWithHttpInfo(audienceName, ownerName, appName);
        }

        /// <summary>
        ///  Returns whether audience definition exists.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AnalyticsAudienceNameExistsWithHttpInfo (string audienceName, string ownerName, string appName)
        {
            // verify the required parameter 'audienceName' is set
            if (audienceName == null)
                throw new ApiException(400, "Missing required parameter 'audienceName' when calling AnalyticsApi->AnalyticsAudienceNameExists");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsAudienceNameExists");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsAudienceNameExists");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (audienceName != null) localVarPathParams.Add("audience_name", this.Configuration.ApiClient.ParameterToString(audienceName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsAudienceNameExists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns whether audience definition exists.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AnalyticsAudienceNameExistsAsync (string audienceName, string ownerName, string appName)
        {
             await AnalyticsAudienceNameExistsAsyncWithHttpInfo(audienceName, ownerName, appName);

        }

        /// <summary>
        ///  Returns whether audience definition exists.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsAudienceNameExistsAsyncWithHttpInfo (string audienceName, string ownerName, string appName)
        {
            // verify the required parameter 'audienceName' is set
            if (audienceName == null)
                throw new ApiException(400, "Missing required parameter 'audienceName' when calling AnalyticsApi->AnalyticsAudienceNameExists");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsAudienceNameExists");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsAudienceNameExists");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (audienceName != null) localVarPathParams.Add("audience_name", this.Configuration.ApiClient.ParameterToString(audienceName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsAudienceNameExists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Available for UWP apps only. Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20095</returns>
        public InlineResponse20095 AnalyticsCrashCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20095> localVarResponse = AnalyticsCrashCountsWithHttpInfo(start, ownerName, appName, end, versions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Available for UWP apps only. Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20095</returns>
        public ApiResponse< InlineResponse20095 > AnalyticsCrashCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsCrashCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20095>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20095) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20095)));
        }

        /// <summary>
        /// Available for UWP apps only. Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20095</returns>
        public async System.Threading.Tasks.Task<InlineResponse20095> AnalyticsCrashCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20095> localVarResponse = await AnalyticsCrashCountsAsyncWithHttpInfo(start, ownerName, appName, end, versions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Available for UWP apps only. Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20095)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20095>> AnalyticsCrashCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsCrashCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20095>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20095) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20095)));
        }

        /// <summary>
        ///  Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>InlineResponse20091</returns>
        public InlineResponse20091 AnalyticsCrashFreeDevicePercentages (DateTime? start, string version, string ownerName, string appName, DateTime? end = null)
        {
             ApiResponse<InlineResponse20091> localVarResponse = AnalyticsCrashFreeDevicePercentagesWithHttpInfo(start, version, ownerName, appName, end);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20091</returns>
        public ApiResponse< InlineResponse20091 > AnalyticsCrashFreeDevicePercentagesWithHttpInfo (DateTime? start, string version, string ownerName, string appName, DateTime? end = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsCrashFreeDevicePercentages");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AnalyticsApi->AnalyticsCrashFreeDevicePercentages");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashFreeDevicePercentages");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashFreeDevicePercentages");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashFreeDevicePercentages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20091>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20091) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20091)));
        }

        /// <summary>
        ///  Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>Task of InlineResponse20091</returns>
        public async System.Threading.Tasks.Task<InlineResponse20091> AnalyticsCrashFreeDevicePercentagesAsync (DateTime? start, string version, string ownerName, string appName, DateTime? end = null)
        {
             ApiResponse<InlineResponse20091> localVarResponse = await AnalyticsCrashFreeDevicePercentagesAsyncWithHttpInfo(start, version, ownerName, appName, end);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20091)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20091>> AnalyticsCrashFreeDevicePercentagesAsyncWithHttpInfo (DateTime? start, string version, string ownerName, string appName, DateTime? end = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsCrashFreeDevicePercentages");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AnalyticsApi->AnalyticsCrashFreeDevicePercentages");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashFreeDevicePercentages");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashFreeDevicePercentages");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashFreeDevicePercentages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20091>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20091) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20091)));
        }

        /// <summary>
        /// Available for UWP apps only. Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>InlineResponse20095</returns>
        public InlineResponse20095 AnalyticsCrashGroupCounts (string crashGroupId, string version, DateTime? start, string ownerName, string appName, DateTime? end = null)
        {
             ApiResponse<InlineResponse20095> localVarResponse = AnalyticsCrashGroupCountsWithHttpInfo(crashGroupId, version, start, ownerName, appName, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Available for UWP apps only. Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20095</returns>
        public ApiResponse< InlineResponse20095 > AnalyticsCrashGroupCountsWithHttpInfo (string crashGroupId, string version, DateTime? start, string ownerName, string appName, DateTime? end = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling AnalyticsApi->AnalyticsCrashGroupCounts");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AnalyticsApi->AnalyticsCrashGroupCounts");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsCrashGroupCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashGroupCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashGroupCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashGroupCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20095>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20095) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20095)));
        }

        /// <summary>
        /// Available for UWP apps only. Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>Task of InlineResponse20095</returns>
        public async System.Threading.Tasks.Task<InlineResponse20095> AnalyticsCrashGroupCountsAsync (string crashGroupId, string version, DateTime? start, string ownerName, string appName, DateTime? end = null)
        {
             ApiResponse<InlineResponse20095> localVarResponse = await AnalyticsCrashGroupCountsAsyncWithHttpInfo(crashGroupId, version, start, ownerName, appName, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Available for UWP apps only. Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20095)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20095>> AnalyticsCrashGroupCountsAsyncWithHttpInfo (string crashGroupId, string version, DateTime? start, string ownerName, string appName, DateTime? end = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling AnalyticsApi->AnalyticsCrashGroupCounts");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AnalyticsApi->AnalyticsCrashGroupCounts");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsCrashGroupCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashGroupCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashGroupCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashGroupCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20095>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20095) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20095)));
        }

        /// <summary>
        /// Available for UWP apps only. Top models of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>InlineResponse20094</returns>
        public InlineResponse20094 AnalyticsCrashGroupModelCounts (string crashGroupId, string version, string ownerName, string appName, long? top = null)
        {
             ApiResponse<InlineResponse20094> localVarResponse = AnalyticsCrashGroupModelCountsWithHttpInfo(crashGroupId, version, ownerName, appName, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Available for UWP apps only. Top models of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>ApiResponse of InlineResponse20094</returns>
        public ApiResponse< InlineResponse20094 > AnalyticsCrashGroupModelCountsWithHttpInfo (string crashGroupId, string version, string ownerName, string appName, long? top = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling AnalyticsApi->AnalyticsCrashGroupModelCounts");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AnalyticsApi->AnalyticsCrashGroupModelCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashGroupModelCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashGroupModelCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashGroupModelCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20094>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20094) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20094)));
        }

        /// <summary>
        /// Available for UWP apps only. Top models of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>Task of InlineResponse20094</returns>
        public async System.Threading.Tasks.Task<InlineResponse20094> AnalyticsCrashGroupModelCountsAsync (string crashGroupId, string version, string ownerName, string appName, long? top = null)
        {
             ApiResponse<InlineResponse20094> localVarResponse = await AnalyticsCrashGroupModelCountsAsyncWithHttpInfo(crashGroupId, version, ownerName, appName, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Available for UWP apps only. Top models of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (InlineResponse20094)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20094>> AnalyticsCrashGroupModelCountsAsyncWithHttpInfo (string crashGroupId, string version, string ownerName, string appName, long? top = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling AnalyticsApi->AnalyticsCrashGroupModelCounts");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AnalyticsApi->AnalyticsCrashGroupModelCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashGroupModelCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashGroupModelCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashGroupModelCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20094>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20094) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20094)));
        }

        /// <summary>
        /// Available for UWP apps only. Top OSes of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>InlineResponse20093</returns>
        public InlineResponse20093 AnalyticsCrashGroupOperatingSystemCounts (string crashGroupId, string version, string ownerName, string appName, long? top = null)
        {
             ApiResponse<InlineResponse20093> localVarResponse = AnalyticsCrashGroupOperatingSystemCountsWithHttpInfo(crashGroupId, version, ownerName, appName, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Available for UWP apps only. Top OSes of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>ApiResponse of InlineResponse20093</returns>
        public ApiResponse< InlineResponse20093 > AnalyticsCrashGroupOperatingSystemCountsWithHttpInfo (string crashGroupId, string version, string ownerName, string appName, long? top = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling AnalyticsApi->AnalyticsCrashGroupOperatingSystemCounts");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AnalyticsApi->AnalyticsCrashGroupOperatingSystemCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashGroupOperatingSystemCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashGroupOperatingSystemCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashGroupOperatingSystemCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20093>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20093) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20093)));
        }

        /// <summary>
        /// Available for UWP apps only. Top OSes of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>Task of InlineResponse20093</returns>
        public async System.Threading.Tasks.Task<InlineResponse20093> AnalyticsCrashGroupOperatingSystemCountsAsync (string crashGroupId, string version, string ownerName, string appName, long? top = null)
        {
             ApiResponse<InlineResponse20093> localVarResponse = await AnalyticsCrashGroupOperatingSystemCountsAsyncWithHttpInfo(crashGroupId, version, ownerName, appName, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Available for UWP apps only. Top OSes of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (InlineResponse20093)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20093>> AnalyticsCrashGroupOperatingSystemCountsAsyncWithHttpInfo (string crashGroupId, string version, string ownerName, string appName, long? top = null)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling AnalyticsApi->AnalyticsCrashGroupOperatingSystemCounts");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AnalyticsApi->AnalyticsCrashGroupOperatingSystemCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashGroupOperatingSystemCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashGroupOperatingSystemCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashGroupOperatingSystemCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20093>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20093) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20093)));
        }

        /// <summary>
        /// Available for UWP apps only. Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20092</returns>
        public InlineResponse20092 AnalyticsCrashGroupTotals (string crashGroupId, string version, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20092> localVarResponse = AnalyticsCrashGroupTotalsWithHttpInfo(crashGroupId, version, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Available for UWP apps only. Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20092</returns>
        public ApiResponse< InlineResponse20092 > AnalyticsCrashGroupTotalsWithHttpInfo (string crashGroupId, string version, string ownerName, string appName)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling AnalyticsApi->AnalyticsCrashGroupTotals");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AnalyticsApi->AnalyticsCrashGroupTotals");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashGroupTotals");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashGroupTotals");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashGroupTotals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20092>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20092) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20092)));
        }

        /// <summary>
        /// Available for UWP apps only. Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20092</returns>
        public async System.Threading.Tasks.Task<InlineResponse20092> AnalyticsCrashGroupTotalsAsync (string crashGroupId, string version, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20092> localVarResponse = await AnalyticsCrashGroupTotalsAsyncWithHttpInfo(crashGroupId, version, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Available for UWP apps only. Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashGroupId">The id of the crash group.</param>
        /// <param name="version"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20092)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20092>> AnalyticsCrashGroupTotalsAsyncWithHttpInfo (string crashGroupId, string version, string ownerName, string appName)
        {
            // verify the required parameter 'crashGroupId' is set
            if (crashGroupId == null)
                throw new ApiException(400, "Missing required parameter 'crashGroupId' when calling AnalyticsApi->AnalyticsCrashGroupTotals");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AnalyticsApi->AnalyticsCrashGroupTotals");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashGroupTotals");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashGroupTotals");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashGroupId != null) localVarPathParams.Add("crash_group_id", this.Configuration.ApiClient.ParameterToString(crashGroupId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashGroupTotals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20092>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20092) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20092)));
        }

        /// <summary>
        ///  Overall crashes and affected users count of the selected crash groups with selected versions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>List&lt;InlineResponse20096&gt;</returns>
        public List<InlineResponse20096> AnalyticsCrashGroupsTotals (AnalyticsCrashGroupsBody body, string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20096>> localVarResponse = AnalyticsCrashGroupsTotalsWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Overall crashes and affected users count of the selected crash groups with selected versions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20096&gt;</returns>
        public ApiResponse< List<InlineResponse20096> > AnalyticsCrashGroupsTotalsWithHttpInfo (AnalyticsCrashGroupsBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AnalyticsApi->AnalyticsCrashGroupsTotals");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashGroupsTotals");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashGroupsTotals");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashGroupsTotals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20096>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20096>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20096>)));
        }

        /// <summary>
        ///  Overall crashes and affected users count of the selected crash groups with selected versions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of List&lt;InlineResponse20096&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20096>> AnalyticsCrashGroupsTotalsAsync (AnalyticsCrashGroupsBody body, string ownerName, string appName)
        {
             ApiResponse<List<InlineResponse20096>> localVarResponse = await AnalyticsCrashGroupsTotalsAsyncWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Overall crashes and affected users count of the selected crash groups with selected versions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20096&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20096>>> AnalyticsCrashGroupsTotalsAsyncWithHttpInfo (AnalyticsCrashGroupsBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AnalyticsApi->AnalyticsCrashGroupsTotals");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCrashGroupsTotals");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCrashGroupsTotals");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCrashGroupsTotals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20096>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20096>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20096>)));
        }

        /// <summary>
        ///  Creates or updates audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object AnalyticsCreateOrUpdateAudience (AudiencesAudienceNameBody body, string audienceName, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = AnalyticsCreateOrUpdateAudienceWithHttpInfo(body, audienceName, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates or updates audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AnalyticsCreateOrUpdateAudienceWithHttpInfo (AudiencesAudienceNameBody body, string audienceName, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AnalyticsApi->AnalyticsCreateOrUpdateAudience");
            // verify the required parameter 'audienceName' is set
            if (audienceName == null)
                throw new ApiException(400, "Missing required parameter 'audienceName' when calling AnalyticsApi->AnalyticsCreateOrUpdateAudience");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCreateOrUpdateAudience");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCreateOrUpdateAudience");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (audienceName != null) localVarPathParams.Add("audience_name", this.Configuration.ApiClient.ParameterToString(audienceName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCreateOrUpdateAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates or updates audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyticsCreateOrUpdateAudienceAsync (AudiencesAudienceNameBody body, string audienceName, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await AnalyticsCreateOrUpdateAudienceAsyncWithHttpInfo(body, audienceName, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates or updates audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsCreateOrUpdateAudienceAsyncWithHttpInfo (AudiencesAudienceNameBody body, string audienceName, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AnalyticsApi->AnalyticsCreateOrUpdateAudience");
            // verify the required parameter 'audienceName' is set
            if (audienceName == null)
                throw new ApiException(400, "Missing required parameter 'audienceName' when calling AnalyticsApi->AnalyticsCreateOrUpdateAudience");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsCreateOrUpdateAudience");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsCreateOrUpdateAudience");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (audienceName != null) localVarPathParams.Add("audience_name", this.Configuration.ApiClient.ParameterToString(audienceName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsCreateOrUpdateAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Deletes audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void AnalyticsDeleteAudience (string audienceName, string ownerName, string appName)
        {
             AnalyticsDeleteAudienceWithHttpInfo(audienceName, ownerName, appName);
        }

        /// <summary>
        ///  Deletes audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AnalyticsDeleteAudienceWithHttpInfo (string audienceName, string ownerName, string appName)
        {
            // verify the required parameter 'audienceName' is set
            if (audienceName == null)
                throw new ApiException(400, "Missing required parameter 'audienceName' when calling AnalyticsApi->AnalyticsDeleteAudience");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsDeleteAudience");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsDeleteAudience");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (audienceName != null) localVarPathParams.Add("audience_name", this.Configuration.ApiClient.ParameterToString(audienceName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsDeleteAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AnalyticsDeleteAudienceAsync (string audienceName, string ownerName, string appName)
        {
             await AnalyticsDeleteAudienceAsyncWithHttpInfo(audienceName, ownerName, appName);

        }

        /// <summary>
        ///  Deletes audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsDeleteAudienceAsyncWithHttpInfo (string audienceName, string ownerName, string appName)
        {
            // verify the required parameter 'audienceName' is set
            if (audienceName == null)
                throw new ApiException(400, "Missing required parameter 'audienceName' when calling AnalyticsApi->AnalyticsDeleteAudience");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsDeleteAudience");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsDeleteAudience");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (audienceName != null) localVarPathParams.Add("audience_name", this.Configuration.ApiClient.ParameterToString(audienceName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsDeleteAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Count of active devices by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="appBuild">Application build number. If build number is specified than multiple versions are not allowed. (optional)</param>
        /// <returns>Object</returns>
        public Object AnalyticsDeviceCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null)
        {
             ApiResponse<Object> localVarResponse = AnalyticsDeviceCountsWithHttpInfo(start, ownerName, appName, end, versions, appBuild);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Count of active devices by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="appBuild">Application build number. If build number is specified than multiple versions are not allowed. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AnalyticsDeviceCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsDeviceCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsDeviceCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsDeviceCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            if (appBuild != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_build", appBuild)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsDeviceCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Count of active devices by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="appBuild">Application build number. If build number is specified than multiple versions are not allowed. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyticsDeviceCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null)
        {
             ApiResponse<Object> localVarResponse = await AnalyticsDeviceCountsAsyncWithHttpInfo(start, ownerName, appName, end, versions, appBuild);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Count of active devices by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="appBuild">Application build number. If build number is specified than multiple versions are not allowed. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsDeviceCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, string appBuild = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsDeviceCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsDeviceCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsDeviceCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            if (appBuild != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_build", appBuild)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsDeviceCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Count of total downloads for the provided distribution releases.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The releases to retrieve.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20090</returns>
        public InlineResponse20090 AnalyticsDistributionReleaseCounts (DistributionReleaseCountsBody body, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20090> localVarResponse = AnalyticsDistributionReleaseCountsWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Count of total downloads for the provided distribution releases.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The releases to retrieve.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20090</returns>
        public ApiResponse< InlineResponse20090 > AnalyticsDistributionReleaseCountsWithHttpInfo (DistributionReleaseCountsBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AnalyticsApi->AnalyticsDistributionReleaseCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsDistributionReleaseCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsDistributionReleaseCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsDistributionReleaseCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20090>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20090) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20090)));
        }

        /// <summary>
        ///  Count of total downloads for the provided distribution releases.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The releases to retrieve.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20090</returns>
        public async System.Threading.Tasks.Task<InlineResponse20090> AnalyticsDistributionReleaseCountsAsync (DistributionReleaseCountsBody body, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20090> localVarResponse = await AnalyticsDistributionReleaseCountsAsyncWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Count of total downloads for the provided distribution releases.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The releases to retrieve.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20090)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20090>> AnalyticsDistributionReleaseCountsAsyncWithHttpInfo (DistributionReleaseCountsBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AnalyticsApi->AnalyticsDistributionReleaseCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsDistributionReleaseCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsDistributionReleaseCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsDistributionReleaseCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20090>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20090) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20090)));
        }

        /// <summary>
        ///  Count of events by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20086</returns>
        public InlineResponse20086 AnalyticsEventCount (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20086> localVarResponse = AnalyticsEventCountWithHttpInfo(eventName, start, ownerName, appName, end, versions);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Count of events by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20086</returns>
        public ApiResponse< InlineResponse20086 > AnalyticsEventCountWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventCount");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsEventCount");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventCount");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventCount");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20086>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20086) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20086)));
        }

        /// <summary>
        ///  Count of events by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20086</returns>
        public async System.Threading.Tasks.Task<InlineResponse20086> AnalyticsEventCountAsync (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20086> localVarResponse = await AnalyticsEventCountAsyncWithHttpInfo(eventName, start, ownerName, appName, end, versions);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Count of events by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20086)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20086>> AnalyticsEventCountAsyncWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventCount");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsEventCount");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventCount");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventCount");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20086>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20086) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20086)));
        }

        /// <summary>
        ///  Count of devices for an event by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20087</returns>
        public InlineResponse20087 AnalyticsEventDeviceCount (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20087> localVarResponse = AnalyticsEventDeviceCountWithHttpInfo(eventName, start, ownerName, appName, end, versions);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Count of devices for an event by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20087</returns>
        public ApiResponse< InlineResponse20087 > AnalyticsEventDeviceCountWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventDeviceCount");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsEventDeviceCount");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventDeviceCount");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventDeviceCount");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventDeviceCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20087>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20087) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20087)));
        }

        /// <summary>
        ///  Count of devices for an event by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20087</returns>
        public async System.Threading.Tasks.Task<InlineResponse20087> AnalyticsEventDeviceCountAsync (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20087> localVarResponse = await AnalyticsEventDeviceCountAsyncWithHttpInfo(eventName, start, ownerName, appName, end, versions);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Count of devices for an event by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20087)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20087>> AnalyticsEventDeviceCountAsyncWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventDeviceCount");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsEventDeviceCount");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventDeviceCount");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventDeviceCount");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventDeviceCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20087>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20087) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20087)));
        }

        /// <summary>
        ///  Count of events per device by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20089</returns>
        public InlineResponse20089 AnalyticsEventPerDeviceCount (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20089> localVarResponse = AnalyticsEventPerDeviceCountWithHttpInfo(eventName, start, ownerName, appName, end, versions);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Count of events per device by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20089</returns>
        public ApiResponse< InlineResponse20089 > AnalyticsEventPerDeviceCountWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventPerDeviceCount");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsEventPerDeviceCount");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventPerDeviceCount");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventPerDeviceCount");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventPerDeviceCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20089>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20089) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20089)));
        }

        /// <summary>
        ///  Count of events per device by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20089</returns>
        public async System.Threading.Tasks.Task<InlineResponse20089> AnalyticsEventPerDeviceCountAsync (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20089> localVarResponse = await AnalyticsEventPerDeviceCountAsyncWithHttpInfo(eventName, start, ownerName, appName, end, versions);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Count of events per device by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20089)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20089>> AnalyticsEventPerDeviceCountAsyncWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventPerDeviceCount");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsEventPerDeviceCount");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventPerDeviceCount");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventPerDeviceCount");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventPerDeviceCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20089>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20089) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20089)));
        }

        /// <summary>
        ///  Count of events per session by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20088</returns>
        public InlineResponse20088 AnalyticsEventPerSessionCount (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20088> localVarResponse = AnalyticsEventPerSessionCountWithHttpInfo(eventName, start, ownerName, appName, end, versions);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Count of events per session by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20088</returns>
        public ApiResponse< InlineResponse20088 > AnalyticsEventPerSessionCountWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventPerSessionCount");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsEventPerSessionCount");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventPerSessionCount");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventPerSessionCount");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventPerSessionCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20088>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20088) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20088)));
        }

        /// <summary>
        ///  Count of events per session by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20088</returns>
        public async System.Threading.Tasks.Task<InlineResponse20088> AnalyticsEventPerSessionCountAsync (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20088> localVarResponse = await AnalyticsEventPerSessionCountAsyncWithHttpInfo(eventName, start, ownerName, appName, end, versions);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Count of events per session by interval in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20088)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20088>> AnalyticsEventPerSessionCountAsyncWithHttpInfo (string eventName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventPerSessionCount");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsEventPerSessionCount");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventPerSessionCount");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventPerSessionCount");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventPerSessionCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20088>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20088) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20088)));
        }

        /// <summary>
        ///  Event properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20085</returns>
        public InlineResponse20085 AnalyticsEventProperties (string eventName, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20085> localVarResponse = AnalyticsEventPropertiesWithHttpInfo(eventName, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Event properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20085</returns>
        public ApiResponse< InlineResponse20085 > AnalyticsEventPropertiesWithHttpInfo (string eventName, string ownerName, string appName)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventProperties");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventProperties");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventProperties");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20085>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20085) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20085)));
        }

        /// <summary>
        ///  Event properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20085</returns>
        public async System.Threading.Tasks.Task<InlineResponse20085> AnalyticsEventPropertiesAsync (string eventName, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20085> localVarResponse = await AnalyticsEventPropertiesAsyncWithHttpInfo(eventName, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Event properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20085)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20085>> AnalyticsEventPropertiesAsyncWithHttpInfo (string eventName, string ownerName, string appName)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventProperties");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventProperties");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventProperties");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20085>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20085) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20085)));
        }

        /// <summary>
        ///  Event properties value counts during the time range in descending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="eventPropertyName">The id of the event property.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="top">The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)</param>
        /// <returns>InlineResponse20084</returns>
        public InlineResponse20084 AnalyticsEventPropertyCounts (string eventName, string eventPropertyName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, long? top = null)
        {
             ApiResponse<InlineResponse20084> localVarResponse = AnalyticsEventPropertyCountsWithHttpInfo(eventName, eventPropertyName, start, ownerName, appName, end, versions, top);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Event properties value counts during the time range in descending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="eventPropertyName">The id of the event property.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="top">The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)</param>
        /// <returns>ApiResponse of InlineResponse20084</returns>
        public ApiResponse< InlineResponse20084 > AnalyticsEventPropertyCountsWithHttpInfo (string eventName, string eventPropertyName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, long? top = null)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventPropertyCounts");
            // verify the required parameter 'eventPropertyName' is set
            if (eventPropertyName == null)
                throw new ApiException(400, "Missing required parameter 'eventPropertyName' when calling AnalyticsApi->AnalyticsEventPropertyCounts");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsEventPropertyCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventPropertyCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventPropertyCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (eventPropertyName != null) localVarPathParams.Add("event_property_name", this.Configuration.ApiClient.ParameterToString(eventPropertyName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventPropertyCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20084>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20084) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20084)));
        }

        /// <summary>
        ///  Event properties value counts during the time range in descending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="eventPropertyName">The id of the event property.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="top">The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)</param>
        /// <returns>Task of InlineResponse20084</returns>
        public async System.Threading.Tasks.Task<InlineResponse20084> AnalyticsEventPropertyCountsAsync (string eventName, string eventPropertyName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, long? top = null)
        {
             ApiResponse<InlineResponse20084> localVarResponse = await AnalyticsEventPropertyCountsAsyncWithHttpInfo(eventName, eventPropertyName, start, ownerName, appName, end, versions, top);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Event properties value counts during the time range in descending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="eventPropertyName">The id of the event property.</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="top">The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (InlineResponse20084)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20084>> AnalyticsEventPropertyCountsAsyncWithHttpInfo (string eventName, string eventPropertyName, DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, long? top = null)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventPropertyCounts");
            // verify the required parameter 'eventPropertyName' is set
            if (eventPropertyName == null)
                throw new ApiException(400, "Missing required parameter 'eventPropertyName' when calling AnalyticsApi->AnalyticsEventPropertyCounts");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsEventPropertyCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventPropertyCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventPropertyCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (eventPropertyName != null) localVarPathParams.Add("event_property_name", this.Configuration.ApiClient.ParameterToString(eventPropertyName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventPropertyCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20084>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20084) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20084)));
        }

        /// <summary>
        ///  Count of active events in the time range ordered by event.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="eventName">To select the specific events. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <returns>Object</returns>
        public Object AnalyticsEvents (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, List<string> eventName = null, long? top = null, long? skip = null, string inlinecount = null, string orderby = null)
        {
             ApiResponse<Object> localVarResponse = AnalyticsEventsWithHttpInfo(start, ownerName, appName, end, versions, eventName, top, skip, inlinecount, orderby);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Count of active events in the time range ordered by event.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="eventName">To select the specific events. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AnalyticsEventsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, List<string> eventName = null, long? top = null, long? skip = null, string inlinecount = null, string orderby = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsEvents");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEvents");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEvents");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            if (eventName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "event_name", eventName)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (inlinecount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$inlinecount", inlinecount)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Count of active events in the time range ordered by event.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="eventName">To select the specific events. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyticsEventsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, List<string> eventName = null, long? top = null, long? skip = null, string inlinecount = null, string orderby = null)
        {
             ApiResponse<Object> localVarResponse = await AnalyticsEventsAsyncWithHttpInfo(start, ownerName, appName, end, versions, eventName, top, skip, inlinecount, orderby);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Count of active events in the time range ordered by event.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <param name="eventName">To select the specific events. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="skip">The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)</param>
        /// <param name="inlinecount">Controls whether or not to include a count of all the items across all pages. (optional, default to none)</param>
        /// <param name="orderby">controls the sorting order and sorting based on which column (optional, default to count desc)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsEventsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null, List<string> eventName = null, long? top = null, long? skip = null, string inlinecount = null, string orderby = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsEvents");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEvents");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEvents");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            if (eventName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "event_name", eventName)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (inlinecount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$inlinecount", inlinecount)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Delete the set of Events with the specified event names.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void AnalyticsEventsDelete (string eventName, string ownerName, string appName)
        {
             AnalyticsEventsDeleteWithHttpInfo(eventName, ownerName, appName);
        }

        /// <summary>
        ///  Delete the set of Events with the specified event names.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AnalyticsEventsDeleteWithHttpInfo (string eventName, string ownerName, string appName)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventsDelete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventsDelete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventsDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete the set of Events with the specified event names.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AnalyticsEventsDeleteAsync (string eventName, string ownerName, string appName)
        {
             await AnalyticsEventsDeleteAsyncWithHttpInfo(eventName, ownerName, appName);

        }

        /// <summary>
        ///  Delete the set of Events with the specified event names.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsEventsDeleteAsyncWithHttpInfo (string eventName, string ownerName, string appName)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventsDelete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventsDelete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventsDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete the set of Events with the specified event names.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void AnalyticsEventsDeleteLogs (string eventName, string ownerName, string appName)
        {
             AnalyticsEventsDeleteLogsWithHttpInfo(eventName, ownerName, appName);
        }

        /// <summary>
        ///  Delete the set of Events with the specified event names.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AnalyticsEventsDeleteLogsWithHttpInfo (string eventName, string ownerName, string appName)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventsDeleteLogs");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventsDeleteLogs");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventsDeleteLogs");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventsDeleteLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete the set of Events with the specified event names.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AnalyticsEventsDeleteLogsAsync (string eventName, string ownerName, string appName)
        {
             await AnalyticsEventsDeleteLogsAsyncWithHttpInfo(eventName, ownerName, appName);

        }

        /// <summary>
        ///  Delete the set of Events with the specified event names.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The id of the event.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsEventsDeleteLogsAsyncWithHttpInfo (string eventName, string ownerName, string appName)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsApi->AnalyticsEventsDeleteLogs");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsEventsDeleteLogs");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsEventsDeleteLogs");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", this.Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsEventsDeleteLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>InlineResponse20083</returns>
        public InlineResponse20083 AnalyticsGenericLogFlow (string ownerName, string appName, DateTime? start = null)
        {
             ApiResponse<InlineResponse20083> localVarResponse = AnalyticsGenericLogFlowWithHttpInfo(ownerName, appName, start);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20083</returns>
        public ApiResponse< InlineResponse20083 > AnalyticsGenericLogFlowWithHttpInfo (string ownerName, string appName, DateTime? start = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsGenericLogFlow");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsGenericLogFlow");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsGenericLogFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20083>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20083) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20083)));
        }

        /// <summary>
        ///  Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>Task of InlineResponse20083</returns>
        public async System.Threading.Tasks.Task<InlineResponse20083> AnalyticsGenericLogFlowAsync (string ownerName, string appName, DateTime? start = null)
        {
             ApiResponse<InlineResponse20083> localVarResponse = await AnalyticsGenericLogFlowAsyncWithHttpInfo(ownerName, appName, start);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20083)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20083>> AnalyticsGenericLogFlowAsyncWithHttpInfo (string ownerName, string appName, DateTime? start = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsGenericLogFlow");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsGenericLogFlow");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsGenericLogFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20083>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20083) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20083)));
        }

        /// <summary>
        ///  Gets audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object AnalyticsGetAudience (string audienceName, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = AnalyticsGetAudienceWithHttpInfo(audienceName, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AnalyticsGetAudienceWithHttpInfo (string audienceName, string ownerName, string appName)
        {
            // verify the required parameter 'audienceName' is set
            if (audienceName == null)
                throw new ApiException(400, "Missing required parameter 'audienceName' when calling AnalyticsApi->AnalyticsGetAudience");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsGetAudience");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsGetAudience");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (audienceName != null) localVarPathParams.Add("audience_name", this.Configuration.ApiClient.ParameterToString(audienceName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsGetAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Gets audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyticsGetAudienceAsync (string audienceName, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await AnalyticsGetAudienceAsyncWithHttpInfo(audienceName, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audienceName">The name of the audience</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsGetAudienceAsyncWithHttpInfo (string audienceName, string ownerName, string appName)
        {
            // verify the required parameter 'audienceName' is set
            if (audienceName == null)
                throw new ApiException(400, "Missing required parameter 'audienceName' when calling AnalyticsApi->AnalyticsGetAudience");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsGetAudience");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsGetAudience");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (audienceName != null) localVarPathParams.Add("audience_name", this.Configuration.ApiClient.ParameterToString(audienceName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsGetAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Languages in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20082</returns>
        public InlineResponse20082 AnalyticsLanguageCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20082> localVarResponse = AnalyticsLanguageCountsWithHttpInfo(start, ownerName, appName, end, top, versions);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Languages in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20082</returns>
        public ApiResponse< InlineResponse20082 > AnalyticsLanguageCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsLanguageCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsLanguageCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsLanguageCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsLanguageCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20082>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20082) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20082)));
        }

        /// <summary>
        ///  Languages in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20082</returns>
        public async System.Threading.Tasks.Task<InlineResponse20082> AnalyticsLanguageCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20082> localVarResponse = await AnalyticsLanguageCountsAsyncWithHttpInfo(start, ownerName, appName, end, top, versions);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Languages in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20082)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20082>> AnalyticsLanguageCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsLanguageCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsLanguageCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsLanguageCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsLanguageCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20082>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20082) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20082)));
        }

        /// <summary>
        ///  Get list of audiences.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeDisabled">Include disabled audience definitions (optional)</param>
        /// <returns>Object</returns>
        public Object AnalyticsListAudiences (string ownerName, string appName, bool? includeDisabled = null)
        {
             ApiResponse<Object> localVarResponse = AnalyticsListAudiencesWithHttpInfo(ownerName, appName, includeDisabled);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get list of audiences.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeDisabled">Include disabled audience definitions (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AnalyticsListAudiencesWithHttpInfo (string ownerName, string appName, bool? includeDisabled = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsListAudiences");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsListAudiences");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (includeDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_disabled", includeDisabled)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsListAudiences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get list of audiences.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeDisabled">Include disabled audience definitions (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyticsListAudiencesAsync (string ownerName, string appName, bool? includeDisabled = null)
        {
             ApiResponse<Object> localVarResponse = await AnalyticsListAudiencesAsyncWithHttpInfo(ownerName, appName, includeDisabled);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get list of audiences.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="includeDisabled">Include disabled audience definitions (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsListAudiencesAsyncWithHttpInfo (string ownerName, string appName, bool? includeDisabled = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsListAudiences");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsListAudiences");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (includeDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_disabled", includeDisabled)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsListAudiences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get list of custom properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object AnalyticsListCustomProperties (string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = AnalyticsListCustomPropertiesWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get list of custom properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AnalyticsListCustomPropertiesWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsListCustomProperties");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsListCustomProperties");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsListCustomProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get list of custom properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyticsListCustomPropertiesAsync (string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await AnalyticsListCustomPropertiesAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get list of custom properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsListCustomPropertiesAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsListCustomProperties");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsListCustomProperties");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsListCustomProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get list of device properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object AnalyticsListDeviceProperties (string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = AnalyticsListDevicePropertiesWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get list of device properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AnalyticsListDevicePropertiesWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsListDeviceProperties");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsListDeviceProperties");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsListDeviceProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get list of device properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyticsListDevicePropertiesAsync (string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await AnalyticsListDevicePropertiesAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get list of device properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsListDevicePropertiesAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsListDeviceProperties");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsListDeviceProperties");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsListDeviceProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get list of device property values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">Device property</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="contains">Contains string (optional)</param>
        /// <returns>Object</returns>
        public Object AnalyticsListDevicePropertyValues (string propertyName, string ownerName, string appName, string contains = null)
        {
             ApiResponse<Object> localVarResponse = AnalyticsListDevicePropertyValuesWithHttpInfo(propertyName, ownerName, appName, contains);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get list of device property values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">Device property</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="contains">Contains string (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AnalyticsListDevicePropertyValuesWithHttpInfo (string propertyName, string ownerName, string appName, string contains = null)
        {
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling AnalyticsApi->AnalyticsListDevicePropertyValues");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsListDevicePropertyValues");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsListDevicePropertyValues");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyName != null) localVarPathParams.Add("property_name", this.Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (contains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contains", contains)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsListDevicePropertyValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Get list of device property values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">Device property</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="contains">Contains string (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyticsListDevicePropertyValuesAsync (string propertyName, string ownerName, string appName, string contains = null)
        {
             ApiResponse<Object> localVarResponse = await AnalyticsListDevicePropertyValuesAsyncWithHttpInfo(propertyName, ownerName, appName, contains);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get list of device property values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">Device property</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="contains">Contains string (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsListDevicePropertyValuesAsyncWithHttpInfo (string propertyName, string ownerName, string appName, string contains = null)
        {
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling AnalyticsApi->AnalyticsListDevicePropertyValues");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsListDevicePropertyValues");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsListDevicePropertyValues");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyName != null) localVarPathParams.Add("property_name", this.Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (contains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contains", contains)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsListDevicePropertyValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>InlineResponse20081</returns>
        public InlineResponse20081 AnalyticsLogFlow (string ownerName, string appName, DateTime? start = null)
        {
             ApiResponse<InlineResponse20081> localVarResponse = AnalyticsLogFlowWithHttpInfo(ownerName, appName, start);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20081</returns>
        public ApiResponse< InlineResponse20081 > AnalyticsLogFlowWithHttpInfo (string ownerName, string appName, DateTime? start = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsLogFlow");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsLogFlow");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsLogFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20081>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20081) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20081)));
        }

        /// <summary>
        ///  Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>Task of InlineResponse20081</returns>
        public async System.Threading.Tasks.Task<InlineResponse20081> AnalyticsLogFlowAsync (string ownerName, string appName, DateTime? start = null)
        {
             ApiResponse<InlineResponse20081> localVarResponse = await AnalyticsLogFlowAsyncWithHttpInfo(ownerName, appName, start);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="start">Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20081)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20081>> AnalyticsLogFlowAsyncWithHttpInfo (string ownerName, string appName, DateTime? start = null)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsLogFlow");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsLogFlow");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsLogFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20081>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20081) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20081)));
        }

        /// <summary>
        ///  Models in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20080</returns>
        public InlineResponse20080 AnalyticsModelCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20080> localVarResponse = AnalyticsModelCountsWithHttpInfo(start, ownerName, appName, end, top, versions);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Models in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20080</returns>
        public ApiResponse< InlineResponse20080 > AnalyticsModelCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsModelCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsModelCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsModelCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsModelCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20080>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20080) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20080)));
        }

        /// <summary>
        ///  Models in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20080</returns>
        public async System.Threading.Tasks.Task<InlineResponse20080> AnalyticsModelCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20080> localVarResponse = await AnalyticsModelCountsAsyncWithHttpInfo(start, ownerName, appName, end, top, versions);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Models in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20080)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20080>> AnalyticsModelCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsModelCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsModelCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsModelCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsModelCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20080>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20080) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20080)));
        }

        /// <summary>
        ///  OSes in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20079</returns>
        public InlineResponse20079 AnalyticsOperatingSystemCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20079> localVarResponse = AnalyticsOperatingSystemCountsWithHttpInfo(start, ownerName, appName, end, top, versions);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  OSes in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        public ApiResponse< InlineResponse20079 > AnalyticsOperatingSystemCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsOperatingSystemCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsOperatingSystemCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsOperatingSystemCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/oses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsOperatingSystemCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20079>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20079) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20079)));
        }

        /// <summary>
        ///  OSes in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20079</returns>
        public async System.Threading.Tasks.Task<InlineResponse20079> AnalyticsOperatingSystemCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20079> localVarResponse = await AnalyticsOperatingSystemCountsAsyncWithHttpInfo(start, ownerName, appName, end, top, versions);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  OSes in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> AnalyticsOperatingSystemCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsOperatingSystemCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsOperatingSystemCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsOperatingSystemCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/oses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsOperatingSystemCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20079>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20079) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20079)));
        }

        /// <summary>
        ///  Count of sessions per device in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20076</returns>
        public InlineResponse20076 AnalyticsPerDeviceCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20076> localVarResponse = AnalyticsPerDeviceCountsWithHttpInfo(start, ownerName, appName, end, versions);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Count of sessions per device in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20076</returns>
        public ApiResponse< InlineResponse20076 > AnalyticsPerDeviceCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsPerDeviceCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsPerDeviceCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsPerDeviceCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsPerDeviceCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20076>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20076) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20076)));
        }

        /// <summary>
        ///  Count of sessions per device in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20076</returns>
        public async System.Threading.Tasks.Task<InlineResponse20076> AnalyticsPerDeviceCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20076> localVarResponse = await AnalyticsPerDeviceCountsAsyncWithHttpInfo(start, ownerName, appName, end, versions);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Count of sessions per device in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20076)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20076>> AnalyticsPerDeviceCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsPerDeviceCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsPerDeviceCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsPerDeviceCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsPerDeviceCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20076>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20076) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20076)));
        }

        /// <summary>
        ///  Places in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Object</returns>
        public Object AnalyticsPlaceCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
             ApiResponse<Object> localVarResponse = AnalyticsPlaceCountsWithHttpInfo(start, ownerName, appName, end, top, versions);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Places in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AnalyticsPlaceCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsPlaceCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsPlaceCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsPlaceCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/places";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsPlaceCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Places in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyticsPlaceCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
             ApiResponse<Object> localVarResponse = await AnalyticsPlaceCountsAsyncWithHttpInfo(start, ownerName, appName, end, top, versions);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Places in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsPlaceCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsPlaceCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsPlaceCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsPlaceCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/places";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsPlaceCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Count of sessions in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>List&lt;InlineResponse20078&gt;</returns>
        public List<InlineResponse20078> AnalyticsSessionCounts (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<List<InlineResponse20078>> localVarResponse = AnalyticsSessionCountsWithHttpInfo(start, ownerName, appName, end, versions);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Count of sessions in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20078&gt;</returns>
        public ApiResponse< List<InlineResponse20078> > AnalyticsSessionCountsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsSessionCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsSessionCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsSessionCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsSessionCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20078>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20078>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20078>)));
        }

        /// <summary>
        ///  Count of sessions in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of List&lt;InlineResponse20078&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20078>> AnalyticsSessionCountsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<List<InlineResponse20078>> localVarResponse = await AnalyticsSessionCountsAsyncWithHttpInfo(start, ownerName, appName, end, versions);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Count of sessions in the time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20078&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20078>>> AnalyticsSessionCountsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsSessionCounts");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsSessionCounts");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsSessionCounts");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsSessionCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20078>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20078>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20078>)));
        }

        /// <summary>
        ///  Gets session duration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>InlineResponse20077</returns>
        public InlineResponse20077 AnalyticsSessionDurationsDistribution (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20077> localVarResponse = AnalyticsSessionDurationsDistributionWithHttpInfo(start, ownerName, appName, end, versions);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets session duration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of InlineResponse20077</returns>
        public ApiResponse< InlineResponse20077 > AnalyticsSessionDurationsDistributionWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsSessionDurationsDistribution");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsSessionDurationsDistribution");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsSessionDurationsDistribution");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsSessionDurationsDistribution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20077>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20077) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20077)));
        }

        /// <summary>
        ///  Gets session duration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of InlineResponse20077</returns>
        public async System.Threading.Tasks.Task<InlineResponse20077> AnalyticsSessionDurationsDistributionAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
             ApiResponse<InlineResponse20077> localVarResponse = await AnalyticsSessionDurationsDistributionAsyncWithHttpInfo(start, ownerName, appName, end, versions);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets session duration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20077)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20077>> AnalyticsSessionDurationsDistributionAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsSessionDurationsDistribution");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsSessionDurationsDistribution");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsSessionDurationsDistribution");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsSessionDurationsDistribution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20077>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20077) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20077)));
        }

        /// <summary>
        ///  Tests audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Object</returns>
        public Object AnalyticsTestAudience (DefinitionTestBody body, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = AnalyticsTestAudienceWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Tests audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AnalyticsTestAudienceWithHttpInfo (DefinitionTestBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AnalyticsApi->AnalyticsTestAudience");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsTestAudience");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsTestAudience");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsTestAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Tests audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyticsTestAudienceAsync (DefinitionTestBody body, string ownerName, string appName)
        {
             ApiResponse<Object> localVarResponse = await AnalyticsTestAudienceAsyncWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Tests audience definition.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Audience definition</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsTestAudienceAsyncWithHttpInfo (DefinitionTestBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AnalyticsApi->AnalyticsTestAudience");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsTestAudience");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsTestAudience");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsTestAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Count of active versions in the time range ordered by version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Object</returns>
        public Object AnalyticsVersions (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
             ApiResponse<Object> localVarResponse = AnalyticsVersionsWithHttpInfo(start, ownerName, appName, end, top, versions);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Count of active versions in the time range ordered by version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AnalyticsVersionsWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsVersions");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsVersions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsVersions");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Count of active versions in the time range ordered by version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyticsVersionsAsync (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
             ApiResponse<Object> localVarResponse = await AnalyticsVersionsAsyncWithHttpInfo(start, ownerName, appName, end, top, versions);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Count of active versions in the time range ordered by version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start date time in data in ISO 8601 date time format.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="end">Last date time in data in ISO 8601 date time format. (optional)</param>
        /// <param name="top">The maximum number of results to return. (0 will fetch all results) (optional, default to 30)</param>
        /// <param name="versions">To select specific application versions (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsVersionsAsyncWithHttpInfo (DateTime? start, string ownerName, string appName, DateTime? end = null, long? top = null, List<string> versions = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling AnalyticsApi->AnalyticsVersions");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AnalyticsVersions");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AnalyticsVersions");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (versions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("pipe", "versions", versions)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>string</returns>
        public string AppBlockLogs (string ownerName, string appName)
        {
             ApiResponse<string> localVarResponse = AppBlockLogsWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > AppBlockLogsWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AppBlockLogs");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AppBlockLogs");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBlockLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AppBlockLogsAsync (string ownerName, string appName)
        {
             ApiResponse<string> localVarResponse = await AppBlockLogsAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AppBlockLogsAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->AppBlockLogs");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->AppBlockLogs");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBlockLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Get session logs by crash ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">The id of the a crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>InlineResponse20065</returns>
        public InlineResponse20065 CrashesListSessionLogs (string crashId, string ownerName, string appName, DateTime? date = null)
        {
             ApiResponse<InlineResponse20065> localVarResponse = CrashesListSessionLogsWithHttpInfo(crashId, ownerName, appName, date);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get session logs by crash ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">The id of the a crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        public ApiResponse< InlineResponse20065 > CrashesListSessionLogsWithHttpInfo (string crashId, string ownerName, string appName, DateTime? date = null)
        {
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling AnalyticsApi->CrashesListSessionLogs");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->CrashesListSessionLogs");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->CrashesListSessionLogs");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesListSessionLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20065) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065)));
        }

        /// <summary>
        ///  Get session logs by crash ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">The id of the a crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>Task of InlineResponse20065</returns>
        public async System.Threading.Tasks.Task<InlineResponse20065> CrashesListSessionLogsAsync (string crashId, string ownerName, string appName, DateTime? date = null)
        {
             ApiResponse<InlineResponse20065> localVarResponse = await CrashesListSessionLogsAsyncWithHttpInfo(crashId, ownerName, appName, date);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get session logs by crash ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crashId">The id of the a crash</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <param name="date">Date of data requested (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20065>> CrashesListSessionLogsAsyncWithHttpInfo (string crashId, string ownerName, string appName, DateTime? date = null)
        {
            // verify the required parameter 'crashId' is set
            if (crashId == null)
                throw new ApiException(400, "Missing required parameter 'crashId' when calling AnalyticsApi->CrashesListSessionLogs");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->CrashesListSessionLogs");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->CrashesListSessionLogs");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crashId != null) localVarPathParams.Add("crash_id", this.Configuration.ApiClient.ParameterToString(crashId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrashesListSessionLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20065) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065)));
        }

        /// <summary>
        ///  **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installId">The id of the device</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>string</returns>
        public string DevicesBlockLogs (string installId, string ownerName, string appName)
        {
             ApiResponse<string> localVarResponse = DevicesBlockLogsWithHttpInfo(installId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installId">The id of the device</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DevicesBlockLogsWithHttpInfo (string installId, string ownerName, string appName)
        {
            // verify the required parameter 'installId' is set
            if (installId == null)
                throw new ApiException(400, "Missing required parameter 'installId' when calling AnalyticsApi->DevicesBlockLogs");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->DevicesBlockLogs");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->DevicesBlockLogs");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installId != null) localVarPathParams.Add("install_id", this.Configuration.ApiClient.ParameterToString(installId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesBlockLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installId">The id of the device</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DevicesBlockLogsAsync (string installId, string ownerName, string appName)
        {
             ApiResponse<string> localVarResponse = await DevicesBlockLogsAsyncWithHttpInfo(installId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installId">The id of the device</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DevicesBlockLogsAsyncWithHttpInfo (string installId, string ownerName, string appName)
        {
            // verify the required parameter 'installId' is set
            if (installId == null)
                throw new ApiException(400, "Missing required parameter 'installId' when calling AnalyticsApi->DevicesBlockLogs");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling AnalyticsApi->DevicesBlockLogs");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling AnalyticsApi->DevicesBlockLogs");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installId != null) localVarPathParams.Add("install_id", this.Configuration.ApiClient.ParameterToString(installId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesBlockLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
