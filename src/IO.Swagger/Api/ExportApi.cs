/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IExportApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create new export configuration
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20036</returns>
        InlineResponse20036 ExportConfigurationsCreate (AppNameExportConfigurationsBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create new export configuration
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        ApiResponse<InlineResponse20036> ExportConfigurationsCreateWithHttpInfo (AppNameExportConfigurationsBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void ExportConfigurationsDelete (string exportConfigurationId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExportConfigurationsDeleteWithHttpInfo (string exportConfigurationId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void ExportConfigurationsDisable (string exportConfigurationId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExportConfigurationsDisableWithHttpInfo (string exportConfigurationId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enable export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        void ExportConfigurationsEnable (string exportConfigurationId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enable export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExportConfigurationsEnableWithHttpInfo (string exportConfigurationId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20036</returns>
        InlineResponse20036 ExportConfigurationsGet (string exportConfigurationId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        ApiResponse<InlineResponse20036> ExportConfigurationsGetWithHttpInfo (string exportConfigurationId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List export configurations.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20037</returns>
        InlineResponse20037 ExportConfigurationsList (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List export configurations.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        ApiResponse<InlineResponse20037> ExportConfigurationsListWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partially update export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20036</returns>
        InlineResponse20036 ExportConfigurationsPartialUpdate (ExportConfigurationsExportConfigurationIdBody body, string exportConfigurationId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partially update export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        ApiResponse<InlineResponse20036> ExportConfigurationsPartialUpdateWithHttpInfo (ExportConfigurationsExportConfigurationIdBody body, string exportConfigurationId, string ownerName, string appName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create new export configuration
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20036</returns>
        System.Threading.Tasks.Task<InlineResponse20036> ExportConfigurationsCreateAsync (AppNameExportConfigurationsBody body, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create new export configuration
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> ExportConfigurationsCreateAsyncWithHttpInfo (AppNameExportConfigurationsBody body, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExportConfigurationsDeleteAsync (string exportConfigurationId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExportConfigurationsDeleteAsyncWithHttpInfo (string exportConfigurationId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExportConfigurationsDisableAsync (string exportConfigurationId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExportConfigurationsDisableAsyncWithHttpInfo (string exportConfigurationId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enable export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExportConfigurationsEnableAsync (string exportConfigurationId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enable export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExportConfigurationsEnableAsyncWithHttpInfo (string exportConfigurationId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20036</returns>
        System.Threading.Tasks.Task<InlineResponse20036> ExportConfigurationsGetAsync (string exportConfigurationId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> ExportConfigurationsGetAsyncWithHttpInfo (string exportConfigurationId, string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List export configurations.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20037</returns>
        System.Threading.Tasks.Task<InlineResponse20037> ExportConfigurationsListAsync (string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List export configurations.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> ExportConfigurationsListAsyncWithHttpInfo (string ownerName, string appName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partially update export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20036</returns>
        System.Threading.Tasks.Task<InlineResponse20036> ExportConfigurationsPartialUpdateAsync (ExportConfigurationsExportConfigurationIdBody body, string exportConfigurationId, string ownerName, string appName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partially update export configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> ExportConfigurationsPartialUpdateAsyncWithHttpInfo (ExportConfigurationsExportConfigurationIdBody body, string exportConfigurationId, string ownerName, string appName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ExportApi : IExportApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExportApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportApi"/> class
        /// </summary>
        /// <returns></returns>
        public ExportApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExportApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Create new export configuration
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20036</returns>
        public InlineResponse20036 ExportConfigurationsCreate (AppNameExportConfigurationsBody body, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20036> localVarResponse = ExportConfigurationsCreateWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create new export configuration
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        public ApiResponse< InlineResponse20036 > ExportConfigurationsCreateWithHttpInfo (AppNameExportConfigurationsBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExportApi->ExportConfigurationsCreate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsCreate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsCreate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20036) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

        /// <summary>
        ///  Create new export configuration
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20036</returns>
        public async System.Threading.Tasks.Task<InlineResponse20036> ExportConfigurationsCreateAsync (AppNameExportConfigurationsBody body, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20036> localVarResponse = await ExportConfigurationsCreateAsyncWithHttpInfo(body, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create new export configuration
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> ExportConfigurationsCreateAsyncWithHttpInfo (AppNameExportConfigurationsBody body, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExportApi->ExportConfigurationsCreate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsCreate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsCreate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20036) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

        /// <summary>
        ///  Delete export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void ExportConfigurationsDelete (string exportConfigurationId, string ownerName, string appName)
        {
             ExportConfigurationsDeleteWithHttpInfo(exportConfigurationId, ownerName, appName);
        }

        /// <summary>
        ///  Delete export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExportConfigurationsDeleteWithHttpInfo (string exportConfigurationId, string ownerName, string appName)
        {
            // verify the required parameter 'exportConfigurationId' is set
            if (exportConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'exportConfigurationId' when calling ExportApi->ExportConfigurationsDelete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsDelete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportConfigurationId != null) localVarPathParams.Add("export_configuration_id", this.Configuration.ApiClient.ParameterToString(exportConfigurationId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExportConfigurationsDeleteAsync (string exportConfigurationId, string ownerName, string appName)
        {
             await ExportConfigurationsDeleteAsyncWithHttpInfo(exportConfigurationId, ownerName, appName);

        }

        /// <summary>
        ///  Delete export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExportConfigurationsDeleteAsyncWithHttpInfo (string exportConfigurationId, string ownerName, string appName)
        {
            // verify the required parameter 'exportConfigurationId' is set
            if (exportConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'exportConfigurationId' when calling ExportApi->ExportConfigurationsDelete");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsDelete");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsDelete");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportConfigurationId != null) localVarPathParams.Add("export_configuration_id", this.Configuration.ApiClient.ParameterToString(exportConfigurationId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Disable export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void ExportConfigurationsDisable (string exportConfigurationId, string ownerName, string appName)
        {
             ExportConfigurationsDisableWithHttpInfo(exportConfigurationId, ownerName, appName);
        }

        /// <summary>
        ///  Disable export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExportConfigurationsDisableWithHttpInfo (string exportConfigurationId, string ownerName, string appName)
        {
            // verify the required parameter 'exportConfigurationId' is set
            if (exportConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'exportConfigurationId' when calling ExportApi->ExportConfigurationsDisable");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsDisable");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsDisable");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportConfigurationId != null) localVarPathParams.Add("export_configuration_id", this.Configuration.ApiClient.ParameterToString(exportConfigurationId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsDisable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Disable export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExportConfigurationsDisableAsync (string exportConfigurationId, string ownerName, string appName)
        {
             await ExportConfigurationsDisableAsyncWithHttpInfo(exportConfigurationId, ownerName, appName);

        }

        /// <summary>
        ///  Disable export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExportConfigurationsDisableAsyncWithHttpInfo (string exportConfigurationId, string ownerName, string appName)
        {
            // verify the required parameter 'exportConfigurationId' is set
            if (exportConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'exportConfigurationId' when calling ExportApi->ExportConfigurationsDisable");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsDisable");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsDisable");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportConfigurationId != null) localVarPathParams.Add("export_configuration_id", this.Configuration.ApiClient.ParameterToString(exportConfigurationId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsDisable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Enable export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns></returns>
        public void ExportConfigurationsEnable (string exportConfigurationId, string ownerName, string appName)
        {
             ExportConfigurationsEnableWithHttpInfo(exportConfigurationId, ownerName, appName);
        }

        /// <summary>
        ///  Enable export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExportConfigurationsEnableWithHttpInfo (string exportConfigurationId, string ownerName, string appName)
        {
            // verify the required parameter 'exportConfigurationId' is set
            if (exportConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'exportConfigurationId' when calling ExportApi->ExportConfigurationsEnable");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsEnable");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsEnable");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportConfigurationId != null) localVarPathParams.Add("export_configuration_id", this.Configuration.ApiClient.ParameterToString(exportConfigurationId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsEnable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Enable export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExportConfigurationsEnableAsync (string exportConfigurationId, string ownerName, string appName)
        {
             await ExportConfigurationsEnableAsyncWithHttpInfo(exportConfigurationId, ownerName, appName);

        }

        /// <summary>
        ///  Enable export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExportConfigurationsEnableAsyncWithHttpInfo (string exportConfigurationId, string ownerName, string appName)
        {
            // verify the required parameter 'exportConfigurationId' is set
            if (exportConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'exportConfigurationId' when calling ExportApi->ExportConfigurationsEnable");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsEnable");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsEnable");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportConfigurationId != null) localVarPathParams.Add("export_configuration_id", this.Configuration.ApiClient.ParameterToString(exportConfigurationId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsEnable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Get export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20036</returns>
        public InlineResponse20036 ExportConfigurationsGet (string exportConfigurationId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20036> localVarResponse = ExportConfigurationsGetWithHttpInfo(exportConfigurationId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        public ApiResponse< InlineResponse20036 > ExportConfigurationsGetWithHttpInfo (string exportConfigurationId, string ownerName, string appName)
        {
            // verify the required parameter 'exportConfigurationId' is set
            if (exportConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'exportConfigurationId' when calling ExportApi->ExportConfigurationsGet");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportConfigurationId != null) localVarPathParams.Add("export_configuration_id", this.Configuration.ApiClient.ParameterToString(exportConfigurationId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20036) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

        /// <summary>
        ///  Get export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20036</returns>
        public async System.Threading.Tasks.Task<InlineResponse20036> ExportConfigurationsGetAsync (string exportConfigurationId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20036> localVarResponse = await ExportConfigurationsGetAsyncWithHttpInfo(exportConfigurationId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> ExportConfigurationsGetAsyncWithHttpInfo (string exportConfigurationId, string ownerName, string appName)
        {
            // verify the required parameter 'exportConfigurationId' is set
            if (exportConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'exportConfigurationId' when calling ExportApi->ExportConfigurationsGet");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsGet");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsGet");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportConfigurationId != null) localVarPathParams.Add("export_configuration_id", this.Configuration.ApiClient.ParameterToString(exportConfigurationId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20036) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

        /// <summary>
        ///  List export configurations.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20037</returns>
        public InlineResponse20037 ExportConfigurationsList (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20037> localVarResponse = ExportConfigurationsListWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  List export configurations.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        public ApiResponse< InlineResponse20037 > ExportConfigurationsListWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20037>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20037) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20037)));
        }

        /// <summary>
        ///  List export configurations.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20037</returns>
        public async System.Threading.Tasks.Task<InlineResponse20037> ExportConfigurationsListAsync (string ownerName, string appName)
        {
             ApiResponse<InlineResponse20037> localVarResponse = await ExportConfigurationsListAsyncWithHttpInfo(ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  List export configurations.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> ExportConfigurationsListAsyncWithHttpInfo (string ownerName, string appName)
        {
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsList");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsList");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20037>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20037) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20037)));
        }

        /// <summary>
        ///  Partially update export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>InlineResponse20036</returns>
        public InlineResponse20036 ExportConfigurationsPartialUpdate (ExportConfigurationsExportConfigurationIdBody body, string exportConfigurationId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20036> localVarResponse = ExportConfigurationsPartialUpdateWithHttpInfo(body, exportConfigurationId, ownerName, appName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Partially update export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        public ApiResponse< InlineResponse20036 > ExportConfigurationsPartialUpdateWithHttpInfo (ExportConfigurationsExportConfigurationIdBody body, string exportConfigurationId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExportApi->ExportConfigurationsPartialUpdate");
            // verify the required parameter 'exportConfigurationId' is set
            if (exportConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'exportConfigurationId' when calling ExportApi->ExportConfigurationsPartialUpdate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsPartialUpdate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsPartialUpdate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportConfigurationId != null) localVarPathParams.Add("export_configuration_id", this.Configuration.ApiClient.ParameterToString(exportConfigurationId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20036) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

        /// <summary>
        ///  Partially update export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of InlineResponse20036</returns>
        public async System.Threading.Tasks.Task<InlineResponse20036> ExportConfigurationsPartialUpdateAsync (ExportConfigurationsExportConfigurationIdBody body, string exportConfigurationId, string ownerName, string appName)
        {
             ApiResponse<InlineResponse20036> localVarResponse = await ExportConfigurationsPartialUpdateAsyncWithHttpInfo(body, exportConfigurationId, ownerName, appName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Partially update export configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Export configurations.</param>
        /// <param name="exportConfigurationId">The id of the export configuration.</param>
        /// <param name="ownerName">The name of the owner</param>
        /// <param name="appName">The name of the application</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> ExportConfigurationsPartialUpdateAsyncWithHttpInfo (ExportConfigurationsExportConfigurationIdBody body, string exportConfigurationId, string ownerName, string appName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExportApi->ExportConfigurationsPartialUpdate");
            // verify the required parameter 'exportConfigurationId' is set
            if (exportConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'exportConfigurationId' when calling ExportApi->ExportConfigurationsPartialUpdate");
            // verify the required parameter 'ownerName' is set
            if (ownerName == null)
                throw new ApiException(400, "Missing required parameter 'ownerName' when calling ExportApi->ExportConfigurationsPartialUpdate");
            // verify the required parameter 'appName' is set
            if (appName == null)
                throw new ApiException(400, "Missing required parameter 'appName' when calling ExportApi->ExportConfigurationsPartialUpdate");

            var localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exportConfigurationId != null) localVarPathParams.Add("export_configuration_id", this.Configuration.ApiClient.ParameterToString(exportConfigurationId)); // path parameter
            if (ownerName != null) localVarPathParams.Add("owner_name", this.Configuration.ApiClient.ParameterToString(ownerName)); // path parameter
            if (appName != null) localVarPathParams.Add("app_name", this.Configuration.ApiClient.ParameterToString(appName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportConfigurationsPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20036) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

    }
}
