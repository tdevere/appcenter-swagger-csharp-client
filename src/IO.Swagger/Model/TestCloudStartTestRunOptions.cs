/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Options required to start the test run
    /// </summary>
    [DataContract]
        public partial class TestCloudStartTestRunOptions :  IEquatable<TestCloudStartTestRunOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestCloudStartTestRunOptions" /> class.
        /// </summary>
        /// <param name="testFramework">Test framework used by tests. (required).</param>
        /// <param name="deviceSelection">Device selection string. (required).</param>
        /// <param name="language">Language that should be used to run tests..</param>
        /// <param name="locale">Locale that should be used to run tests..</param>
        /// <param name="testSeries">Name of the test series..</param>
        /// <param name="testParameters">A JSON dictionary with additional test parameters.</param>
        public TestCloudStartTestRunOptions(string testFramework = default(string), string deviceSelection = default(string), string language = default(string), string locale = default(string), string testSeries = default(string), Object testParameters = default(Object))
        {
            // to ensure "testFramework" is required (not null)
            if (testFramework == null)
            {
                throw new InvalidDataException("testFramework is a required property for TestCloudStartTestRunOptions and cannot be null");
            }
            else
            {
                this.TestFramework = testFramework;
            }
            // to ensure "deviceSelection" is required (not null)
            if (deviceSelection == null)
            {
                throw new InvalidDataException("deviceSelection is a required property for TestCloudStartTestRunOptions and cannot be null");
            }
            else
            {
                this.DeviceSelection = deviceSelection;
            }
            this.Language = language;
            this.Locale = locale;
            this.TestSeries = testSeries;
            this.TestParameters = testParameters;
        }
        
        /// <summary>
        /// Test framework used by tests.
        /// </summary>
        /// <value>Test framework used by tests.</value>
        [DataMember(Name="test_framework", EmitDefaultValue=false)]
        public string TestFramework { get; set; }

        /// <summary>
        /// Device selection string.
        /// </summary>
        /// <value>Device selection string.</value>
        [DataMember(Name="device_selection", EmitDefaultValue=false)]
        public string DeviceSelection { get; set; }

        /// <summary>
        /// Language that should be used to run tests.
        /// </summary>
        /// <value>Language that should be used to run tests.</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Locale that should be used to run tests.
        /// </summary>
        /// <value>Locale that should be used to run tests.</value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Name of the test series.
        /// </summary>
        /// <value>Name of the test series.</value>
        [DataMember(Name="test_series", EmitDefaultValue=false)]
        public string TestSeries { get; set; }

        /// <summary>
        /// A JSON dictionary with additional test parameters
        /// </summary>
        /// <value>A JSON dictionary with additional test parameters</value>
        [DataMember(Name="test_parameters", EmitDefaultValue=false)]
        public Object TestParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestCloudStartTestRunOptions {\n");
            sb.Append("  TestFramework: ").Append(TestFramework).Append("\n");
            sb.Append("  DeviceSelection: ").Append(DeviceSelection).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  TestSeries: ").Append(TestSeries).Append("\n");
            sb.Append("  TestParameters: ").Append(TestParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestCloudStartTestRunOptions);
        }

        /// <summary>
        /// Returns true if TestCloudStartTestRunOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of TestCloudStartTestRunOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestCloudStartTestRunOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TestFramework == input.TestFramework ||
                    (this.TestFramework != null &&
                    this.TestFramework.Equals(input.TestFramework))
                ) && 
                (
                    this.DeviceSelection == input.DeviceSelection ||
                    (this.DeviceSelection != null &&
                    this.DeviceSelection.Equals(input.DeviceSelection))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.TestSeries == input.TestSeries ||
                    (this.TestSeries != null &&
                    this.TestSeries.Equals(input.TestSeries))
                ) && 
                (
                    this.TestParameters == input.TestParameters ||
                    (this.TestParameters != null &&
                    this.TestParameters.Equals(input.TestParameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TestFramework != null)
                    hashCode = hashCode * 59 + this.TestFramework.GetHashCode();
                if (this.DeviceSelection != null)
                    hashCode = hashCode * 59 + this.DeviceSelection.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.TestSeries != null)
                    hashCode = hashCode * 59 + this.TestSeries.GetHashCode();
                if (this.TestParameters != null)
                    hashCode = hashCode * 59 + this.TestParameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
