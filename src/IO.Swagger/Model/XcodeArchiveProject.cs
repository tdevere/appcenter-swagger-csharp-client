/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// XcodeArchiveProject
    /// </summary>
    [DataContract]
        public partial class XcodeArchiveProject :  IEquatable<XcodeArchiveProject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XcodeArchiveProject" /> class.
        /// </summary>
        /// <param name="archiveTargetId">The Id of the target to archive (required).</param>
        /// <param name="projectName">The project to archive container name (required).</param>
        /// <param name="projectPath">Full path of the target project.</param>
        public XcodeArchiveProject(string archiveTargetId = default(string), string projectName = default(string), string projectPath = default(string))
        {
            // to ensure "archiveTargetId" is required (not null)
            if (archiveTargetId == null)
            {
                throw new InvalidDataException("archiveTargetId is a required property for XcodeArchiveProject and cannot be null");
            }
            else
            {
                this.ArchiveTargetId = archiveTargetId;
            }
            // to ensure "projectName" is required (not null)
            if (projectName == null)
            {
                throw new InvalidDataException("projectName is a required property for XcodeArchiveProject and cannot be null");
            }
            else
            {
                this.ProjectName = projectName;
            }
            this.ProjectPath = projectPath;
        }
        
        /// <summary>
        /// The Id of the target to archive
        /// </summary>
        /// <value>The Id of the target to archive</value>
        [DataMember(Name="archiveTargetId", EmitDefaultValue=false)]
        public string ArchiveTargetId { get; set; }

        /// <summary>
        /// The project to archive container name
        /// </summary>
        /// <value>The project to archive container name</value>
        [DataMember(Name="projectName", EmitDefaultValue=false)]
        public string ProjectName { get; set; }

        /// <summary>
        /// Full path of the target project
        /// </summary>
        /// <value>Full path of the target project</value>
        [DataMember(Name="projectPath", EmitDefaultValue=false)]
        public string ProjectPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XcodeArchiveProject {\n");
            sb.Append("  ArchiveTargetId: ").Append(ArchiveTargetId).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  ProjectPath: ").Append(ProjectPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XcodeArchiveProject);
        }

        /// <summary>
        /// Returns true if XcodeArchiveProject instances are equal
        /// </summary>
        /// <param name="input">Instance of XcodeArchiveProject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XcodeArchiveProject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArchiveTargetId == input.ArchiveTargetId ||
                    (this.ArchiveTargetId != null &&
                    this.ArchiveTargetId.Equals(input.ArchiveTargetId))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.ProjectPath == input.ProjectPath ||
                    (this.ProjectPath != null &&
                    this.ProjectPath.Equals(input.ProjectPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArchiveTargetId != null)
                    hashCode = hashCode * 59 + this.ArchiveTargetId.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                if (this.ProjectPath != null)
                    hashCode = hashCode * 59 + this.ProjectPath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
