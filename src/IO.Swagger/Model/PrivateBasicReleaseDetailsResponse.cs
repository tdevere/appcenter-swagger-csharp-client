/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Basic information on a release for private apis
    /// </summary>
    [DataContract]
        public partial class PrivateBasicReleaseDetailsResponse :  IEquatable<PrivateBasicReleaseDetailsResponse>, IValidatableObject
    {
        /// <summary>
        /// The release&#x27;s origin
        /// </summary>
        /// <value>The release&#x27;s origin</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OriginEnum
        {
            /// <summary>
            /// Enum Hockeyapp for value: hockeyapp
            /// </summary>
            [EnumMember(Value = "hockeyapp")]
            Hockeyapp = 1,
            /// <summary>
            /// Enum Appcenter for value: appcenter
            /// </summary>
            [EnumMember(Value = "appcenter")]
            Appcenter = 2        }
        /// <summary>
        /// The release&#x27;s origin
        /// </summary>
        /// <value>The release&#x27;s origin</value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public OriginEnum? Origin { get; set; }
        /// <summary>
        /// The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; 
        /// </summary>
        /// <value>The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DestinationTypeEnum
        {
            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            [EnumMember(Value = "group")]
            Group = 1,
            /// <summary>
            /// Enum Store for value: store
            /// </summary>
            [EnumMember(Value = "store")]
            Store = 2,
            /// <summary>
            /// Enum Tester for value: tester
            /// </summary>
            [EnumMember(Value = "tester")]
            Tester = 3        }
        /// <summary>
        /// The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; 
        /// </summary>
        /// <value>The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; </value>
        [DataMember(Name="destination_type", EmitDefaultValue=false)]
        public DestinationTypeEnum? DestinationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrivateBasicReleaseDetailsResponse" /> class.
        /// </summary>
        /// <param name="id">ID identifying this unique release..</param>
        /// <param name="version">The release&#x27;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist.&lt;br&gt; For Android: android:versionCode from AppManifest.xml. .</param>
        /// <param name="origin">The release&#x27;s origin.</param>
        /// <param name="shortVersion">The release&#x27;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist.&lt;br&gt; For Android: android:versionName from AppManifest.xml. .</param>
        /// <param name="uploadedAt">UTC time in ISO 8601 format of the uploaded time..</param>
        /// <param name="distributionGroupId">the destination id of release where it is distributed..</param>
        /// <param name="destinationType">The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; .</param>
        /// <param name="isLatest">Indicates if this is the latest release in the group..</param>
        /// <param name="mandatoryUpdate">A boolean which determines whether the release is a mandatory update or not..</param>
        /// <param name="publishingStatus">the publishing status of the distributed release.</param>
        /// <param name="isExternalBuild">This value determines if a release is external or not..</param>
        public PrivateBasicReleaseDetailsResponse(int? id = default(int?), string version = default(string), OriginEnum? origin = default(OriginEnum?), string shortVersion = default(string), string uploadedAt = default(string), string distributionGroupId = default(string), DestinationTypeEnum? destinationType = default(DestinationTypeEnum?), bool? isLatest = default(bool?), bool? mandatoryUpdate = default(bool?), string publishingStatus = default(string), bool? isExternalBuild = default(bool?))
        {
            this.Id = id;
            this.Version = version;
            this.Origin = origin;
            this.ShortVersion = shortVersion;
            this.UploadedAt = uploadedAt;
            this.DistributionGroupId = distributionGroupId;
            this.DestinationType = destinationType;
            this.IsLatest = isLatest;
            this.MandatoryUpdate = mandatoryUpdate;
            this.PublishingStatus = publishingStatus;
            this.IsExternalBuild = isExternalBuild;
        }
        
        /// <summary>
        /// ID identifying this unique release.
        /// </summary>
        /// <value>ID identifying this unique release.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The release&#x27;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist.&lt;br&gt; For Android: android:versionCode from AppManifest.xml. 
        /// </summary>
        /// <value>The release&#x27;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist.&lt;br&gt; For Android: android:versionCode from AppManifest.xml. </value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }


        /// <summary>
        /// The release&#x27;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist.&lt;br&gt; For Android: android:versionName from AppManifest.xml. 
        /// </summary>
        /// <value>The release&#x27;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist.&lt;br&gt; For Android: android:versionName from AppManifest.xml. </value>
        [DataMember(Name="short_version", EmitDefaultValue=false)]
        public string ShortVersion { get; set; }

        /// <summary>
        /// UTC time in ISO 8601 format of the uploaded time.
        /// </summary>
        /// <value>UTC time in ISO 8601 format of the uploaded time.</value>
        [DataMember(Name="uploaded_at", EmitDefaultValue=false)]
        public string UploadedAt { get; set; }

        /// <summary>
        /// the destination id of release where it is distributed.
        /// </summary>
        /// <value>the destination id of release where it is distributed.</value>
        [DataMember(Name="distribution_group_id", EmitDefaultValue=false)]
        public string DistributionGroupId { get; set; }


        /// <summary>
        /// Indicates if this is the latest release in the group.
        /// </summary>
        /// <value>Indicates if this is the latest release in the group.</value>
        [DataMember(Name="is_latest", EmitDefaultValue=false)]
        public bool? IsLatest { get; set; }

        /// <summary>
        /// A boolean which determines whether the release is a mandatory update or not.
        /// </summary>
        /// <value>A boolean which determines whether the release is a mandatory update or not.</value>
        [DataMember(Name="mandatory_update", EmitDefaultValue=false)]
        public bool? MandatoryUpdate { get; set; }

        /// <summary>
        /// the publishing status of the distributed release
        /// </summary>
        /// <value>the publishing status of the distributed release</value>
        [DataMember(Name="publishing_status", EmitDefaultValue=false)]
        public string PublishingStatus { get; set; }

        /// <summary>
        /// This value determines if a release is external or not.
        /// </summary>
        /// <value>This value determines if a release is external or not.</value>
        [DataMember(Name="is_external_build", EmitDefaultValue=false)]
        public bool? IsExternalBuild { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrivateBasicReleaseDetailsResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  ShortVersion: ").Append(ShortVersion).Append("\n");
            sb.Append("  UploadedAt: ").Append(UploadedAt).Append("\n");
            sb.Append("  DistributionGroupId: ").Append(DistributionGroupId).Append("\n");
            sb.Append("  DestinationType: ").Append(DestinationType).Append("\n");
            sb.Append("  IsLatest: ").Append(IsLatest).Append("\n");
            sb.Append("  MandatoryUpdate: ").Append(MandatoryUpdate).Append("\n");
            sb.Append("  PublishingStatus: ").Append(PublishingStatus).Append("\n");
            sb.Append("  IsExternalBuild: ").Append(IsExternalBuild).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrivateBasicReleaseDetailsResponse);
        }

        /// <summary>
        /// Returns true if PrivateBasicReleaseDetailsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PrivateBasicReleaseDetailsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrivateBasicReleaseDetailsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.ShortVersion == input.ShortVersion ||
                    (this.ShortVersion != null &&
                    this.ShortVersion.Equals(input.ShortVersion))
                ) && 
                (
                    this.UploadedAt == input.UploadedAt ||
                    (this.UploadedAt != null &&
                    this.UploadedAt.Equals(input.UploadedAt))
                ) && 
                (
                    this.DistributionGroupId == input.DistributionGroupId ||
                    (this.DistributionGroupId != null &&
                    this.DistributionGroupId.Equals(input.DistributionGroupId))
                ) && 
                (
                    this.DestinationType == input.DestinationType ||
                    (this.DestinationType != null &&
                    this.DestinationType.Equals(input.DestinationType))
                ) && 
                (
                    this.IsLatest == input.IsLatest ||
                    (this.IsLatest != null &&
                    this.IsLatest.Equals(input.IsLatest))
                ) && 
                (
                    this.MandatoryUpdate == input.MandatoryUpdate ||
                    (this.MandatoryUpdate != null &&
                    this.MandatoryUpdate.Equals(input.MandatoryUpdate))
                ) && 
                (
                    this.PublishingStatus == input.PublishingStatus ||
                    (this.PublishingStatus != null &&
                    this.PublishingStatus.Equals(input.PublishingStatus))
                ) && 
                (
                    this.IsExternalBuild == input.IsExternalBuild ||
                    (this.IsExternalBuild != null &&
                    this.IsExternalBuild.Equals(input.IsExternalBuild))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.ShortVersion != null)
                    hashCode = hashCode * 59 + this.ShortVersion.GetHashCode();
                if (this.UploadedAt != null)
                    hashCode = hashCode * 59 + this.UploadedAt.GetHashCode();
                if (this.DistributionGroupId != null)
                    hashCode = hashCode * 59 + this.DistributionGroupId.GetHashCode();
                if (this.DestinationType != null)
                    hashCode = hashCode * 59 + this.DestinationType.GetHashCode();
                if (this.IsLatest != null)
                    hashCode = hashCode * 59 + this.IsLatest.GetHashCode();
                if (this.MandatoryUpdate != null)
                    hashCode = hashCode * 59 + this.MandatoryUpdate.GetHashCode();
                if (this.PublishingStatus != null)
                    hashCode = hashCode * 59 + this.PublishingStatus.GetHashCode();
                if (this.IsExternalBuild != null)
                    hashCode = hashCode * 59 + this.IsExternalBuild.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
