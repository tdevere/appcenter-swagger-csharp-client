/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AppWithTeamPermissionsResponse
    /// </summary>
    [DataContract]
        public partial class AppWithTeamPermissionsResponse :  IEquatable<AppWithTeamPermissionsResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines TeamPermissions
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TeamPermissionsEnum
        {
            /// <summary>
            /// Enum Manager for value: manager
            /// </summary>
            [EnumMember(Value = "manager")]
            Manager = 1,
            /// <summary>
            /// Enum Developer for value: developer
            /// </summary>
            [EnumMember(Value = "developer")]
            Developer = 2,
            /// <summary>
            /// Enum Viewer for value: viewer
            /// </summary>
            [EnumMember(Value = "viewer")]
            Viewer = 3        }
        /// <summary>
        /// The permissions the team has for the app
        /// </summary>
        /// <value>The permissions the team has for the app</value>
        [DataMember(Name="team_permissions", EmitDefaultValue=false)]
        public List<TeamPermissionsEnum> TeamPermissions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppWithTeamPermissionsResponse" /> class.
        /// </summary>
        /// <param name="teamPermissions">The permissions the team has for the app.</param>
        public AppWithTeamPermissionsResponse(List<TeamPermissionsEnum> teamPermissions = default(List<TeamPermissionsEnum>))
        {
            this.TeamPermissions = teamPermissions;
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppWithTeamPermissionsResponse {\n");
            sb.Append("  TeamPermissions: ").Append(TeamPermissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppWithTeamPermissionsResponse);
        }

        /// <summary>
        /// Returns true if AppWithTeamPermissionsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AppWithTeamPermissionsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppWithTeamPermissionsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TeamPermissions == input.TeamPermissions ||
                    this.TeamPermissions != null &&
                    input.TeamPermissions != null &&
                    this.TeamPermissions.SequenceEqual(input.TeamPermissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TeamPermissions != null)
                    hashCode = hashCode * 59 + this.TeamPermissions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
