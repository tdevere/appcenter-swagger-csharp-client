/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiTokenGetUserResponse
    /// </summary>
    [DataContract]
        public partial class ApiTokenGetUserResponse :  IEquatable<ApiTokenGetUserResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines TokenScope
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TokenScopeEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,
            /// <summary>
            /// Enum Inappupdate for value: in_app_update
            /// </summary>
            [EnumMember(Value = "in_app_update")]
            Inappupdate = 2,
            /// <summary>
            /// Enum Viewer for value: viewer
            /// </summary>
            [EnumMember(Value = "viewer")]
            Viewer = 3        }
        /// <summary>
        /// The token&#x27;s scope. A list of allowed roles.
        /// </summary>
        /// <value>The token&#x27;s scope. A list of allowed roles.</value>
        [DataMember(Name="token_scope", EmitDefaultValue=false)]
        public List<TokenScopeEnum> TokenScope { get; set; }
        /// <summary>
        /// The creation origin of the user who created this api token
        /// </summary>
        /// <value>The creation origin of the user who created this api token</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UserOriginEnum
        {
            /// <summary>
            /// Enum Appcenter for value: appcenter
            /// </summary>
            [EnumMember(Value = "appcenter")]
            Appcenter = 1,
            /// <summary>
            /// Enum Hockeyapp for value: hockeyapp
            /// </summary>
            [EnumMember(Value = "hockeyapp")]
            Hockeyapp = 2,
            /// <summary>
            /// Enum Codepush for value: codepush
            /// </summary>
            [EnumMember(Value = "codepush")]
            Codepush = 3        }
        /// <summary>
        /// The creation origin of the user who created this api token
        /// </summary>
        /// <value>The creation origin of the user who created this api token</value>
        [DataMember(Name="user_origin", EmitDefaultValue=false)]
        public UserOriginEnum UserOrigin { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiTokenGetUserResponse" /> class.
        /// </summary>
        /// <param name="tokenId">The token&#x27;s unique id (UUID) (required).</param>
        /// <param name="tokenScope">The token&#x27;s scope. A list of allowed roles. (required).</param>
        /// <param name="userEmail">The user email (required).</param>
        /// <param name="userId">The unique id (UUID) of the user (required).</param>
        /// <param name="userOrigin">The creation origin of the user who created this api token (required).</param>
        public ApiTokenGetUserResponse(Guid? tokenId = default(Guid?), List<TokenScopeEnum> tokenScope = default(List<TokenScopeEnum>), string userEmail = default(string), Guid? userId = default(Guid?), UserOriginEnum userOrigin = default(UserOriginEnum))
        {
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
            {
                throw new InvalidDataException("tokenId is a required property for ApiTokenGetUserResponse and cannot be null");
            }
            else
            {
                this.TokenId = tokenId;
            }
            // to ensure "tokenScope" is required (not null)
            if (tokenScope == null)
            {
                throw new InvalidDataException("tokenScope is a required property for ApiTokenGetUserResponse and cannot be null");
            }
            else
            {
                this.TokenScope = tokenScope;
            }
            // to ensure "userEmail" is required (not null)
            if (userEmail == null)
            {
                throw new InvalidDataException("userEmail is a required property for ApiTokenGetUserResponse and cannot be null");
            }
            else
            {
                this.UserEmail = userEmail;
            }
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for ApiTokenGetUserResponse and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
            // to ensure "userOrigin" is required (not null)
            if (userOrigin == null)
            {
                throw new InvalidDataException("userOrigin is a required property for ApiTokenGetUserResponse and cannot be null");
            }
            else
            {
                this.UserOrigin = userOrigin;
            }
        }
        
        /// <summary>
        /// The token&#x27;s unique id (UUID)
        /// </summary>
        /// <value>The token&#x27;s unique id (UUID)</value>
        [DataMember(Name="token_id", EmitDefaultValue=false)]
        public Guid? TokenId { get; set; }


        /// <summary>
        /// The user email
        /// </summary>
        /// <value>The user email</value>
        [DataMember(Name="user_email", EmitDefaultValue=false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// The unique id (UUID) of the user
        /// </summary>
        /// <value>The unique id (UUID) of the user</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public Guid? UserId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiTokenGetUserResponse {\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  TokenScope: ").Append(TokenScope).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserOrigin: ").Append(UserOrigin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiTokenGetUserResponse);
        }

        /// <summary>
        /// Returns true if ApiTokenGetUserResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiTokenGetUserResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiTokenGetUserResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                ) && 
                (
                    this.TokenScope == input.TokenScope ||
                    this.TokenScope != null &&
                    input.TokenScope != null &&
                    this.TokenScope.SequenceEqual(input.TokenScope)
                ) && 
                (
                    this.UserEmail == input.UserEmail ||
                    (this.UserEmail != null &&
                    this.UserEmail.Equals(input.UserEmail))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserOrigin == input.UserOrigin ||
                    (this.UserOrigin != null &&
                    this.UserOrigin.Equals(input.UserOrigin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenId != null)
                    hashCode = hashCode * 59 + this.TokenId.GetHashCode();
                if (this.TokenScope != null)
                    hashCode = hashCode * 59 + this.TokenScope.GetHashCode();
                if (this.UserEmail != null)
                    hashCode = hashCode * 59 + this.UserEmail.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserOrigin != null)
                    hashCode = hashCode * 59 + this.UserOrigin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
