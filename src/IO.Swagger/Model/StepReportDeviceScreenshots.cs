/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StepReportDeviceScreenshots
    /// </summary>
    [DataContract]
        public partial class StepReportDeviceScreenshots :  IEquatable<StepReportDeviceScreenshots>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StepReportDeviceScreenshots" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="deviceSnapshotId">deviceSnapshotId.</param>
        /// <param name="stacktrace">stacktrace.</param>
        /// <param name="crashData">crashData.</param>
        /// <param name="status">status.</param>
        /// <param name="title">title.</param>
        /// <param name="screenshot">screenshot.</param>
        /// <param name="logFile">logFile.</param>
        /// <param name="appiumLogFile">appiumLogFile.</param>
        /// <param name="rawCrashData">rawCrashData.</param>
        public StepReportDeviceScreenshots(string id = default(string), string deviceSnapshotId = default(string), List<string> stacktrace = default(List<string>), List<string> crashData = default(List<string>), string status = default(string), string title = default(string), StepReportScreenshot screenshot = default(StepReportScreenshot), string logFile = default(string), string appiumLogFile = default(string), List<string> rawCrashData = default(List<string>))
        {
            this.Id = id;
            this.DeviceSnapshotId = deviceSnapshotId;
            this.Stacktrace = stacktrace;
            this.CrashData = crashData;
            this.Status = status;
            this.Title = title;
            this.Screenshot = screenshot;
            this.LogFile = logFile;
            this.AppiumLogFile = appiumLogFile;
            this.RawCrashData = rawCrashData;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets DeviceSnapshotId
        /// </summary>
        [DataMember(Name="device_snapshot_id", EmitDefaultValue=false)]
        public string DeviceSnapshotId { get; set; }

        /// <summary>
        /// Gets or Sets Stacktrace
        /// </summary>
        [DataMember(Name="stacktrace", EmitDefaultValue=false)]
        public List<string> Stacktrace { get; set; }

        /// <summary>
        /// Gets or Sets CrashData
        /// </summary>
        [DataMember(Name="crash_data", EmitDefaultValue=false)]
        public List<string> CrashData { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Screenshot
        /// </summary>
        [DataMember(Name="screenshot", EmitDefaultValue=false)]
        public StepReportScreenshot Screenshot { get; set; }

        /// <summary>
        /// Gets or Sets LogFile
        /// </summary>
        [DataMember(Name="log_file", EmitDefaultValue=false)]
        public string LogFile { get; set; }

        /// <summary>
        /// Gets or Sets AppiumLogFile
        /// </summary>
        [DataMember(Name="appium_log_file", EmitDefaultValue=false)]
        public string AppiumLogFile { get; set; }

        /// <summary>
        /// Gets or Sets RawCrashData
        /// </summary>
        [DataMember(Name="raw_crash_data", EmitDefaultValue=false)]
        public List<string> RawCrashData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StepReportDeviceScreenshots {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeviceSnapshotId: ").Append(DeviceSnapshotId).Append("\n");
            sb.Append("  Stacktrace: ").Append(Stacktrace).Append("\n");
            sb.Append("  CrashData: ").Append(CrashData).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Screenshot: ").Append(Screenshot).Append("\n");
            sb.Append("  LogFile: ").Append(LogFile).Append("\n");
            sb.Append("  AppiumLogFile: ").Append(AppiumLogFile).Append("\n");
            sb.Append("  RawCrashData: ").Append(RawCrashData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StepReportDeviceScreenshots);
        }

        /// <summary>
        /// Returns true if StepReportDeviceScreenshots instances are equal
        /// </summary>
        /// <param name="input">Instance of StepReportDeviceScreenshots to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StepReportDeviceScreenshots input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DeviceSnapshotId == input.DeviceSnapshotId ||
                    (this.DeviceSnapshotId != null &&
                    this.DeviceSnapshotId.Equals(input.DeviceSnapshotId))
                ) && 
                (
                    this.Stacktrace == input.Stacktrace ||
                    this.Stacktrace != null &&
                    input.Stacktrace != null &&
                    this.Stacktrace.SequenceEqual(input.Stacktrace)
                ) && 
                (
                    this.CrashData == input.CrashData ||
                    this.CrashData != null &&
                    input.CrashData != null &&
                    this.CrashData.SequenceEqual(input.CrashData)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Screenshot == input.Screenshot ||
                    (this.Screenshot != null &&
                    this.Screenshot.Equals(input.Screenshot))
                ) && 
                (
                    this.LogFile == input.LogFile ||
                    (this.LogFile != null &&
                    this.LogFile.Equals(input.LogFile))
                ) && 
                (
                    this.AppiumLogFile == input.AppiumLogFile ||
                    (this.AppiumLogFile != null &&
                    this.AppiumLogFile.Equals(input.AppiumLogFile))
                ) && 
                (
                    this.RawCrashData == input.RawCrashData ||
                    this.RawCrashData != null &&
                    input.RawCrashData != null &&
                    this.RawCrashData.SequenceEqual(input.RawCrashData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DeviceSnapshotId != null)
                    hashCode = hashCode * 59 + this.DeviceSnapshotId.GetHashCode();
                if (this.Stacktrace != null)
                    hashCode = hashCode * 59 + this.Stacktrace.GetHashCode();
                if (this.CrashData != null)
                    hashCode = hashCode * 59 + this.CrashData.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Screenshot != null)
                    hashCode = hashCode * 59 + this.Screenshot.GetHashCode();
                if (this.LogFile != null)
                    hashCode = hashCode * 59 + this.LogFile.GetHashCode();
                if (this.AppiumLogFile != null)
                    hashCode = hashCode * 59 + this.AppiumLogFile.GetHashCode();
                if (this.RawCrashData != null)
                    hashCode = hashCode * 59 + this.RawCrashData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
