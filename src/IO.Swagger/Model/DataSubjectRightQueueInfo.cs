/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DataSubjectRightQueueInfo
    /// </summary>
    [DataContract]
        public partial class DataSubjectRightQueueInfo :  IEquatable<DataSubjectRightQueueInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataSubjectRightQueueInfo" /> class.
        /// </summary>
        /// <param name="sasUri">sasUri (required).</param>
        /// <param name="queueName">queueName (required).</param>
        /// <param name="expiresAt">expiresAt (required).</param>
        public DataSubjectRightQueueInfo(string sasUri = default(string), string queueName = default(string), DateTime? expiresAt = default(DateTime?))
        {
            // to ensure "sasUri" is required (not null)
            if (sasUri == null)
            {
                throw new InvalidDataException("sasUri is a required property for DataSubjectRightQueueInfo and cannot be null");
            }
            else
            {
                this.SasUri = sasUri;
            }
            // to ensure "queueName" is required (not null)
            if (queueName == null)
            {
                throw new InvalidDataException("queueName is a required property for DataSubjectRightQueueInfo and cannot be null");
            }
            else
            {
                this.QueueName = queueName;
            }
            // to ensure "expiresAt" is required (not null)
            if (expiresAt == null)
            {
                throw new InvalidDataException("expiresAt is a required property for DataSubjectRightQueueInfo and cannot be null");
            }
            else
            {
                this.ExpiresAt = expiresAt;
            }
        }
        
        /// <summary>
        /// Gets or Sets SasUri
        /// </summary>
        [DataMember(Name="sasUri", EmitDefaultValue=false)]
        public string SasUri { get; set; }

        /// <summary>
        /// Gets or Sets QueueName
        /// </summary>
        [DataMember(Name="queueName", EmitDefaultValue=false)]
        public string QueueName { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name="expiresAt", EmitDefaultValue=false)]
        public DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataSubjectRightQueueInfo {\n");
            sb.Append("  SasUri: ").Append(SasUri).Append("\n");
            sb.Append("  QueueName: ").Append(QueueName).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataSubjectRightQueueInfo);
        }

        /// <summary>
        /// Returns true if DataSubjectRightQueueInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DataSubjectRightQueueInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataSubjectRightQueueInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SasUri == input.SasUri ||
                    (this.SasUri != null &&
                    this.SasUri.Equals(input.SasUri))
                ) && 
                (
                    this.QueueName == input.QueueName ||
                    (this.QueueName != null &&
                    this.QueueName.Equals(input.QueueName))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SasUri != null)
                    hashCode = hashCode * 59 + this.SasUri.GetHashCode();
                if (this.QueueName != null)
                    hashCode = hashCode * 59 + this.QueueName.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
