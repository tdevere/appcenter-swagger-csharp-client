/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The status information from Itunes portal
    /// </summary>
    [DataContract]
        public partial class ApplicationStatusResponse :  IEquatable<ApplicationStatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationStatusResponse" /> class.
        /// </summary>
        /// <param name="versionType">The type of version being returned (production/edit/test flight). (required).</param>
        /// <param name="version">The version of the application.</param>
        public ApplicationStatusResponse(string versionType = default(string), string version = default(string))
        {
            // to ensure "versionType" is required (not null)
            if (versionType == null)
            {
                throw new InvalidDataException("versionType is a required property for ApplicationStatusResponse and cannot be null");
            }
            else
            {
                this.VersionType = versionType;
            }
            this.Version = version;
        }
        
        /// <summary>
        /// The type of version being returned (production/edit/test flight).
        /// </summary>
        /// <value>The type of version being returned (production/edit/test flight).</value>
        [DataMember(Name="version_type", EmitDefaultValue=false)]
        public string VersionType { get; set; }

        /// <summary>
        /// The version of the application
        /// </summary>
        /// <value>The version of the application</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationStatusResponse {\n");
            sb.Append("  VersionType: ").Append(VersionType).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationStatusResponse);
        }

        /// <summary>
        /// Returns true if ApplicationStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationStatusResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VersionType == input.VersionType ||
                    (this.VersionType != null &&
                    this.VersionType.Equals(input.VersionType))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VersionType != null)
                    hashCode = hashCode * 59 + this.VersionType.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
