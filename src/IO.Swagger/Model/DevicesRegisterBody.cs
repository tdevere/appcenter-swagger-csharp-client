/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The information for a single iOS device
    /// </summary>
    [DataContract]
        public partial class DevicesRegisterBody :  IEquatable<DevicesRegisterBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesRegisterBody" /> class.
        /// </summary>
        /// <param name="udid">The Unique Device IDentifier of the device (required).</param>
        /// <param name="model">The model identifier of the device, in the format iDeviceM,N (required).</param>
        /// <param name="osBuild">The build number of the last known OS version running on the device.</param>
        /// <param name="osVersion">The last known OS version running on the device.</param>
        /// <param name="serial">The device&#x27;s serial number. Always empty or undefined at present..</param>
        /// <param name="imei">The device&#x27;s International Mobile Equipment Identity number. Always empty or undefined at present..</param>
        /// <param name="ownerId">The user ID of the device owner..</param>
        public DevicesRegisterBody(string udid = default(string), string model = default(string), string osBuild = default(string), string osVersion = default(string), string serial = default(string), string imei = default(string), string ownerId = default(string))
        {
            // to ensure "udid" is required (not null)
            if (udid == null)
            {
                throw new InvalidDataException("udid is a required property for DevicesRegisterBody and cannot be null");
            }
            else
            {
                this.Udid = udid;
            }
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new InvalidDataException("model is a required property for DevicesRegisterBody and cannot be null");
            }
            else
            {
                this.Model = model;
            }
            this.OsBuild = osBuild;
            this.OsVersion = osVersion;
            this.Serial = serial;
            this.Imei = imei;
            this.OwnerId = ownerId;
        }
        
        /// <summary>
        /// The Unique Device IDentifier of the device
        /// </summary>
        /// <value>The Unique Device IDentifier of the device</value>
        [DataMember(Name="udid", EmitDefaultValue=false)]
        public string Udid { get; set; }

        /// <summary>
        /// The model identifier of the device, in the format iDeviceM,N
        /// </summary>
        /// <value>The model identifier of the device, in the format iDeviceM,N</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// The build number of the last known OS version running on the device
        /// </summary>
        /// <value>The build number of the last known OS version running on the device</value>
        [DataMember(Name="os_build", EmitDefaultValue=false)]
        public string OsBuild { get; set; }

        /// <summary>
        /// The last known OS version running on the device
        /// </summary>
        /// <value>The last known OS version running on the device</value>
        [DataMember(Name="os_version", EmitDefaultValue=false)]
        public string OsVersion { get; set; }

        /// <summary>
        /// The device&#x27;s serial number. Always empty or undefined at present.
        /// </summary>
        /// <value>The device&#x27;s serial number. Always empty or undefined at present.</value>
        [DataMember(Name="serial", EmitDefaultValue=false)]
        public string Serial { get; set; }

        /// <summary>
        /// The device&#x27;s International Mobile Equipment Identity number. Always empty or undefined at present.
        /// </summary>
        /// <value>The device&#x27;s International Mobile Equipment Identity number. Always empty or undefined at present.</value>
        [DataMember(Name="imei", EmitDefaultValue=false)]
        public string Imei { get; set; }

        /// <summary>
        /// The user ID of the device owner.
        /// </summary>
        /// <value>The user ID of the device owner.</value>
        [DataMember(Name="owner_id", EmitDefaultValue=false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DevicesRegisterBody {\n");
            sb.Append("  Udid: ").Append(Udid).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  OsBuild: ").Append(OsBuild).Append("\n");
            sb.Append("  OsVersion: ").Append(OsVersion).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  Imei: ").Append(Imei).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DevicesRegisterBody);
        }

        /// <summary>
        /// Returns true if DevicesRegisterBody instances are equal
        /// </summary>
        /// <param name="input">Instance of DevicesRegisterBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DevicesRegisterBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Udid == input.Udid ||
                    (this.Udid != null &&
                    this.Udid.Equals(input.Udid))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.OsBuild == input.OsBuild ||
                    (this.OsBuild != null &&
                    this.OsBuild.Equals(input.OsBuild))
                ) && 
                (
                    this.OsVersion == input.OsVersion ||
                    (this.OsVersion != null &&
                    this.OsVersion.Equals(input.OsVersion))
                ) && 
                (
                    this.Serial == input.Serial ||
                    (this.Serial != null &&
                    this.Serial.Equals(input.Serial))
                ) && 
                (
                    this.Imei == input.Imei ||
                    (this.Imei != null &&
                    this.Imei.Equals(input.Imei))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Udid != null)
                    hashCode = hashCode * 59 + this.Udid.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.OsBuild != null)
                    hashCode = hashCode * 59 + this.OsBuild.GetHashCode();
                if (this.OsVersion != null)
                    hashCode = hashCode * 59 + this.OsVersion.GetHashCode();
                if (this.Serial != null)
                    hashCode = hashCode * 59 + this.Serial.GetHashCode();
                if (this.Imei != null)
                    hashCode = hashCode * 59 + this.Imei.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
