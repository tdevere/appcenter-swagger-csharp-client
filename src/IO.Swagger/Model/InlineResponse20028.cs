/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20028
    /// </summary>
    [DataContract]
        public partial class InlineResponse20028 :  IEquatable<InlineResponse20028>, IValidatableObject
    {
        /// <summary>
        /// The type of the symbol for the current symbol upload
        /// </summary>
        /// <value>The type of the symbol for the current symbol upload</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Apple for value: Apple
            /// </summary>
            [EnumMember(Value = "Apple")]
            Apple = 1,
            /// <summary>
            /// Enum JavaScript for value: JavaScript
            /// </summary>
            [EnumMember(Value = "JavaScript")]
            JavaScript = 2,
            /// <summary>
            /// Enum Breakpad for value: Breakpad
            /// </summary>
            [EnumMember(Value = "Breakpad")]
            Breakpad = 3,
            /// <summary>
            /// Enum AndroidProguard for value: AndroidProguard
            /// </summary>
            [EnumMember(Value = "AndroidProguard")]
            AndroidProguard = 4,
            /// <summary>
            /// Enum UWP for value: UWP
            /// </summary>
            [EnumMember(Value = "UWP")]
            UWP = 5        }
        /// <summary>
        /// The type of the symbol for the current symbol upload
        /// </summary>
        /// <value>The type of the symbol for the current symbol upload</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The origin of the symbol file
        /// </summary>
        /// <value>The origin of the symbol file</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OriginEnum
        {
            /// <summary>
            /// Enum System for value: System
            /// </summary>
            [EnumMember(Value = "System")]
            System = 1,
            /// <summary>
            /// Enum User for value: User
            /// </summary>
            [EnumMember(Value = "User")]
            User = 2        }
        /// <summary>
        /// The origin of the symbol file
        /// </summary>
        /// <value>The origin of the symbol file</value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public OriginEnum Origin { get; set; }
        /// <summary>
        /// Whether the symbol is ignored.
        /// </summary>
        /// <value>Whether the symbol is ignored.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Available for value: available
            /// </summary>
            [EnumMember(Value = "available")]
            Available = 1,
            /// <summary>
            /// Enum Ignored for value: ignored
            /// </summary>
            [EnumMember(Value = "ignored")]
            Ignored = 2        }
        /// <summary>
        /// Whether the symbol is ignored.
        /// </summary>
        /// <value>Whether the symbol is ignored.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20028" /> class.
        /// </summary>
        /// <param name="symbolId">The unique id for this symbol (uuid) (required).</param>
        /// <param name="type">The type of the symbol for the current symbol upload (required).</param>
        /// <param name="appId">The application that this symbol belongs to (required).</param>
        /// <param name="platform">The platform that this symbol is associated with (required).</param>
        /// <param name="url">The path name of the symbol file in blob storage (required).</param>
        /// <param name="origin">The origin of the symbol file (required).</param>
        /// <param name="alternateSymbolIds">The other symbols in the same file (required).</param>
        /// <param name="status">Whether the symbol is ignored. (required).</param>
        /// <param name="version">The version number. Optional for Apple. Required for Android..</param>
        /// <param name="build">The build number. Optional for Apple. Required for Android..</param>
        /// <param name="symbolUploadId">The id of the symbol upload this symbol belongs to. (required).</param>
        public InlineResponse20028(string symbolId = default(string), TypeEnum type = default(TypeEnum), string appId = default(string), string platform = default(string), string url = default(string), OriginEnum origin = default(OriginEnum), List<string> alternateSymbolIds = default(List<string>), StatusEnum status = default(StatusEnum), string version = default(string), string build = default(string), string symbolUploadId = default(string))
        {
            // to ensure "symbolId" is required (not null)
            if (symbolId == null)
            {
                throw new InvalidDataException("symbolId is a required property for InlineResponse20028 and cannot be null");
            }
            else
            {
                this.SymbolId = symbolId;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for InlineResponse20028 and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "appId" is required (not null)
            if (appId == null)
            {
                throw new InvalidDataException("appId is a required property for InlineResponse20028 and cannot be null");
            }
            else
            {
                this.AppId = appId;
            }
            // to ensure "platform" is required (not null)
            if (platform == null)
            {
                throw new InvalidDataException("platform is a required property for InlineResponse20028 and cannot be null");
            }
            else
            {
                this.Platform = platform;
            }
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for InlineResponse20028 and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            // to ensure "origin" is required (not null)
            if (origin == null)
            {
                throw new InvalidDataException("origin is a required property for InlineResponse20028 and cannot be null");
            }
            else
            {
                this.Origin = origin;
            }
            // to ensure "alternateSymbolIds" is required (not null)
            if (alternateSymbolIds == null)
            {
                throw new InvalidDataException("alternateSymbolIds is a required property for InlineResponse20028 and cannot be null");
            }
            else
            {
                this.AlternateSymbolIds = alternateSymbolIds;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for InlineResponse20028 and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "symbolUploadId" is required (not null)
            if (symbolUploadId == null)
            {
                throw new InvalidDataException("symbolUploadId is a required property for InlineResponse20028 and cannot be null");
            }
            else
            {
                this.SymbolUploadId = symbolUploadId;
            }
            this.Version = version;
            this.Build = build;
        }
        
        /// <summary>
        /// The unique id for this symbol (uuid)
        /// </summary>
        /// <value>The unique id for this symbol (uuid)</value>
        [DataMember(Name="symbol_id", EmitDefaultValue=false)]
        public string SymbolId { get; set; }


        /// <summary>
        /// The application that this symbol belongs to
        /// </summary>
        /// <value>The application that this symbol belongs to</value>
        [DataMember(Name="app_id", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// The platform that this symbol is associated with
        /// </summary>
        /// <value>The platform that this symbol is associated with</value>
        [DataMember(Name="platform", EmitDefaultValue=false)]
        public string Platform { get; set; }

        /// <summary>
        /// The path name of the symbol file in blob storage
        /// </summary>
        /// <value>The path name of the symbol file in blob storage</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }


        /// <summary>
        /// The other symbols in the same file
        /// </summary>
        /// <value>The other symbols in the same file</value>
        [DataMember(Name="alternate_symbol_ids", EmitDefaultValue=false)]
        public List<string> AlternateSymbolIds { get; set; }


        /// <summary>
        /// The version number. Optional for Apple. Required for Android.
        /// </summary>
        /// <value>The version number. Optional for Apple. Required for Android.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// The build number. Optional for Apple. Required for Android.
        /// </summary>
        /// <value>The build number. Optional for Apple. Required for Android.</value>
        [DataMember(Name="build", EmitDefaultValue=false)]
        public string Build { get; set; }

        /// <summary>
        /// The id of the symbol upload this symbol belongs to.
        /// </summary>
        /// <value>The id of the symbol upload this symbol belongs to.</value>
        [DataMember(Name="symbol_upload_id", EmitDefaultValue=false)]
        public string SymbolUploadId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20028 {\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  AlternateSymbolIds: ").Append(AlternateSymbolIds).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  SymbolUploadId: ").Append(SymbolUploadId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20028);
        }

        /// <summary>
        /// Returns true if InlineResponse20028 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20028 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20028 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SymbolId == input.SymbolId ||
                    (this.SymbolId != null &&
                    this.SymbolId.Equals(input.SymbolId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.AlternateSymbolIds == input.AlternateSymbolIds ||
                    this.AlternateSymbolIds != null &&
                    input.AlternateSymbolIds != null &&
                    this.AlternateSymbolIds.SequenceEqual(input.AlternateSymbolIds)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Build == input.Build ||
                    (this.Build != null &&
                    this.Build.Equals(input.Build))
                ) && 
                (
                    this.SymbolUploadId == input.SymbolUploadId ||
                    (this.SymbolUploadId != null &&
                    this.SymbolUploadId.Equals(input.SymbolUploadId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SymbolId != null)
                    hashCode = hashCode * 59 + this.SymbolId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.Platform != null)
                    hashCode = hashCode * 59 + this.Platform.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.AlternateSymbolIds != null)
                    hashCode = hashCode * 59 + this.AlternateSymbolIds.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Build != null)
                    hashCode = hashCode * 59 + this.Build.GetHashCode();
                if (this.SymbolUploadId != null)
                    hashCode = hashCode * 59 + this.SymbolUploadId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
