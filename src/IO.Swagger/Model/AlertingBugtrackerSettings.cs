/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Bugtracker specific settings
    /// </summary>
    [DataContract]
        public partial class AlertingBugtrackerSettings :  IEquatable<AlertingBugtrackerSettings>, IValidatableObject
    {
        /// <summary>
        /// type of bugtracker
        /// </summary>
        /// <value>type of bugtracker</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Github for value: github
            /// </summary>
            [EnumMember(Value = "github")]
            Github = 1,
            /// <summary>
            /// Enum Vsts for value: vsts
            /// </summary>
            [EnumMember(Value = "vsts")]
            Vsts = 2,
            /// <summary>
            /// Enum Jira for value: jira
            /// </summary>
            [EnumMember(Value = "jira")]
            Jira = 3        }
        /// <summary>
        /// type of bugtracker
        /// </summary>
        /// <value>type of bugtracker</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertingBugtrackerSettings" /> class.
        /// </summary>
        /// <param name="callbackUrl">callbackUrl.</param>
        /// <param name="ownerName">ownerName (required).</param>
        /// <param name="type">type of bugtracker (required).</param>
        public AlertingBugtrackerSettings(string callbackUrl = default(string), string ownerName = default(string), TypeEnum type = default(TypeEnum))
        {
            // to ensure "ownerName" is required (not null)
            if (ownerName == null)
            {
                throw new InvalidDataException("ownerName is a required property for AlertingBugtrackerSettings and cannot be null");
            }
            else
            {
                this.OwnerName = ownerName;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for AlertingBugtrackerSettings and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.CallbackUrl = callbackUrl;
        }
        
        /// <summary>
        /// Gets or Sets CallbackUrl
        /// </summary>
        [DataMember(Name="callback_url", EmitDefaultValue=false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Gets or Sets OwnerName
        /// </summary>
        [DataMember(Name="owner_name", EmitDefaultValue=false)]
        public string OwnerName { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertingBugtrackerSettings {\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertingBugtrackerSettings);
        }

        /// <summary>
        /// Returns true if AlertingBugtrackerSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertingBugtrackerSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertingBugtrackerSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.OwnerName == input.OwnerName ||
                    (this.OwnerName != null &&
                    this.OwnerName.Equals(input.OwnerName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallbackUrl != null)
                    hashCode = hashCode * 59 + this.CallbackUrl.GetHashCode();
                if (this.OwnerName != null)
                    hashCode = hashCode * 59 + this.OwnerName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
