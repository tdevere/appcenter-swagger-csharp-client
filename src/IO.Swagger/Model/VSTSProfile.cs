/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// VSTS user profile
    /// </summary>
    [DataContract]
        public partial class VSTSProfile :  IEquatable<VSTSProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VSTSProfile" /> class.
        /// </summary>
        /// <param name="id">Profile id.</param>
        /// <param name="displayName">Profile display name.</param>
        /// <param name="publicAlias">Profile alias.</param>
        /// <param name="emailAddress">Profile email.</param>
        public VSTSProfile(string id = default(string), string displayName = default(string), string publicAlias = default(string), string emailAddress = default(string))
        {
            this.Id = id;
            this.DisplayName = displayName;
            this.PublicAlias = publicAlias;
            this.EmailAddress = emailAddress;
        }
        
        /// <summary>
        /// Profile id
        /// </summary>
        /// <value>Profile id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Profile display name
        /// </summary>
        /// <value>Profile display name</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Profile alias
        /// </summary>
        /// <value>Profile alias</value>
        [DataMember(Name="publicAlias", EmitDefaultValue=false)]
        public string PublicAlias { get; set; }

        /// <summary>
        /// Profile email
        /// </summary>
        /// <value>Profile email</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VSTSProfile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  PublicAlias: ").Append(PublicAlias).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VSTSProfile);
        }

        /// <summary>
        /// Returns true if VSTSProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of VSTSProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VSTSProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.PublicAlias == input.PublicAlias ||
                    (this.PublicAlias != null &&
                    this.PublicAlias.Equals(input.PublicAlias))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.PublicAlias != null)
                    hashCode = hashCode * 59 + this.PublicAlias.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
