/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TestReportTests
    /// </summary>
    [DataContract]
        public partial class TestReportTests :  IEquatable<TestReportTests>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestReportTests" /> class.
        /// </summary>
        /// <param name="testName">testName.</param>
        /// <param name="runs">runs.</param>
        /// <param name="peakMemory">peakMemory.</param>
        /// <param name="peakDuration">peakDuration.</param>
        public TestReportTests(string testName = default(string), List<TestReportRuns> runs = default(List<TestReportRuns>), decimal? peakMemory = default(decimal?), decimal? peakDuration = default(decimal?))
        {
            this.TestName = testName;
            this.Runs = runs;
            this.PeakMemory = peakMemory;
            this.PeakDuration = peakDuration;
        }
        
        /// <summary>
        /// Gets or Sets TestName
        /// </summary>
        [DataMember(Name="testName", EmitDefaultValue=false)]
        public string TestName { get; set; }

        /// <summary>
        /// Gets or Sets Runs
        /// </summary>
        [DataMember(Name="runs", EmitDefaultValue=false)]
        public List<TestReportRuns> Runs { get; set; }

        /// <summary>
        /// Gets or Sets PeakMemory
        /// </summary>
        [DataMember(Name="peakMemory", EmitDefaultValue=false)]
        public decimal? PeakMemory { get; set; }

        /// <summary>
        /// Gets or Sets PeakDuration
        /// </summary>
        [DataMember(Name="peakDuration", EmitDefaultValue=false)]
        public decimal? PeakDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestReportTests {\n");
            sb.Append("  TestName: ").Append(TestName).Append("\n");
            sb.Append("  Runs: ").Append(Runs).Append("\n");
            sb.Append("  PeakMemory: ").Append(PeakMemory).Append("\n");
            sb.Append("  PeakDuration: ").Append(PeakDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestReportTests);
        }

        /// <summary>
        /// Returns true if TestReportTests instances are equal
        /// </summary>
        /// <param name="input">Instance of TestReportTests to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestReportTests input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TestName == input.TestName ||
                    (this.TestName != null &&
                    this.TestName.Equals(input.TestName))
                ) && 
                (
                    this.Runs == input.Runs ||
                    this.Runs != null &&
                    input.Runs != null &&
                    this.Runs.SequenceEqual(input.Runs)
                ) && 
                (
                    this.PeakMemory == input.PeakMemory ||
                    (this.PeakMemory != null &&
                    this.PeakMemory.Equals(input.PeakMemory))
                ) && 
                (
                    this.PeakDuration == input.PeakDuration ||
                    (this.PeakDuration != null &&
                    this.PeakDuration.Equals(input.PeakDuration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TestName != null)
                    hashCode = hashCode * 59 + this.TestName.GetHashCode();
                if (this.Runs != null)
                    hashCode = hashCode * 59 + this.Runs.GetHashCode();
                if (this.PeakMemory != null)
                    hashCode = hashCode * 59 + this.PeakMemory.GetHashCode();
                if (this.PeakDuration != null)
                    hashCode = hashCode * 59 + this.PeakDuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
