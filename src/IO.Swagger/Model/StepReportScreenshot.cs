/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StepReportScreenshot
    /// </summary>
    [DataContract]
        public partial class StepReportScreenshot :  IEquatable<StepReportScreenshot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StepReportScreenshot" /> class.
        /// </summary>
        /// <param name="urls">urls (required).</param>
        /// <param name="rotation">rotation (required).</param>
        /// <param name="landscape">landscape (required).</param>
        public StepReportScreenshot(StepReportScreenshotUrls urls = default(StepReportScreenshotUrls), decimal? rotation = default(decimal?), bool? landscape = default(bool?))
        {
            // to ensure "urls" is required (not null)
            if (urls == null)
            {
                throw new InvalidDataException("urls is a required property for StepReportScreenshot and cannot be null");
            }
            else
            {
                this.Urls = urls;
            }
            // to ensure "rotation" is required (not null)
            if (rotation == null)
            {
                throw new InvalidDataException("rotation is a required property for StepReportScreenshot and cannot be null");
            }
            else
            {
                this.Rotation = rotation;
            }
            // to ensure "landscape" is required (not null)
            if (landscape == null)
            {
                throw new InvalidDataException("landscape is a required property for StepReportScreenshot and cannot be null");
            }
            else
            {
                this.Landscape = landscape;
            }
        }
        
        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name="urls", EmitDefaultValue=false)]
        public StepReportScreenshotUrls Urls { get; set; }

        /// <summary>
        /// Gets or Sets Rotation
        /// </summary>
        [DataMember(Name="rotation", EmitDefaultValue=false)]
        public decimal? Rotation { get; set; }

        /// <summary>
        /// Gets or Sets Landscape
        /// </summary>
        [DataMember(Name="landscape", EmitDefaultValue=false)]
        public bool? Landscape { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StepReportScreenshot {\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("  Landscape: ").Append(Landscape).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StepReportScreenshot);
        }

        /// <summary>
        /// Returns true if StepReportScreenshot instances are equal
        /// </summary>
        /// <param name="input">Instance of StepReportScreenshot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StepReportScreenshot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Urls == input.Urls ||
                    (this.Urls != null &&
                    this.Urls.Equals(input.Urls))
                ) && 
                (
                    this.Rotation == input.Rotation ||
                    (this.Rotation != null &&
                    this.Rotation.Equals(input.Rotation))
                ) && 
                (
                    this.Landscape == input.Landscape ||
                    (this.Landscape != null &&
                    this.Landscape.Equals(input.Landscape))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Urls != null)
                    hashCode = hashCode * 59 + this.Urls.GetHashCode();
                if (this.Rotation != null)
                    hashCode = hashCode * 59 + this.Rotation.GetHashCode();
                if (this.Landscape != null)
                    hashCode = hashCode * 59 + this.Landscape.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
