/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Itunes teams details .
    /// </summary>
    [DataContract]
        public partial class AllItunesAppsResponse :  IEquatable<AllItunesAppsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllItunesAppsResponse" /> class.
        /// </summary>
        /// <param name="appleId">apple id for app team id..</param>
        /// <param name="bundleId">bundle identifier of app.</param>
        /// <param name="name">App Name.</param>
        /// <param name="iconUrl">url for the app icon from app store.</param>
        public AllItunesAppsResponse(string appleId = default(string), string bundleId = default(string), string name = default(string), string iconUrl = default(string))
        {
            this.AppleId = appleId;
            this.BundleId = bundleId;
            this.Name = name;
            this.IconUrl = iconUrl;
        }
        
        /// <summary>
        /// apple id for app team id.
        /// </summary>
        /// <value>apple id for app team id.</value>
        [DataMember(Name="apple_id", EmitDefaultValue=false)]
        public string AppleId { get; set; }

        /// <summary>
        /// bundle identifier of app
        /// </summary>
        /// <value>bundle identifier of app</value>
        [DataMember(Name="bundle_id", EmitDefaultValue=false)]
        public string BundleId { get; set; }

        /// <summary>
        /// App Name
        /// </summary>
        /// <value>App Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// url for the app icon from app store
        /// </summary>
        /// <value>url for the app icon from app store</value>
        [DataMember(Name="iconUrl", EmitDefaultValue=false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AllItunesAppsResponse {\n");
            sb.Append("  AppleId: ").Append(AppleId).Append("\n");
            sb.Append("  BundleId: ").Append(BundleId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllItunesAppsResponse);
        }

        /// <summary>
        /// Returns true if AllItunesAppsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AllItunesAppsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllItunesAppsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppleId == input.AppleId ||
                    (this.AppleId != null &&
                    this.AppleId.Equals(input.AppleId))
                ) && 
                (
                    this.BundleId == input.BundleId ||
                    (this.BundleId != null &&
                    this.BundleId.Equals(input.BundleId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppleId != null)
                    hashCode = hashCode * 59 + this.AppleId.GetHashCode();
                if (this.BundleId != null)
                    hashCode = hashCode * 59 + this.BundleId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.IconUrl != null)
                    hashCode = hashCode * 59 + this.IconUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
