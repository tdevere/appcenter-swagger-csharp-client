/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReleaseIdTestersBody
    /// </summary>
    [DataContract]
        public partial class ReleaseIdTestersBody :  IEquatable<ReleaseIdTestersBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseIdTestersBody" /> class.
        /// </summary>
        /// <param name="mandatoryUpdate">Flag to mark the release for the provided destinations as mandatory.</param>
        /// <param name="email">Tester&#x27;s email address (required).</param>
        /// <param name="notifyTesters">Flag to enable or disable notifications to testers (default to true).</param>
        public ReleaseIdTestersBody(bool? mandatoryUpdate = default(bool?), string email = default(string), bool? notifyTesters = true)
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for ReleaseIdTestersBody and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            this.MandatoryUpdate = mandatoryUpdate;
            // use default value if no "notifyTesters" provided
            if (notifyTesters == null)
            {
                this.NotifyTesters = true;
            }
            else
            {
                this.NotifyTesters = notifyTesters;
            }
        }
        
        /// <summary>
        /// Flag to mark the release for the provided destinations as mandatory
        /// </summary>
        /// <value>Flag to mark the release for the provided destinations as mandatory</value>
        [DataMember(Name="mandatory_update", EmitDefaultValue=false)]
        public bool? MandatoryUpdate { get; set; }

        /// <summary>
        /// Tester&#x27;s email address
        /// </summary>
        /// <value>Tester&#x27;s email address</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Flag to enable or disable notifications to testers
        /// </summary>
        /// <value>Flag to enable or disable notifications to testers</value>
        [DataMember(Name="notify_testers", EmitDefaultValue=false)]
        public bool? NotifyTesters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReleaseIdTestersBody {\n");
            sb.Append("  MandatoryUpdate: ").Append(MandatoryUpdate).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  NotifyTesters: ").Append(NotifyTesters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseIdTestersBody);
        }

        /// <summary>
        /// Returns true if ReleaseIdTestersBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseIdTestersBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseIdTestersBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MandatoryUpdate == input.MandatoryUpdate ||
                    (this.MandatoryUpdate != null &&
                    this.MandatoryUpdate.Equals(input.MandatoryUpdate))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.NotifyTesters == input.NotifyTesters ||
                    (this.NotifyTesters != null &&
                    this.NotifyTesters.Equals(input.NotifyTesters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MandatoryUpdate != null)
                    hashCode = hashCode * 59 + this.MandatoryUpdate.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.NotifyTesters != null)
                    hashCode = hashCode * 59 + this.NotifyTesters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
