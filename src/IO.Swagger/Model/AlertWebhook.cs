/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Alerting webhook
    /// </summary>
    [DataContract]
        public partial class AlertWebhook :  IEquatable<AlertWebhook>, IValidatableObject
    {
        /// <summary>
        /// Alerting EventTypes enum
        /// </summary>
        /// <value>Alerting EventTypes enum</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EventTypesEnum
        {
            /// <summary>
            /// Enum NewCrashGroupCreated for value: newCrashGroupCreated
            /// </summary>
            [EnumMember(Value = "newCrashGroupCreated")]
            NewCrashGroupCreated = 1,
            /// <summary>
            /// Enum NewAppReleased for value: newAppReleased
            /// </summary>
            [EnumMember(Value = "newAppReleased")]
            NewAppReleased = 2        }
        /// <summary>
        /// Event types enabled for webhook
        /// </summary>
        /// <value>Event types enabled for webhook</value>
        [DataMember(Name="event_types", EmitDefaultValue=false)]
        public List<EventTypesEnum> EventTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertWebhook" /> class.
        /// </summary>
        /// <param name="id">The unique id (UUID) of the webhook.</param>
        /// <param name="name">display name of the webhook (required).</param>
        /// <param name="url">target url of the webhook (required).</param>
        /// <param name="enabled">Allows eanble/disable webhook.</param>
        /// <param name="eventTypes">Event types enabled for webhook (required).</param>
        public AlertWebhook(string id = default(string), string name = default(string), string url = default(string), bool? enabled = default(bool?), List<EventTypesEnum> eventTypes = default(List<EventTypesEnum>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for AlertWebhook and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for AlertWebhook and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            // to ensure "eventTypes" is required (not null)
            if (eventTypes == null)
            {
                throw new InvalidDataException("eventTypes is a required property for AlertWebhook and cannot be null");
            }
            else
            {
                this.EventTypes = eventTypes;
            }
            this.Id = id;
            this.Enabled = enabled;
        }
        
        /// <summary>
        /// The unique id (UUID) of the webhook
        /// </summary>
        /// <value>The unique id (UUID) of the webhook</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// display name of the webhook
        /// </summary>
        /// <value>display name of the webhook</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// target url of the webhook
        /// </summary>
        /// <value>target url of the webhook</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Allows eanble/disable webhook
        /// </summary>
        /// <value>Allows eanble/disable webhook</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertWebhook {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertWebhook);
        }

        /// <summary>
        /// Returns true if AlertWebhook instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertWebhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertWebhook input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.EventTypes == input.EventTypes ||
                    this.EventTypes != null &&
                    input.EventTypes != null &&
                    this.EventTypes.SequenceEqual(input.EventTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.EventTypes != null)
                    hashCode = hashCode * 59 + this.EventTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
