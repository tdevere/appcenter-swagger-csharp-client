/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HandledErrorsErrors
    /// </summary>
    [DataContract]
        public partial class HandledErrorsErrors :  IEquatable<HandledErrorsErrors>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HandledErrorsErrors" /> class.
        /// </summary>
        /// <param name="errorId">errorId.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="deviceName">deviceName.</param>
        /// <param name="osVersion">osVersion.</param>
        /// <param name="osType">osType.</param>
        /// <param name="country">country.</param>
        /// <param name="language">language.</param>
        /// <param name="userId">userId.</param>
        /// <param name="hasBreadcrumbs">hasBreadcrumbs.</param>
        /// <param name="hasAttachments">hasAttachments.</param>
        public HandledErrorsErrors(string errorId = default(string), DateTime? timestamp = default(DateTime?), string deviceName = default(string), string osVersion = default(string), string osType = default(string), string country = default(string), string language = default(string), string userId = default(string), bool? hasBreadcrumbs = default(bool?), bool? hasAttachments = default(bool?))
        {
            this.ErrorId = errorId;
            this.Timestamp = timestamp;
            this.DeviceName = deviceName;
            this.OsVersion = osVersion;
            this.OsType = osType;
            this.Country = country;
            this.Language = language;
            this.UserId = userId;
            this.HasBreadcrumbs = hasBreadcrumbs;
            this.HasAttachments = hasAttachments;
        }
        
        /// <summary>
        /// Gets or Sets ErrorId
        /// </summary>
        [DataMember(Name="errorId", EmitDefaultValue=false)]
        public string ErrorId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets DeviceName
        /// </summary>
        [DataMember(Name="deviceName", EmitDefaultValue=false)]
        public string DeviceName { get; set; }

        /// <summary>
        /// Gets or Sets OsVersion
        /// </summary>
        [DataMember(Name="osVersion", EmitDefaultValue=false)]
        public string OsVersion { get; set; }

        /// <summary>
        /// Gets or Sets OsType
        /// </summary>
        [DataMember(Name="osType", EmitDefaultValue=false)]
        public string OsType { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets HasBreadcrumbs
        /// </summary>
        [DataMember(Name="hasBreadcrumbs", EmitDefaultValue=false)]
        public bool? HasBreadcrumbs { get; set; }

        /// <summary>
        /// Gets or Sets HasAttachments
        /// </summary>
        [DataMember(Name="hasAttachments", EmitDefaultValue=false)]
        public bool? HasAttachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HandledErrorsErrors {\n");
            sb.Append("  ErrorId: ").Append(ErrorId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  DeviceName: ").Append(DeviceName).Append("\n");
            sb.Append("  OsVersion: ").Append(OsVersion).Append("\n");
            sb.Append("  OsType: ").Append(OsType).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  HasBreadcrumbs: ").Append(HasBreadcrumbs).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HandledErrorsErrors);
        }

        /// <summary>
        /// Returns true if HandledErrorsErrors instances are equal
        /// </summary>
        /// <param name="input">Instance of HandledErrorsErrors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HandledErrorsErrors input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ErrorId == input.ErrorId ||
                    (this.ErrorId != null &&
                    this.ErrorId.Equals(input.ErrorId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.DeviceName == input.DeviceName ||
                    (this.DeviceName != null &&
                    this.DeviceName.Equals(input.DeviceName))
                ) && 
                (
                    this.OsVersion == input.OsVersion ||
                    (this.OsVersion != null &&
                    this.OsVersion.Equals(input.OsVersion))
                ) && 
                (
                    this.OsType == input.OsType ||
                    (this.OsType != null &&
                    this.OsType.Equals(input.OsType))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.HasBreadcrumbs == input.HasBreadcrumbs ||
                    (this.HasBreadcrumbs != null &&
                    this.HasBreadcrumbs.Equals(input.HasBreadcrumbs))
                ) && 
                (
                    this.HasAttachments == input.HasAttachments ||
                    (this.HasAttachments != null &&
                    this.HasAttachments.Equals(input.HasAttachments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorId != null)
                    hashCode = hashCode * 59 + this.ErrorId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.DeviceName != null)
                    hashCode = hashCode * 59 + this.DeviceName.GetHashCode();
                if (this.OsVersion != null)
                    hashCode = hashCode * 59 + this.OsVersion.GetHashCode();
                if (this.OsType != null)
                    hashCode = hashCode * 59 + this.OsType.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.HasBreadcrumbs != null)
                    hashCode = hashCode * 59 + this.HasBreadcrumbs.GetHashCode();
                if (this.HasAttachments != null)
                    hashCode = hashCode * 59 + this.HasAttachments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
