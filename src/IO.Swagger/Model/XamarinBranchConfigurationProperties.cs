/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Build configuration for Xamarin projects
    /// </summary>
    [DataContract]
        public partial class XamarinBranchConfigurationProperties :  IEquatable<XamarinBranchConfigurationProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XamarinBranchConfigurationProperties" /> class.
        /// </summary>
        /// <param name="slnPath">slnPath.</param>
        /// <param name="isSimBuild">isSimBuild.</param>
        /// <param name="args">args.</param>
        /// <param name="configuration">configuration.</param>
        /// <param name="p12File">p12File.</param>
        /// <param name="p12Pwd">p12Pwd.</param>
        /// <param name="provProfile">provProfile.</param>
        /// <param name="monoVersion">monoVersion.</param>
        /// <param name="sdkBundle">sdkBundle.</param>
        /// <param name="symlink">Symlink of the SDK Bundle and Mono installation. The build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building. .</param>
        public XamarinBranchConfigurationProperties(string slnPath = default(string), bool? isSimBuild = default(bool?), string args = default(string), string configuration = default(string), string p12File = default(string), string p12Pwd = default(string), string provProfile = default(string), string monoVersion = default(string), string sdkBundle = default(string), string symlink = default(string))
        {
            this.SlnPath = slnPath;
            this.IsSimBuild = isSimBuild;
            this.Args = args;
            this.Configuration = configuration;
            this.P12File = p12File;
            this.P12Pwd = p12Pwd;
            this.ProvProfile = provProfile;
            this.MonoVersion = monoVersion;
            this.SdkBundle = sdkBundle;
            this.Symlink = symlink;
        }
        
        /// <summary>
        /// Gets or Sets SlnPath
        /// </summary>
        [DataMember(Name="slnPath", EmitDefaultValue=false)]
        public string SlnPath { get; set; }

        /// <summary>
        /// Gets or Sets IsSimBuild
        /// </summary>
        [DataMember(Name="isSimBuild", EmitDefaultValue=false)]
        public bool? IsSimBuild { get; set; }

        /// <summary>
        /// Gets or Sets Args
        /// </summary>
        [DataMember(Name="args", EmitDefaultValue=false)]
        public string Args { get; set; }

        /// <summary>
        /// Gets or Sets Configuration
        /// </summary>
        [DataMember(Name="configuration", EmitDefaultValue=false)]
        public string Configuration { get; set; }

        /// <summary>
        /// Gets or Sets P12File
        /// </summary>
        [DataMember(Name="p12File", EmitDefaultValue=false)]
        public string P12File { get; set; }

        /// <summary>
        /// Gets or Sets P12Pwd
        /// </summary>
        [DataMember(Name="p12Pwd", EmitDefaultValue=false)]
        public string P12Pwd { get; set; }

        /// <summary>
        /// Gets or Sets ProvProfile
        /// </summary>
        [DataMember(Name="provProfile", EmitDefaultValue=false)]
        public string ProvProfile { get; set; }

        /// <summary>
        /// Gets or Sets MonoVersion
        /// </summary>
        [DataMember(Name="monoVersion", EmitDefaultValue=false)]
        public string MonoVersion { get; set; }

        /// <summary>
        /// Gets or Sets SdkBundle
        /// </summary>
        [DataMember(Name="sdkBundle", EmitDefaultValue=false)]
        public string SdkBundle { get; set; }

        /// <summary>
        /// Symlink of the SDK Bundle and Mono installation. The build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building. 
        /// </summary>
        /// <value>Symlink of the SDK Bundle and Mono installation. The build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building. </value>
        [DataMember(Name="symlink", EmitDefaultValue=false)]
        public string Symlink { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XamarinBranchConfigurationProperties {\n");
            sb.Append("  SlnPath: ").Append(SlnPath).Append("\n");
            sb.Append("  IsSimBuild: ").Append(IsSimBuild).Append("\n");
            sb.Append("  Args: ").Append(Args).Append("\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("  P12File: ").Append(P12File).Append("\n");
            sb.Append("  P12Pwd: ").Append(P12Pwd).Append("\n");
            sb.Append("  ProvProfile: ").Append(ProvProfile).Append("\n");
            sb.Append("  MonoVersion: ").Append(MonoVersion).Append("\n");
            sb.Append("  SdkBundle: ").Append(SdkBundle).Append("\n");
            sb.Append("  Symlink: ").Append(Symlink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XamarinBranchConfigurationProperties);
        }

        /// <summary>
        /// Returns true if XamarinBranchConfigurationProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of XamarinBranchConfigurationProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XamarinBranchConfigurationProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SlnPath == input.SlnPath ||
                    (this.SlnPath != null &&
                    this.SlnPath.Equals(input.SlnPath))
                ) && 
                (
                    this.IsSimBuild == input.IsSimBuild ||
                    (this.IsSimBuild != null &&
                    this.IsSimBuild.Equals(input.IsSimBuild))
                ) && 
                (
                    this.Args == input.Args ||
                    (this.Args != null &&
                    this.Args.Equals(input.Args))
                ) && 
                (
                    this.Configuration == input.Configuration ||
                    (this.Configuration != null &&
                    this.Configuration.Equals(input.Configuration))
                ) && 
                (
                    this.P12File == input.P12File ||
                    (this.P12File != null &&
                    this.P12File.Equals(input.P12File))
                ) && 
                (
                    this.P12Pwd == input.P12Pwd ||
                    (this.P12Pwd != null &&
                    this.P12Pwd.Equals(input.P12Pwd))
                ) && 
                (
                    this.ProvProfile == input.ProvProfile ||
                    (this.ProvProfile != null &&
                    this.ProvProfile.Equals(input.ProvProfile))
                ) && 
                (
                    this.MonoVersion == input.MonoVersion ||
                    (this.MonoVersion != null &&
                    this.MonoVersion.Equals(input.MonoVersion))
                ) && 
                (
                    this.SdkBundle == input.SdkBundle ||
                    (this.SdkBundle != null &&
                    this.SdkBundle.Equals(input.SdkBundle))
                ) && 
                (
                    this.Symlink == input.Symlink ||
                    (this.Symlink != null &&
                    this.Symlink.Equals(input.Symlink))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SlnPath != null)
                    hashCode = hashCode * 59 + this.SlnPath.GetHashCode();
                if (this.IsSimBuild != null)
                    hashCode = hashCode * 59 + this.IsSimBuild.GetHashCode();
                if (this.Args != null)
                    hashCode = hashCode * 59 + this.Args.GetHashCode();
                if (this.Configuration != null)
                    hashCode = hashCode * 59 + this.Configuration.GetHashCode();
                if (this.P12File != null)
                    hashCode = hashCode * 59 + this.P12File.GetHashCode();
                if (this.P12Pwd != null)
                    hashCode = hashCode * 59 + this.P12Pwd.GetHashCode();
                if (this.ProvProfile != null)
                    hashCode = hashCode * 59 + this.ProvProfile.GetHashCode();
                if (this.MonoVersion != null)
                    hashCode = hashCode * 59 + this.MonoVersion.GetHashCode();
                if (this.SdkBundle != null)
                    hashCode = hashCode * 59 + this.SdkBundle.GetHashCode();
                if (this.Symlink != null)
                    hashCode = hashCode * 59 + this.Symlink.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
