/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20087
    /// </summary>
    [DataContract]
        public partial class InlineResponse20087 :  IEquatable<InlineResponse20087>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20087" /> class.
        /// </summary>
        /// <param name="totalDevices">totalDevices.</param>
        /// <param name="totalDevicesWithEvent">totalDevicesWithEvent.</param>
        /// <param name="previousTotalDevicesWithEvent">previousTotalDevicesWithEvent.</param>
        /// <param name="devicesCount">devicesCount.</param>
        public InlineResponse20087(long? totalDevices = default(long?), long? totalDevicesWithEvent = default(long?), long? previousTotalDevicesWithEvent = default(long?), List<InlineResponse20078> devicesCount = default(List<InlineResponse20078>))
        {
            this.TotalDevices = totalDevices;
            this.TotalDevicesWithEvent = totalDevicesWithEvent;
            this.PreviousTotalDevicesWithEvent = previousTotalDevicesWithEvent;
            this.DevicesCount = devicesCount;
        }
        
        /// <summary>
        /// Gets or Sets TotalDevices
        /// </summary>
        [DataMember(Name="total_devices", EmitDefaultValue=false)]
        public long? TotalDevices { get; set; }

        /// <summary>
        /// Gets or Sets TotalDevicesWithEvent
        /// </summary>
        [DataMember(Name="total_devices_with_event", EmitDefaultValue=false)]
        public long? TotalDevicesWithEvent { get; set; }

        /// <summary>
        /// Gets or Sets PreviousTotalDevicesWithEvent
        /// </summary>
        [DataMember(Name="previous_total_devices_with_event", EmitDefaultValue=false)]
        public long? PreviousTotalDevicesWithEvent { get; set; }

        /// <summary>
        /// Gets or Sets DevicesCount
        /// </summary>
        [DataMember(Name="devices_count", EmitDefaultValue=false)]
        public List<InlineResponse20078> DevicesCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20087 {\n");
            sb.Append("  TotalDevices: ").Append(TotalDevices).Append("\n");
            sb.Append("  TotalDevicesWithEvent: ").Append(TotalDevicesWithEvent).Append("\n");
            sb.Append("  PreviousTotalDevicesWithEvent: ").Append(PreviousTotalDevicesWithEvent).Append("\n");
            sb.Append("  DevicesCount: ").Append(DevicesCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20087);
        }

        /// <summary>
        /// Returns true if InlineResponse20087 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20087 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20087 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalDevices == input.TotalDevices ||
                    (this.TotalDevices != null &&
                    this.TotalDevices.Equals(input.TotalDevices))
                ) && 
                (
                    this.TotalDevicesWithEvent == input.TotalDevicesWithEvent ||
                    (this.TotalDevicesWithEvent != null &&
                    this.TotalDevicesWithEvent.Equals(input.TotalDevicesWithEvent))
                ) && 
                (
                    this.PreviousTotalDevicesWithEvent == input.PreviousTotalDevicesWithEvent ||
                    (this.PreviousTotalDevicesWithEvent != null &&
                    this.PreviousTotalDevicesWithEvent.Equals(input.PreviousTotalDevicesWithEvent))
                ) && 
                (
                    this.DevicesCount == input.DevicesCount ||
                    this.DevicesCount != null &&
                    input.DevicesCount != null &&
                    this.DevicesCount.SequenceEqual(input.DevicesCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalDevices != null)
                    hashCode = hashCode * 59 + this.TotalDevices.GetHashCode();
                if (this.TotalDevicesWithEvent != null)
                    hashCode = hashCode * 59 + this.TotalDevicesWithEvent.GetHashCode();
                if (this.PreviousTotalDevicesWithEvent != null)
                    hashCode = hashCode * 59 + this.PreviousTotalDevicesWithEvent.GetHashCode();
                if (this.DevicesCount != null)
                    hashCode = hashCode * 59 + this.DevicesCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
