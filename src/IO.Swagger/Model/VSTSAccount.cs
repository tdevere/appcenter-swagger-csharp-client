/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// VSTS account with projects list and user info
    /// </summary>
    [DataContract]
        public partial class VSTSAccount :  IEquatable<VSTSAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VSTSAccount" /> class.
        /// </summary>
        /// <param name="accountId">Account id.</param>
        /// <param name="accountUri">Account uri.</param>
        /// <param name="accountName">Account name.</param>
        /// <param name="accountType">Account type.</param>
        /// <param name="accountStatus">Account status.</param>
        /// <param name="user">user.</param>
        /// <param name="projects">Account projects.</param>
        public VSTSAccount(string accountId = default(string), string accountUri = default(string), string accountName = default(string), string accountType = default(string), string accountStatus = default(string), VSTSAccountUser user = default(VSTSAccountUser), List<VSTSAccountProjects> projects = default(List<VSTSAccountProjects>))
        {
            this.AccountId = accountId;
            this.AccountUri = accountUri;
            this.AccountName = accountName;
            this.AccountType = accountType;
            this.AccountStatus = accountStatus;
            this.User = user;
            this.Projects = projects;
        }
        
        /// <summary>
        /// Account id
        /// </summary>
        /// <value>Account id</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Account uri
        /// </summary>
        /// <value>Account uri</value>
        [DataMember(Name="accountUri", EmitDefaultValue=false)]
        public string AccountUri { get; set; }

        /// <summary>
        /// Account name
        /// </summary>
        /// <value>Account name</value>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Account type
        /// </summary>
        /// <value>Account type</value>
        [DataMember(Name="accountType", EmitDefaultValue=false)]
        public string AccountType { get; set; }

        /// <summary>
        /// Account status
        /// </summary>
        /// <value>Account status</value>
        [DataMember(Name="accountStatus", EmitDefaultValue=false)]
        public string AccountStatus { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public VSTSAccountUser User { get; set; }

        /// <summary>
        /// Account projects
        /// </summary>
        /// <value>Account projects</value>
        [DataMember(Name="projects", EmitDefaultValue=false)]
        public List<VSTSAccountProjects> Projects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VSTSAccount {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountUri: ").Append(AccountUri).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VSTSAccount);
        }

        /// <summary>
        /// Returns true if VSTSAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of VSTSAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VSTSAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountUri == input.AccountUri ||
                    (this.AccountUri != null &&
                    this.AccountUri.Equals(input.AccountUri))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.AccountStatus == input.AccountStatus ||
                    (this.AccountStatus != null &&
                    this.AccountStatus.Equals(input.AccountStatus))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Projects == input.Projects ||
                    this.Projects != null &&
                    input.Projects != null &&
                    this.Projects.SequenceEqual(input.Projects)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AccountUri != null)
                    hashCode = hashCode * 59 + this.AccountUri.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.AccountStatus != null)
                    hashCode = hashCode * 59 + this.AccountStatus.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Projects != null)
                    hashCode = hashCode * 59 + this.Projects.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
