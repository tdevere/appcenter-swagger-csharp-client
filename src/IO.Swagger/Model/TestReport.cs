/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TestReport
    /// </summary>
    [DataContract]
        public partial class TestReport :  IEquatable<TestReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestReport" /> class.
        /// </summary>
        /// <param name="appUploadId">appUploadId (required).</param>
        /// <param name="date">date (required).</param>
        /// <param name="testType">testType (required).</param>
        /// <param name="platform">platform (required).</param>
        /// <param name="stats">stats (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="schemaVersion">schemaVersion (required).</param>
        /// <param name="revision">revision (required).</param>
        /// <param name="features">features (required).</param>
        /// <param name="finishedDeviceSnapshots">finishedDeviceSnapshots (required).</param>
        /// <param name="deviceLogs">deviceLogs (required).</param>
        /// <param name="dateFinished">dateFinished (required).</param>
        /// <param name="errorMessage">errorMessage.</param>
        /// <param name="snapshotFatalErrors">snapshotFatalErrors.</param>
        public TestReport(string appUploadId = default(string), string date = default(string), string testType = default(string), string platform = default(string), TestReportStats stats = default(TestReportStats), string id = default(string), decimal? schemaVersion = default(decimal?), decimal? revision = default(decimal?), List<TestReportFeatures> features = default(List<TestReportFeatures>), List<string> finishedDeviceSnapshots = default(List<string>), List<TestReportDeviceLogs> deviceLogs = default(List<TestReportDeviceLogs>), string dateFinished = default(string), string errorMessage = default(string), List<TestReportSnapshotFatalErrors> snapshotFatalErrors = default(List<TestReportSnapshotFatalErrors>))
        {
            // to ensure "appUploadId" is required (not null)
            if (appUploadId == null)
            {
                throw new InvalidDataException("appUploadId is a required property for TestReport and cannot be null");
            }
            else
            {
                this.AppUploadId = appUploadId;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for TestReport and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "testType" is required (not null)
            if (testType == null)
            {
                throw new InvalidDataException("testType is a required property for TestReport and cannot be null");
            }
            else
            {
                this.TestType = testType;
            }
            // to ensure "platform" is required (not null)
            if (platform == null)
            {
                throw new InvalidDataException("platform is a required property for TestReport and cannot be null");
            }
            else
            {
                this.Platform = platform;
            }
            // to ensure "stats" is required (not null)
            if (stats == null)
            {
                throw new InvalidDataException("stats is a required property for TestReport and cannot be null");
            }
            else
            {
                this.Stats = stats;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for TestReport and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "schemaVersion" is required (not null)
            if (schemaVersion == null)
            {
                throw new InvalidDataException("schemaVersion is a required property for TestReport and cannot be null");
            }
            else
            {
                this.SchemaVersion = schemaVersion;
            }
            // to ensure "revision" is required (not null)
            if (revision == null)
            {
                throw new InvalidDataException("revision is a required property for TestReport and cannot be null");
            }
            else
            {
                this.Revision = revision;
            }
            // to ensure "features" is required (not null)
            if (features == null)
            {
                throw new InvalidDataException("features is a required property for TestReport and cannot be null");
            }
            else
            {
                this.Features = features;
            }
            // to ensure "finishedDeviceSnapshots" is required (not null)
            if (finishedDeviceSnapshots == null)
            {
                throw new InvalidDataException("finishedDeviceSnapshots is a required property for TestReport and cannot be null");
            }
            else
            {
                this.FinishedDeviceSnapshots = finishedDeviceSnapshots;
            }
            // to ensure "deviceLogs" is required (not null)
            if (deviceLogs == null)
            {
                throw new InvalidDataException("deviceLogs is a required property for TestReport and cannot be null");
            }
            else
            {
                this.DeviceLogs = deviceLogs;
            }
            // to ensure "dateFinished" is required (not null)
            if (dateFinished == null)
            {
                throw new InvalidDataException("dateFinished is a required property for TestReport and cannot be null");
            }
            else
            {
                this.DateFinished = dateFinished;
            }
            this.ErrorMessage = errorMessage;
            this.SnapshotFatalErrors = snapshotFatalErrors;
        }
        
        /// <summary>
        /// Gets or Sets AppUploadId
        /// </summary>
        [DataMember(Name="app_upload_id", EmitDefaultValue=false)]
        public string AppUploadId { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets TestType
        /// </summary>
        [DataMember(Name="testType", EmitDefaultValue=false)]
        public string TestType { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name="platform", EmitDefaultValue=false)]
        public string Platform { get; set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [DataMember(Name="stats", EmitDefaultValue=false)]
        public TestReportStats Stats { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets SchemaVersion
        /// </summary>
        [DataMember(Name="schema_version", EmitDefaultValue=false)]
        public decimal? SchemaVersion { get; set; }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public decimal? Revision { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public List<TestReportFeatures> Features { get; set; }

        /// <summary>
        /// Gets or Sets FinishedDeviceSnapshots
        /// </summary>
        [DataMember(Name="finished_device_snapshots", EmitDefaultValue=false)]
        public List<string> FinishedDeviceSnapshots { get; set; }

        /// <summary>
        /// Gets or Sets DeviceLogs
        /// </summary>
        [DataMember(Name="device_logs", EmitDefaultValue=false)]
        public List<TestReportDeviceLogs> DeviceLogs { get; set; }

        /// <summary>
        /// Gets or Sets DateFinished
        /// </summary>
        [DataMember(Name="date_finished", EmitDefaultValue=false)]
        public string DateFinished { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets SnapshotFatalErrors
        /// </summary>
        [DataMember(Name="snapshot_fatal_errors", EmitDefaultValue=false)]
        public List<TestReportSnapshotFatalErrors> SnapshotFatalErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestReport {\n");
            sb.Append("  AppUploadId: ").Append(AppUploadId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  TestType: ").Append(TestType).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  FinishedDeviceSnapshots: ").Append(FinishedDeviceSnapshots).Append("\n");
            sb.Append("  DeviceLogs: ").Append(DeviceLogs).Append("\n");
            sb.Append("  DateFinished: ").Append(DateFinished).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  SnapshotFatalErrors: ").Append(SnapshotFatalErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestReport);
        }

        /// <summary>
        /// Returns true if TestReport instances are equal
        /// </summary>
        /// <param name="input">Instance of TestReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppUploadId == input.AppUploadId ||
                    (this.AppUploadId != null &&
                    this.AppUploadId.Equals(input.AppUploadId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.TestType == input.TestType ||
                    (this.TestType != null &&
                    this.TestType.Equals(input.TestType))
                ) && 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this.Stats == input.Stats ||
                    (this.Stats != null &&
                    this.Stats.Equals(input.Stats))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SchemaVersion == input.SchemaVersion ||
                    (this.SchemaVersion != null &&
                    this.SchemaVersion.Equals(input.SchemaVersion))
                ) && 
                (
                    this.Revision == input.Revision ||
                    (this.Revision != null &&
                    this.Revision.Equals(input.Revision))
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) && 
                (
                    this.FinishedDeviceSnapshots == input.FinishedDeviceSnapshots ||
                    this.FinishedDeviceSnapshots != null &&
                    input.FinishedDeviceSnapshots != null &&
                    this.FinishedDeviceSnapshots.SequenceEqual(input.FinishedDeviceSnapshots)
                ) && 
                (
                    this.DeviceLogs == input.DeviceLogs ||
                    this.DeviceLogs != null &&
                    input.DeviceLogs != null &&
                    this.DeviceLogs.SequenceEqual(input.DeviceLogs)
                ) && 
                (
                    this.DateFinished == input.DateFinished ||
                    (this.DateFinished != null &&
                    this.DateFinished.Equals(input.DateFinished))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.SnapshotFatalErrors == input.SnapshotFatalErrors ||
                    this.SnapshotFatalErrors != null &&
                    input.SnapshotFatalErrors != null &&
                    this.SnapshotFatalErrors.SequenceEqual(input.SnapshotFatalErrors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppUploadId != null)
                    hashCode = hashCode * 59 + this.AppUploadId.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.TestType != null)
                    hashCode = hashCode * 59 + this.TestType.GetHashCode();
                if (this.Platform != null)
                    hashCode = hashCode * 59 + this.Platform.GetHashCode();
                if (this.Stats != null)
                    hashCode = hashCode * 59 + this.Stats.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SchemaVersion != null)
                    hashCode = hashCode * 59 + this.SchemaVersion.GetHashCode();
                if (this.Revision != null)
                    hashCode = hashCode * 59 + this.Revision.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.FinishedDeviceSnapshots != null)
                    hashCode = hashCode * 59 + this.FinishedDeviceSnapshots.GetHashCode();
                if (this.DeviceLogs != null)
                    hashCode = hashCode * 59 + this.DeviceLogs.GetHashCode();
                if (this.DateFinished != null)
                    hashCode = hashCode * 59 + this.DateFinished.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.SnapshotFatalErrors != null)
                    hashCode = hashCode * 59 + this.SnapshotFatalErrors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
