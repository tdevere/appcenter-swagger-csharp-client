/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StepReport
    /// </summary>
    [DataContract]
        public partial class StepReport :  IEquatable<StepReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StepReport" /> class.
        /// </summary>
        /// <param name="finishedSnapshots">finishedSnapshots (required).</param>
        /// <param name="deviceScreenshots">deviceScreenshots (required).</param>
        public StepReport(List<string> finishedSnapshots = default(List<string>), List<StepReportDeviceScreenshots> deviceScreenshots = default(List<StepReportDeviceScreenshots>))
        {
            // to ensure "finishedSnapshots" is required (not null)
            if (finishedSnapshots == null)
            {
                throw new InvalidDataException("finishedSnapshots is a required property for StepReport and cannot be null");
            }
            else
            {
                this.FinishedSnapshots = finishedSnapshots;
            }
            // to ensure "deviceScreenshots" is required (not null)
            if (deviceScreenshots == null)
            {
                throw new InvalidDataException("deviceScreenshots is a required property for StepReport and cannot be null");
            }
            else
            {
                this.DeviceScreenshots = deviceScreenshots;
            }
        }
        
        /// <summary>
        /// Gets or Sets FinishedSnapshots
        /// </summary>
        [DataMember(Name="finishedSnapshots", EmitDefaultValue=false)]
        public List<string> FinishedSnapshots { get; set; }

        /// <summary>
        /// Gets or Sets DeviceScreenshots
        /// </summary>
        [DataMember(Name="deviceScreenshots", EmitDefaultValue=false)]
        public List<StepReportDeviceScreenshots> DeviceScreenshots { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StepReport {\n");
            sb.Append("  FinishedSnapshots: ").Append(FinishedSnapshots).Append("\n");
            sb.Append("  DeviceScreenshots: ").Append(DeviceScreenshots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StepReport);
        }

        /// <summary>
        /// Returns true if StepReport instances are equal
        /// </summary>
        /// <param name="input">Instance of StepReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StepReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FinishedSnapshots == input.FinishedSnapshots ||
                    this.FinishedSnapshots != null &&
                    input.FinishedSnapshots != null &&
                    this.FinishedSnapshots.SequenceEqual(input.FinishedSnapshots)
                ) && 
                (
                    this.DeviceScreenshots == input.DeviceScreenshots ||
                    this.DeviceScreenshots != null &&
                    input.DeviceScreenshots != null &&
                    this.DeviceScreenshots.SequenceEqual(input.DeviceScreenshots)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FinishedSnapshots != null)
                    hashCode = hashCode * 59 + this.FinishedSnapshots.GetHashCode();
                if (this.DeviceScreenshots != null)
                    hashCode = hashCode * 59 + this.DeviceScreenshots.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
