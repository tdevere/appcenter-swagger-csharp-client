/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The repository which is accessiable by GitHub App Installation
    /// </summary>
    [DataContract]
        public partial class GitHubInstallationRepositoriesInner :  IEquatable<GitHubInstallationRepositoriesInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GitHubInstallationRepositoriesInner" /> class.
        /// </summary>
        /// <param name="name">The repository name.</param>
        /// <param name="description">The discription of repository.</param>
        /// <param name="cloneUrl">URL used to clone the repository.</param>
        /// <param name="defaultBranch">The default branch for the repo.</param>
        /// <param name="language">The language in the repository.</param>
        /// <param name="updatedAt">The repository updated time.</param>
        /// <param name="fork">Whether the repository is a fork.</param>
        public GitHubInstallationRepositoriesInner(string name = default(string), string description = default(string), string cloneUrl = default(string), string defaultBranch = default(string), string language = default(string), string updatedAt = default(string), bool? fork = default(bool?))
        {
            this.Name = name;
            this.Description = description;
            this.CloneUrl = cloneUrl;
            this.DefaultBranch = defaultBranch;
            this.Language = language;
            this.UpdatedAt = updatedAt;
            this.Fork = fork;
        }
        
        /// <summary>
        /// The repository name
        /// </summary>
        /// <value>The repository name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The discription of repository
        /// </summary>
        /// <value>The discription of repository</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// URL used to clone the repository
        /// </summary>
        /// <value>URL used to clone the repository</value>
        [DataMember(Name="clone_url", EmitDefaultValue=false)]
        public string CloneUrl { get; set; }

        /// <summary>
        /// The default branch for the repo
        /// </summary>
        /// <value>The default branch for the repo</value>
        [DataMember(Name="default_branch", EmitDefaultValue=false)]
        public string DefaultBranch { get; set; }

        /// <summary>
        /// The language in the repository
        /// </summary>
        /// <value>The language in the repository</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// The repository updated time
        /// </summary>
        /// <value>The repository updated time</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Whether the repository is a fork
        /// </summary>
        /// <value>Whether the repository is a fork</value>
        [DataMember(Name="fork", EmitDefaultValue=false)]
        public bool? Fork { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GitHubInstallationRepositoriesInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CloneUrl: ").Append(CloneUrl).Append("\n");
            sb.Append("  DefaultBranch: ").Append(DefaultBranch).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Fork: ").Append(Fork).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GitHubInstallationRepositoriesInner);
        }

        /// <summary>
        /// Returns true if GitHubInstallationRepositoriesInner instances are equal
        /// </summary>
        /// <param name="input">Instance of GitHubInstallationRepositoriesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GitHubInstallationRepositoriesInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CloneUrl == input.CloneUrl ||
                    (this.CloneUrl != null &&
                    this.CloneUrl.Equals(input.CloneUrl))
                ) && 
                (
                    this.DefaultBranch == input.DefaultBranch ||
                    (this.DefaultBranch != null &&
                    this.DefaultBranch.Equals(input.DefaultBranch))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Fork == input.Fork ||
                    (this.Fork != null &&
                    this.Fork.Equals(input.Fork))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CloneUrl != null)
                    hashCode = hashCode * 59 + this.CloneUrl.GetHashCode();
                if (this.DefaultBranch != null)
                    hashCode = hashCode * 59 + this.DefaultBranch.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Fork != null)
                    hashCode = hashCode * 59 + this.Fork.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
