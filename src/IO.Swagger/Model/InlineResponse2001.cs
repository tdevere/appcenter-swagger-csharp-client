/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SharedConnectionResponse
    /// </summary>
    [DataContract]
        public partial class InlineResponse2001 :  IEquatable<InlineResponse2001>, IValidatableObject
    {
        /// <summary>
        /// service type of shared connection can be apple|gitlab|googleplay|jira
        /// </summary>
        /// <value>service type of shared connection can be apple|gitlab|googleplay|jira</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ServiceTypeEnum
        {
            /// <summary>
            /// Enum Apple for value: apple
            /// </summary>
            [EnumMember(Value = "apple")]
            Apple = 1,
            /// <summary>
            /// Enum Jira for value: jira
            /// </summary>
            [EnumMember(Value = "jira")]
            Jira = 2,
            /// <summary>
            /// Enum Googleplay for value: googleplay
            /// </summary>
            [EnumMember(Value = "googleplay")]
            Googleplay = 3,
            /// <summary>
            /// Enum Gitlab for value: gitlab
            /// </summary>
            [EnumMember(Value = "gitlab")]
            Gitlab = 4        }
        /// <summary>
        /// service type of shared connection can be apple|gitlab|googleplay|jira
        /// </summary>
        /// <value>service type of shared connection can be apple|gitlab|googleplay|jira</value>
        [DataMember(Name="serviceType", EmitDefaultValue=false)]
        public ServiceTypeEnum ServiceType { get; set; }
        /// <summary>
        /// the type of the credential
        /// </summary>
        /// <value>the type of the credential</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CredentialTypeEnum
        {
            /// <summary>
            /// Enum Credentials for value: credentials
            /// </summary>
            [EnumMember(Value = "credentials")]
            Credentials = 1,
            /// <summary>
            /// Enum Certificate for value: certificate
            /// </summary>
            [EnumMember(Value = "certificate")]
            Certificate = 2,
            /// <summary>
            /// Enum Key for value: key
            /// </summary>
            [EnumMember(Value = "key")]
            Key = 3        }
        /// <summary>
        /// the type of the credential
        /// </summary>
        /// <value>the type of the credential</value>
        [DataMember(Name="credentialType", EmitDefaultValue=false)]
        public CredentialTypeEnum? CredentialType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2001" /> class.
        /// </summary>
        /// <param name="displayName">display name of shared connection (required).</param>
        /// <param name="serviceType">service type of shared connection can be apple|gitlab|googleplay|jira (required).</param>
        /// <param name="credentialType">the type of the credential.</param>
        public InlineResponse2001(string displayName = default(string), ServiceTypeEnum serviceType = default(ServiceTypeEnum), CredentialTypeEnum? credentialType = default(CredentialTypeEnum?))
        {
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for InlineResponse2001 and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }
            // to ensure "serviceType" is required (not null)
            if (serviceType == null)
            {
                throw new InvalidDataException("serviceType is a required property for InlineResponse2001 and cannot be null");
            }
            else
            {
                this.ServiceType = serviceType;
            }
            this.CredentialType = credentialType;
        }
        
        /// <summary>
        /// display name of shared connection
        /// </summary>
        /// <value>display name of shared connection</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2001 {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  CredentialType: ").Append(CredentialType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2001);
        }

        /// <summary>
        /// Returns true if InlineResponse2001 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2001 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.ServiceType == input.ServiceType ||
                    (this.ServiceType != null &&
                    this.ServiceType.Equals(input.ServiceType))
                ) && 
                (
                    this.CredentialType == input.CredentialType ||
                    (this.CredentialType != null &&
                    this.CredentialType.Equals(input.CredentialType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.ServiceType != null)
                    hashCode = hashCode * 59 + this.ServiceType.GetHashCode();
                if (this.CredentialType != null)
                    hashCode = hashCode * 59 + this.CredentialType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
