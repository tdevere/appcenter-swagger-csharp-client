/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TestReportDeviceLogs
    /// </summary>
    [DataContract]
        public partial class TestReportDeviceLogs :  IEquatable<TestReportDeviceLogs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestReportDeviceLogs" /> class.
        /// </summary>
        /// <param name="deviceSnapshotId">deviceSnapshotId.</param>
        /// <param name="deviceLog">deviceLog.</param>
        /// <param name="testLog">testLog.</param>
        /// <param name="appiumLog">appiumLog.</param>
        public TestReportDeviceLogs(string deviceSnapshotId = default(string), string deviceLog = default(string), string testLog = default(string), string appiumLog = default(string))
        {
            this.DeviceSnapshotId = deviceSnapshotId;
            this.DeviceLog = deviceLog;
            this.TestLog = testLog;
            this.AppiumLog = appiumLog;
        }
        
        /// <summary>
        /// Gets or Sets DeviceSnapshotId
        /// </summary>
        [DataMember(Name="device_snapshot_id", EmitDefaultValue=false)]
        public string DeviceSnapshotId { get; set; }

        /// <summary>
        /// Gets or Sets DeviceLog
        /// </summary>
        [DataMember(Name="device_log", EmitDefaultValue=false)]
        public string DeviceLog { get; set; }

        /// <summary>
        /// Gets or Sets TestLog
        /// </summary>
        [DataMember(Name="test_log", EmitDefaultValue=false)]
        public string TestLog { get; set; }

        /// <summary>
        /// Gets or Sets AppiumLog
        /// </summary>
        [DataMember(Name="appium_log", EmitDefaultValue=false)]
        public string AppiumLog { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestReportDeviceLogs {\n");
            sb.Append("  DeviceSnapshotId: ").Append(DeviceSnapshotId).Append("\n");
            sb.Append("  DeviceLog: ").Append(DeviceLog).Append("\n");
            sb.Append("  TestLog: ").Append(TestLog).Append("\n");
            sb.Append("  AppiumLog: ").Append(AppiumLog).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestReportDeviceLogs);
        }

        /// <summary>
        /// Returns true if TestReportDeviceLogs instances are equal
        /// </summary>
        /// <param name="input">Instance of TestReportDeviceLogs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestReportDeviceLogs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeviceSnapshotId == input.DeviceSnapshotId ||
                    (this.DeviceSnapshotId != null &&
                    this.DeviceSnapshotId.Equals(input.DeviceSnapshotId))
                ) && 
                (
                    this.DeviceLog == input.DeviceLog ||
                    (this.DeviceLog != null &&
                    this.DeviceLog.Equals(input.DeviceLog))
                ) && 
                (
                    this.TestLog == input.TestLog ||
                    (this.TestLog != null &&
                    this.TestLog.Equals(input.TestLog))
                ) && 
                (
                    this.AppiumLog == input.AppiumLog ||
                    (this.AppiumLog != null &&
                    this.AppiumLog.Equals(input.AppiumLog))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeviceSnapshotId != null)
                    hashCode = hashCode * 59 + this.DeviceSnapshotId.GetHashCode();
                if (this.DeviceLog != null)
                    hashCode = hashCode * 59 + this.DeviceLog.GetHashCode();
                if (this.TestLog != null)
                    hashCode = hashCode * 59 + this.TestLog.GetHashCode();
                if (this.AppiumLog != null)
                    hashCode = hashCode * 59 + this.AppiumLog.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
