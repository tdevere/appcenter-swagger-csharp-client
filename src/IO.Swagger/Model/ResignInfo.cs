/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The information for a resign attempt.
    /// </summary>
    [DataContract]
        public partial class ResignInfo :  IEquatable<ResignInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResignInfo" /> class.
        /// </summary>
        /// <param name="groupName">The group name of the resign attempt.</param>
        /// <param name="profileName">The provisioning profile name of group for the given resign attempt.</param>
        /// <param name="profileType">The provisioning profile type of group for the given resign attempt.</param>
        /// <param name="certificateName">The name of the certificate used for the resign attempt.</param>
        /// <param name="certificateExpiration">The expiration date of the certificate used for the resign attempt.</param>
        public ResignInfo(string groupName = default(string), string profileName = default(string), string profileType = default(string), string certificateName = default(string), string certificateExpiration = default(string))
        {
            this.GroupName = groupName;
            this.ProfileName = profileName;
            this.ProfileType = profileType;
            this.CertificateName = certificateName;
            this.CertificateExpiration = certificateExpiration;
        }
        
        /// <summary>
        /// The group name of the resign attempt
        /// </summary>
        /// <value>The group name of the resign attempt</value>
        [DataMember(Name="group_name", EmitDefaultValue=false)]
        public string GroupName { get; set; }

        /// <summary>
        /// The provisioning profile name of group for the given resign attempt
        /// </summary>
        /// <value>The provisioning profile name of group for the given resign attempt</value>
        [DataMember(Name="profile_name", EmitDefaultValue=false)]
        public string ProfileName { get; set; }

        /// <summary>
        /// The provisioning profile type of group for the given resign attempt
        /// </summary>
        /// <value>The provisioning profile type of group for the given resign attempt</value>
        [DataMember(Name="profile_type", EmitDefaultValue=false)]
        public string ProfileType { get; set; }

        /// <summary>
        /// The name of the certificate used for the resign attempt
        /// </summary>
        /// <value>The name of the certificate used for the resign attempt</value>
        [DataMember(Name="certificate_name", EmitDefaultValue=false)]
        public string CertificateName { get; set; }

        /// <summary>
        /// The expiration date of the certificate used for the resign attempt
        /// </summary>
        /// <value>The expiration date of the certificate used for the resign attempt</value>
        [DataMember(Name="certificate_expiration", EmitDefaultValue=false)]
        public string CertificateExpiration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResignInfo {\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  ProfileName: ").Append(ProfileName).Append("\n");
            sb.Append("  ProfileType: ").Append(ProfileType).Append("\n");
            sb.Append("  CertificateName: ").Append(CertificateName).Append("\n");
            sb.Append("  CertificateExpiration: ").Append(CertificateExpiration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResignInfo);
        }

        /// <summary>
        /// Returns true if ResignInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ResignInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResignInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.ProfileName == input.ProfileName ||
                    (this.ProfileName != null &&
                    this.ProfileName.Equals(input.ProfileName))
                ) && 
                (
                    this.ProfileType == input.ProfileType ||
                    (this.ProfileType != null &&
                    this.ProfileType.Equals(input.ProfileType))
                ) && 
                (
                    this.CertificateName == input.CertificateName ||
                    (this.CertificateName != null &&
                    this.CertificateName.Equals(input.CertificateName))
                ) && 
                (
                    this.CertificateExpiration == input.CertificateExpiration ||
                    (this.CertificateExpiration != null &&
                    this.CertificateExpiration.Equals(input.CertificateExpiration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupName != null)
                    hashCode = hashCode * 59 + this.GroupName.GetHashCode();
                if (this.ProfileName != null)
                    hashCode = hashCode * 59 + this.ProfileName.GetHashCode();
                if (this.ProfileType != null)
                    hashCode = hashCode * 59 + this.ProfileType.GetHashCode();
                if (this.CertificateName != null)
                    hashCode = hashCode * 59 + this.CertificateName.GetHashCode();
                if (this.CertificateExpiration != null)
                    hashCode = hashCode * 59 + this.CertificateExpiration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
