/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// List of bug tracker repositories
    /// </summary>
    [DataContract]
        public partial class AlertBugTrackerReposResult :  IEquatable<AlertBugTrackerReposResult>, IValidatableObject
    {
        /// <summary>
        /// Defines RepoType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum RepoTypeEnum
        {
            /// <summary>
            /// Enum Github for value: github
            /// </summary>
            [EnumMember(Value = "github")]
            Github = 1,
            /// <summary>
            /// Enum Vsts for value: vsts
            /// </summary>
            [EnumMember(Value = "vsts")]
            Vsts = 2,
            /// <summary>
            /// Enum Jira for value: jira
            /// </summary>
            [EnumMember(Value = "jira")]
            Jira = 3        }
        /// <summary>
        /// Gets or Sets RepoType
        /// </summary>
        [DataMember(Name="repo_type", EmitDefaultValue=false)]
        public RepoTypeEnum? RepoType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertBugTrackerReposResult" /> class.
        /// </summary>
        /// <param name="repoType">repoType.</param>
        /// <param name="repositories">repositories (required).</param>
        public AlertBugTrackerReposResult(RepoTypeEnum? repoType = default(RepoTypeEnum?), List<AlertBugTrackerReposResultRepositories> repositories = default(List<AlertBugTrackerReposResultRepositories>))
        {
            // to ensure "repositories" is required (not null)
            if (repositories == null)
            {
                throw new InvalidDataException("repositories is a required property for AlertBugTrackerReposResult and cannot be null");
            }
            else
            {
                this.Repositories = repositories;
            }
            this.RepoType = repoType;
        }
        

        /// <summary>
        /// Gets or Sets Repositories
        /// </summary>
        [DataMember(Name="repositories", EmitDefaultValue=false)]
        public List<AlertBugTrackerReposResultRepositories> Repositories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertBugTrackerReposResult {\n");
            sb.Append("  RepoType: ").Append(RepoType).Append("\n");
            sb.Append("  Repositories: ").Append(Repositories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertBugTrackerReposResult);
        }

        /// <summary>
        /// Returns true if AlertBugTrackerReposResult instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertBugTrackerReposResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertBugTrackerReposResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RepoType == input.RepoType ||
                    (this.RepoType != null &&
                    this.RepoType.Equals(input.RepoType))
                ) && 
                (
                    this.Repositories == input.Repositories ||
                    this.Repositories != null &&
                    input.Repositories != null &&
                    this.Repositories.SequenceEqual(input.Repositories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RepoType != null)
                    hashCode = hashCode * 59 + this.RepoType.GetHashCode();
                if (this.Repositories != null)
                    hashCode = hashCode * 59 + this.Repositories.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
