/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A request containing information pertaining to completing a symbol upload process
    /// </summary>
    [DataContract]
        public partial class SymbolUploadsSymbolUploadIdBody :  IEquatable<SymbolUploadsSymbolUploadIdBody>, IValidatableObject
    {
        /// <summary>
        /// The desired operation for the symbol upload
        /// </summary>
        /// <value>The desired operation for the symbol upload</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Committed for value: committed
            /// </summary>
            [EnumMember(Value = "committed")]
            Committed = 1,
            /// <summary>
            /// Enum Aborted for value: aborted
            /// </summary>
            [EnumMember(Value = "aborted")]
            Aborted = 2        }
        /// <summary>
        /// The desired operation for the symbol upload
        /// </summary>
        /// <value>The desired operation for the symbol upload</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolUploadsSymbolUploadIdBody" /> class.
        /// </summary>
        /// <param name="status">The desired operation for the symbol upload (required).</param>
        public SymbolUploadsSymbolUploadIdBody(StatusEnum status = default(StatusEnum))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for SymbolUploadsSymbolUploadIdBody and cannot be null");
            }
            else
            {
                this.Status = status;
            }
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SymbolUploadsSymbolUploadIdBody {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SymbolUploadsSymbolUploadIdBody);
        }

        /// <summary>
        /// Returns true if SymbolUploadsSymbolUploadIdBody instances are equal
        /// </summary>
        /// <param name="input">Instance of SymbolUploadsSymbolUploadIdBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SymbolUploadsSymbolUploadIdBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
