/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TestCloudProject
    /// </summary>
    [DataContract]
        public partial class TestCloudProject :  IEquatable<TestCloudProject>, IValidatableObject
    {
        /// <summary>
        /// Defines FrameworkType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FrameworkTypeEnum
        {
            /// <summary>
            /// Enum Appium for value: Appium
            /// </summary>
            [EnumMember(Value = "Appium")]
            Appium = 1,
            /// <summary>
            /// Enum Calabash for value: Calabash
            /// </summary>
            [EnumMember(Value = "Calabash")]
            Calabash = 2,
            /// <summary>
            /// Enum Espresso for value: Espresso
            /// </summary>
            [EnumMember(Value = "Espresso")]
            Espresso = 3,
            /// <summary>
            /// Enum UITest for value: UITest
            /// </summary>
            [EnumMember(Value = "UITest")]
            UITest = 4,
            /// <summary>
            /// Enum Generated for value: Generated
            /// </summary>
            [EnumMember(Value = "Generated")]
            Generated = 5        }
        /// <summary>
        /// Gets or Sets FrameworkType
        /// </summary>
        [DataMember(Name="frameworkType", EmitDefaultValue=false)]
        public FrameworkTypeEnum FrameworkType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestCloudProject" /> class.
        /// </summary>
        /// <param name="path">The path to the TestCloud project (required).</param>
        /// <param name="frameworkType">frameworkType (required).</param>
        /// <param name="frameworkProperties">frameworkProperties.</param>
        public TestCloudProject(string path = default(string), FrameworkTypeEnum frameworkType = default(FrameworkTypeEnum), TestCloudToolsetFrameworkProperties frameworkProperties = default(TestCloudToolsetFrameworkProperties))
        {
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new InvalidDataException("path is a required property for TestCloudProject and cannot be null");
            }
            else
            {
                this.Path = path;
            }
            // to ensure "frameworkType" is required (not null)
            if (frameworkType == null)
            {
                throw new InvalidDataException("frameworkType is a required property for TestCloudProject and cannot be null");
            }
            else
            {
                this.FrameworkType = frameworkType;
            }
            this.FrameworkProperties = frameworkProperties;
        }
        
        /// <summary>
        /// The path to the TestCloud project
        /// </summary>
        /// <value>The path to the TestCloud project</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }


        /// <summary>
        /// Gets or Sets FrameworkProperties
        /// </summary>
        [DataMember(Name="frameworkProperties", EmitDefaultValue=false)]
        public TestCloudToolsetFrameworkProperties FrameworkProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestCloudProject {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  FrameworkType: ").Append(FrameworkType).Append("\n");
            sb.Append("  FrameworkProperties: ").Append(FrameworkProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestCloudProject);
        }

        /// <summary>
        /// Returns true if TestCloudProject instances are equal
        /// </summary>
        /// <param name="input">Instance of TestCloudProject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestCloudProject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.FrameworkType == input.FrameworkType ||
                    (this.FrameworkType != null &&
                    this.FrameworkType.Equals(input.FrameworkType))
                ) && 
                (
                    this.FrameworkProperties == input.FrameworkProperties ||
                    (this.FrameworkProperties != null &&
                    this.FrameworkProperties.Equals(input.FrameworkProperties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.FrameworkType != null)
                    hashCode = hashCode * 59 + this.FrameworkType.GetHashCode();
                if (this.FrameworkProperties != null)
                    hashCode = hashCode * 59 + this.FrameworkProperties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
