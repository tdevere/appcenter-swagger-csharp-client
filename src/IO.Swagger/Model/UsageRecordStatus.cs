/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Status of the usage record creation
    /// </summary>
    [DataContract]
        public partial class UsageRecordStatus :  IEquatable<UsageRecordStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsageRecordStatus" /> class.
        /// </summary>
        /// <param name="expectedLatestBuildExists">Is the age of the most recent Build service usage record within expected limits.</param>
        /// <param name="expectedLatestTestExists">Is the age of the most recent Test service usage record within expected limits.</param>
        /// <param name="latestBuildUsageRecordTime">The time of the most recent Build service usage record.</param>
        /// <param name="latestTestUsageRecordTime">The time of the most recent Test service usage record.</param>
        public UsageRecordStatus(bool? expectedLatestBuildExists = default(bool?), bool? expectedLatestTestExists = default(bool?), string latestBuildUsageRecordTime = default(string), string latestTestUsageRecordTime = default(string))
        {
            this.ExpectedLatestBuildExists = expectedLatestBuildExists;
            this.ExpectedLatestTestExists = expectedLatestTestExists;
            this.LatestBuildUsageRecordTime = latestBuildUsageRecordTime;
            this.LatestTestUsageRecordTime = latestTestUsageRecordTime;
        }
        
        /// <summary>
        /// Is the age of the most recent Build service usage record within expected limits
        /// </summary>
        /// <value>Is the age of the most recent Build service usage record within expected limits</value>
        [DataMember(Name="expectedLatestBuildExists", EmitDefaultValue=false)]
        public bool? ExpectedLatestBuildExists { get; set; }

        /// <summary>
        /// Is the age of the most recent Test service usage record within expected limits
        /// </summary>
        /// <value>Is the age of the most recent Test service usage record within expected limits</value>
        [DataMember(Name="expectedLatestTestExists", EmitDefaultValue=false)]
        public bool? ExpectedLatestTestExists { get; set; }

        /// <summary>
        /// The time of the most recent Build service usage record
        /// </summary>
        /// <value>The time of the most recent Build service usage record</value>
        [DataMember(Name="latestBuildUsageRecordTime", EmitDefaultValue=false)]
        public string LatestBuildUsageRecordTime { get; set; }

        /// <summary>
        /// The time of the most recent Test service usage record
        /// </summary>
        /// <value>The time of the most recent Test service usage record</value>
        [DataMember(Name="latestTestUsageRecordTime", EmitDefaultValue=false)]
        public string LatestTestUsageRecordTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsageRecordStatus {\n");
            sb.Append("  ExpectedLatestBuildExists: ").Append(ExpectedLatestBuildExists).Append("\n");
            sb.Append("  ExpectedLatestTestExists: ").Append(ExpectedLatestTestExists).Append("\n");
            sb.Append("  LatestBuildUsageRecordTime: ").Append(LatestBuildUsageRecordTime).Append("\n");
            sb.Append("  LatestTestUsageRecordTime: ").Append(LatestTestUsageRecordTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsageRecordStatus);
        }

        /// <summary>
        /// Returns true if UsageRecordStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of UsageRecordStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsageRecordStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExpectedLatestBuildExists == input.ExpectedLatestBuildExists ||
                    (this.ExpectedLatestBuildExists != null &&
                    this.ExpectedLatestBuildExists.Equals(input.ExpectedLatestBuildExists))
                ) && 
                (
                    this.ExpectedLatestTestExists == input.ExpectedLatestTestExists ||
                    (this.ExpectedLatestTestExists != null &&
                    this.ExpectedLatestTestExists.Equals(input.ExpectedLatestTestExists))
                ) && 
                (
                    this.LatestBuildUsageRecordTime == input.LatestBuildUsageRecordTime ||
                    (this.LatestBuildUsageRecordTime != null &&
                    this.LatestBuildUsageRecordTime.Equals(input.LatestBuildUsageRecordTime))
                ) && 
                (
                    this.LatestTestUsageRecordTime == input.LatestTestUsageRecordTime ||
                    (this.LatestTestUsageRecordTime != null &&
                    this.LatestTestUsageRecordTime.Equals(input.LatestTestUsageRecordTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpectedLatestBuildExists != null)
                    hashCode = hashCode * 59 + this.ExpectedLatestBuildExists.GetHashCode();
                if (this.ExpectedLatestTestExists != null)
                    hashCode = hashCode * 59 + this.ExpectedLatestTestExists.GetHashCode();
                if (this.LatestBuildUsageRecordTime != null)
                    hashCode = hashCode * 59 + this.LatestBuildUsageRecordTime.GetHashCode();
                if (this.LatestTestUsageRecordTime != null)
                    hashCode = hashCode * 59 + this.LatestTestUsageRecordTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
