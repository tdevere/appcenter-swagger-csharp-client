/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PerformanceReportPerformanceData
    /// </summary>
    [DataContract]
        public partial class PerformanceReportPerformanceData :  IEquatable<PerformanceReportPerformanceData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceReportPerformanceData" /> class.
        /// </summary>
        /// <param name="steps">steps (required).</param>
        /// <param name="elapsedSecsEnd">elapsedSecsEnd (required).</param>
        /// <param name="elapsedSecsStart">elapsedSecsStart (required).</param>
        /// <param name="elapsedSecs">elapsedSecs (required).</param>
        /// <param name="id">id (required).</param>
        public PerformanceReportPerformanceData(List<PerformanceReportPerformanceDataSteps> steps = default(List<PerformanceReportPerformanceDataSteps>), decimal? elapsedSecsEnd = default(decimal?), decimal? elapsedSecsStart = default(decimal?), decimal? elapsedSecs = default(decimal?), string id = default(string))
        {
            // to ensure "steps" is required (not null)
            if (steps == null)
            {
                throw new InvalidDataException("steps is a required property for PerformanceReportPerformanceData and cannot be null");
            }
            else
            {
                this.Steps = steps;
            }
            // to ensure "elapsedSecsEnd" is required (not null)
            if (elapsedSecsEnd == null)
            {
                throw new InvalidDataException("elapsedSecsEnd is a required property for PerformanceReportPerformanceData and cannot be null");
            }
            else
            {
                this.ElapsedSecsEnd = elapsedSecsEnd;
            }
            // to ensure "elapsedSecsStart" is required (not null)
            if (elapsedSecsStart == null)
            {
                throw new InvalidDataException("elapsedSecsStart is a required property for PerformanceReportPerformanceData and cannot be null");
            }
            else
            {
                this.ElapsedSecsStart = elapsedSecsStart;
            }
            // to ensure "elapsedSecs" is required (not null)
            if (elapsedSecs == null)
            {
                throw new InvalidDataException("elapsedSecs is a required property for PerformanceReportPerformanceData and cannot be null");
            }
            else
            {
                this.ElapsedSecs = elapsedSecs;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for PerformanceReportPerformanceData and cannot be null");
            }
            else
            {
                this.Id = id;
            }
        }
        
        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [DataMember(Name="steps", EmitDefaultValue=false)]
        public List<PerformanceReportPerformanceDataSteps> Steps { get; set; }

        /// <summary>
        /// Gets or Sets ElapsedSecsEnd
        /// </summary>
        [DataMember(Name="elapsed-secs-end", EmitDefaultValue=false)]
        public decimal? ElapsedSecsEnd { get; set; }

        /// <summary>
        /// Gets or Sets ElapsedSecsStart
        /// </summary>
        [DataMember(Name="elapsed-secs-start", EmitDefaultValue=false)]
        public decimal? ElapsedSecsStart { get; set; }

        /// <summary>
        /// Gets or Sets ElapsedSecs
        /// </summary>
        [DataMember(Name="elapsed-secs", EmitDefaultValue=false)]
        public decimal? ElapsedSecs { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceReportPerformanceData {\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  ElapsedSecsEnd: ").Append(ElapsedSecsEnd).Append("\n");
            sb.Append("  ElapsedSecsStart: ").Append(ElapsedSecsStart).Append("\n");
            sb.Append("  ElapsedSecs: ").Append(ElapsedSecs).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerformanceReportPerformanceData);
        }

        /// <summary>
        /// Returns true if PerformanceReportPerformanceData instances are equal
        /// </summary>
        /// <param name="input">Instance of PerformanceReportPerformanceData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceReportPerformanceData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Steps == input.Steps ||
                    this.Steps != null &&
                    input.Steps != null &&
                    this.Steps.SequenceEqual(input.Steps)
                ) && 
                (
                    this.ElapsedSecsEnd == input.ElapsedSecsEnd ||
                    (this.ElapsedSecsEnd != null &&
                    this.ElapsedSecsEnd.Equals(input.ElapsedSecsEnd))
                ) && 
                (
                    this.ElapsedSecsStart == input.ElapsedSecsStart ||
                    (this.ElapsedSecsStart != null &&
                    this.ElapsedSecsStart.Equals(input.ElapsedSecsStart))
                ) && 
                (
                    this.ElapsedSecs == input.ElapsedSecs ||
                    (this.ElapsedSecs != null &&
                    this.ElapsedSecs.Equals(input.ElapsedSecs))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Steps != null)
                    hashCode = hashCode * 59 + this.Steps.GetHashCode();
                if (this.ElapsedSecsEnd != null)
                    hashCode = hashCode * 59 + this.ElapsedSecsEnd.GetHashCode();
                if (this.ElapsedSecsStart != null)
                    hashCode = hashCode * 59 + this.ElapsedSecsStart.GetHashCode();
                if (this.ElapsedSecs != null)
                    hashCode = hashCode * 59 + this.ElapsedSecs.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
