/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// branch configuration revision
    /// </summary>
    [DataContract]
        public partial class BranchConfigurationRevisionsInner :  IEquatable<BranchConfigurationRevisionsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BranchConfigurationRevisionsInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="revision">revision.</param>
        /// <param name="changedDate">changedDate.</param>
        /// <param name="name">name.</param>
        /// <param name="changeType">changeType.</param>
        /// <param name="definitionUrl">definitionUrl.</param>
        /// <param name="changedBy">user who made a change in branch configuration.</param>
        public BranchConfigurationRevisionsInner(string id = default(string), decimal? revision = default(decimal?), string changedDate = default(string), string name = default(string), string changeType = default(string), string definitionUrl = default(string), Object changedBy = default(Object))
        {
            this.Id = id;
            this.Revision = revision;
            this.ChangedDate = changedDate;
            this.Name = name;
            this.ChangeType = changeType;
            this.DefinitionUrl = definitionUrl;
            this.ChangedBy = changedBy;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public decimal? Revision { get; set; }

        /// <summary>
        /// Gets or Sets ChangedDate
        /// </summary>
        [DataMember(Name="changedDate", EmitDefaultValue=false)]
        public string ChangedDate { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ChangeType
        /// </summary>
        [DataMember(Name="changeType", EmitDefaultValue=false)]
        public string ChangeType { get; set; }

        /// <summary>
        /// Gets or Sets DefinitionUrl
        /// </summary>
        [DataMember(Name="definitionUrl", EmitDefaultValue=false)]
        public string DefinitionUrl { get; set; }

        /// <summary>
        /// user who made a change in branch configuration
        /// </summary>
        /// <value>user who made a change in branch configuration</value>
        [DataMember(Name="changedBy", EmitDefaultValue=false)]
        public Object ChangedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BranchConfigurationRevisionsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  ChangedDate: ").Append(ChangedDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ChangeType: ").Append(ChangeType).Append("\n");
            sb.Append("  DefinitionUrl: ").Append(DefinitionUrl).Append("\n");
            sb.Append("  ChangedBy: ").Append(ChangedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BranchConfigurationRevisionsInner);
        }

        /// <summary>
        /// Returns true if BranchConfigurationRevisionsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of BranchConfigurationRevisionsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BranchConfigurationRevisionsInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Revision == input.Revision ||
                    (this.Revision != null &&
                    this.Revision.Equals(input.Revision))
                ) && 
                (
                    this.ChangedDate == input.ChangedDate ||
                    (this.ChangedDate != null &&
                    this.ChangedDate.Equals(input.ChangedDate))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ChangeType == input.ChangeType ||
                    (this.ChangeType != null &&
                    this.ChangeType.Equals(input.ChangeType))
                ) && 
                (
                    this.DefinitionUrl == input.DefinitionUrl ||
                    (this.DefinitionUrl != null &&
                    this.DefinitionUrl.Equals(input.DefinitionUrl))
                ) && 
                (
                    this.ChangedBy == input.ChangedBy ||
                    (this.ChangedBy != null &&
                    this.ChangedBy.Equals(input.ChangedBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Revision != null)
                    hashCode = hashCode * 59 + this.Revision.GetHashCode();
                if (this.ChangedDate != null)
                    hashCode = hashCode * 59 + this.ChangedDate.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ChangeType != null)
                    hashCode = hashCode * 59 + this.ChangeType.GetHashCode();
                if (this.DefinitionUrl != null)
                    hashCode = hashCode * 59 + this.DefinitionUrl.GetHashCode();
                if (this.ChangedBy != null)
                    hashCode = hashCode * 59 + this.ChangedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
