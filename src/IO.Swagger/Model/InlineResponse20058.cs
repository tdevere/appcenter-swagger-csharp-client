/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExternalStoreResponse
    /// </summary>
    [DataContract]
        public partial class InlineResponse20058 :  IEquatable<InlineResponse20058>, IValidatableObject
    {
        /// <summary>
        /// Store track
        /// </summary>
        /// <value>Store track</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TrackEnum
        {
            /// <summary>
            /// Enum Production for value: production
            /// </summary>
            [EnumMember(Value = "production")]
            Production = 1,
            /// <summary>
            /// Enum Alpha for value: alpha
            /// </summary>
            [EnumMember(Value = "alpha")]
            Alpha = 2,
            /// <summary>
            /// Enum Beta for value: beta
            /// </summary>
            [EnumMember(Value = "beta")]
            Beta = 3,
            /// <summary>
            /// Enum TestflightInternal for value: testflight-internal
            /// </summary>
            [EnumMember(Value = "testflight-internal")]
            TestflightInternal = 4,
            /// <summary>
            /// Enum TestflightExternal for value: testflight-external
            /// </summary>
            [EnumMember(Value = "testflight-external")]
            TestflightExternal = 5        }
        /// <summary>
        /// Store track
        /// </summary>
        /// <value>Store track</value>
        [DataMember(Name="track", EmitDefaultValue=false)]
        public TrackEnum? Track { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20058" /> class.
        /// </summary>
        /// <param name="id">Store id.</param>
        /// <param name="name">Store Name.</param>
        /// <param name="type">Store Type.</param>
        /// <param name="track">Store track.</param>
        /// <param name="intuneDetails">intuneDetails.</param>
        /// <param name="serviceConnectionId">Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center..</param>
        /// <param name="createdBy">The ID of the principal that created the store..</param>
        /// <param name="createdByPrincipalType">The type of the principal that created the store..</param>
        public InlineResponse20058(string id = default(string), string name = default(string), string type = default(string), TrackEnum? track = default(TrackEnum?), V01appsownerNameappNamedistributionStoresIntuneDetails intuneDetails = default(V01appsownerNameappNamedistributionStoresIntuneDetails), string serviceConnectionId = default(string), string createdBy = default(string), string createdByPrincipalType = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.Track = track;
            this.IntuneDetails = intuneDetails;
            this.ServiceConnectionId = serviceConnectionId;
            this.CreatedBy = createdBy;
            this.CreatedByPrincipalType = createdByPrincipalType;
        }
        
        /// <summary>
        /// Store id
        /// </summary>
        /// <value>Store id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Store Name
        /// </summary>
        /// <value>Store Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Store Type
        /// </summary>
        /// <value>Store Type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }


        /// <summary>
        /// Gets or Sets IntuneDetails
        /// </summary>
        [DataMember(Name="intune_details", EmitDefaultValue=false)]
        public V01appsownerNameappNamedistributionStoresIntuneDetails IntuneDetails { get; set; }

        /// <summary>
        /// Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.
        /// </summary>
        /// <value>Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.</value>
        [DataMember(Name="service_connection_id", EmitDefaultValue=false)]
        public string ServiceConnectionId { get; set; }

        /// <summary>
        /// The ID of the principal that created the store.
        /// </summary>
        /// <value>The ID of the principal that created the store.</value>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The type of the principal that created the store.
        /// </summary>
        /// <value>The type of the principal that created the store.</value>
        [DataMember(Name="created_by_principal_type", EmitDefaultValue=false)]
        public string CreatedByPrincipalType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20058 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Track: ").Append(Track).Append("\n");
            sb.Append("  IntuneDetails: ").Append(IntuneDetails).Append("\n");
            sb.Append("  ServiceConnectionId: ").Append(ServiceConnectionId).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedByPrincipalType: ").Append(CreatedByPrincipalType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20058);
        }

        /// <summary>
        /// Returns true if InlineResponse20058 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20058 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20058 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Track == input.Track ||
                    (this.Track != null &&
                    this.Track.Equals(input.Track))
                ) && 
                (
                    this.IntuneDetails == input.IntuneDetails ||
                    (this.IntuneDetails != null &&
                    this.IntuneDetails.Equals(input.IntuneDetails))
                ) && 
                (
                    this.ServiceConnectionId == input.ServiceConnectionId ||
                    (this.ServiceConnectionId != null &&
                    this.ServiceConnectionId.Equals(input.ServiceConnectionId))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedByPrincipalType == input.CreatedByPrincipalType ||
                    (this.CreatedByPrincipalType != null &&
                    this.CreatedByPrincipalType.Equals(input.CreatedByPrincipalType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Track != null)
                    hashCode = hashCode * 59 + this.Track.GetHashCode();
                if (this.IntuneDetails != null)
                    hashCode = hashCode * 59 + this.IntuneDetails.GetHashCode();
                if (this.ServiceConnectionId != null)
                    hashCode = hashCode * 59 + this.ServiceConnectionId.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedByPrincipalType != null)
                    hashCode = hashCode * 59 + this.CreatedByPrincipalType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
