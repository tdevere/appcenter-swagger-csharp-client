/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The diagnostic id for the given publish action
    /// </summary>
    [DataContract]
        public partial class DiagnosticIdResponse :  IEquatable<DiagnosticIdResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagnosticIdResponse" /> class.
        /// </summary>
        /// <param name="diagnosticId">diagnostic id.</param>
        public DiagnosticIdResponse(string diagnosticId = default(string))
        {
            this.DiagnosticId = diagnosticId;
        }
        
        /// <summary>
        /// diagnostic id
        /// </summary>
        /// <value>diagnostic id</value>
        [DataMember(Name="diagnostic_id", EmitDefaultValue=false)]
        public string DiagnosticId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiagnosticIdResponse {\n");
            sb.Append("  DiagnosticId: ").Append(DiagnosticId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagnosticIdResponse);
        }

        /// <summary>
        /// Returns true if DiagnosticIdResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagnosticIdResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagnosticIdResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DiagnosticId == input.DiagnosticId ||
                    (this.DiagnosticId != null &&
                    this.DiagnosticId.Equals(input.DiagnosticId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiagnosticId != null)
                    hashCode = hashCode * 59 + this.DiagnosticId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
