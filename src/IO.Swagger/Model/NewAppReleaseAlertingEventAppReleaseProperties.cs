/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Properties of new application release
    /// </summary>
    [DataContract]
        public partial class NewAppReleaseAlertingEventAppReleaseProperties :  IEquatable<NewAppReleaseAlertingEventAppReleaseProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewAppReleaseAlertingEventAppReleaseProperties" /> class.
        /// </summary>
        /// <param name="appName">appName (required).</param>
        /// <param name="appDisplayName">appDisplayName (required).</param>
        /// <param name="releaseId">releaseId (required).</param>
        /// <param name="platform">platform (required).</param>
        /// <param name="uploadedAt">Date and time in ISO 8601 format (required).</param>
        /// <param name="fingerprint">fingerprint.</param>
        /// <param name="releaseNotes">releaseNotes.</param>
        /// <param name="version">version (required).</param>
        /// <param name="shortVersion">shortVersion (required).</param>
        /// <param name="minOs">minOs.</param>
        /// <param name="mandatoryUpdate">mandatoryUpdate.</param>
        /// <param name="size">size (required).</param>
        /// <param name="provisioningProfileName">provisioningProfileName.</param>
        /// <param name="provisioningProfileType">provisioningProfileType.</param>
        /// <param name="bundleIdentifier">bundleIdentifier (required).</param>
        /// <param name="installLink">installLink (required).</param>
        /// <param name="iconLink">iconLink.</param>
        /// <param name="distributionGroupId">distributionGroupId.</param>
        /// <param name="installable">installable.</param>
        public NewAppReleaseAlertingEventAppReleaseProperties(string appName = default(string), string appDisplayName = default(string), string releaseId = default(string), string platform = default(string), string uploadedAt = default(string), string fingerprint = default(string), string releaseNotes = default(string), string version = default(string), string shortVersion = default(string), string minOs = default(string), bool? mandatoryUpdate = default(bool?), int? size = default(int?), string provisioningProfileName = default(string), string provisioningProfileType = default(string), string bundleIdentifier = default(string), string installLink = default(string), string iconLink = default(string), string distributionGroupId = default(string), bool? installable = default(bool?))
        {
            // to ensure "appName" is required (not null)
            if (appName == null)
            {
                throw new InvalidDataException("appName is a required property for NewAppReleaseAlertingEventAppReleaseProperties and cannot be null");
            }
            else
            {
                this.AppName = appName;
            }
            // to ensure "appDisplayName" is required (not null)
            if (appDisplayName == null)
            {
                throw new InvalidDataException("appDisplayName is a required property for NewAppReleaseAlertingEventAppReleaseProperties and cannot be null");
            }
            else
            {
                this.AppDisplayName = appDisplayName;
            }
            // to ensure "releaseId" is required (not null)
            if (releaseId == null)
            {
                throw new InvalidDataException("releaseId is a required property for NewAppReleaseAlertingEventAppReleaseProperties and cannot be null");
            }
            else
            {
                this.ReleaseId = releaseId;
            }
            // to ensure "platform" is required (not null)
            if (platform == null)
            {
                throw new InvalidDataException("platform is a required property for NewAppReleaseAlertingEventAppReleaseProperties and cannot be null");
            }
            else
            {
                this.Platform = platform;
            }
            // to ensure "uploadedAt" is required (not null)
            if (uploadedAt == null)
            {
                throw new InvalidDataException("uploadedAt is a required property for NewAppReleaseAlertingEventAppReleaseProperties and cannot be null");
            }
            else
            {
                this.UploadedAt = uploadedAt;
            }
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for NewAppReleaseAlertingEventAppReleaseProperties and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            // to ensure "shortVersion" is required (not null)
            if (shortVersion == null)
            {
                throw new InvalidDataException("shortVersion is a required property for NewAppReleaseAlertingEventAppReleaseProperties and cannot be null");
            }
            else
            {
                this.ShortVersion = shortVersion;
            }
            // to ensure "size" is required (not null)
            if (size == null)
            {
                throw new InvalidDataException("size is a required property for NewAppReleaseAlertingEventAppReleaseProperties and cannot be null");
            }
            else
            {
                this.Size = size;
            }
            // to ensure "bundleIdentifier" is required (not null)
            if (bundleIdentifier == null)
            {
                throw new InvalidDataException("bundleIdentifier is a required property for NewAppReleaseAlertingEventAppReleaseProperties and cannot be null");
            }
            else
            {
                this.BundleIdentifier = bundleIdentifier;
            }
            // to ensure "installLink" is required (not null)
            if (installLink == null)
            {
                throw new InvalidDataException("installLink is a required property for NewAppReleaseAlertingEventAppReleaseProperties and cannot be null");
            }
            else
            {
                this.InstallLink = installLink;
            }
            this.Fingerprint = fingerprint;
            this.ReleaseNotes = releaseNotes;
            this.MinOs = minOs;
            this.MandatoryUpdate = mandatoryUpdate;
            this.ProvisioningProfileName = provisioningProfileName;
            this.ProvisioningProfileType = provisioningProfileType;
            this.IconLink = iconLink;
            this.DistributionGroupId = distributionGroupId;
            this.Installable = installable;
        }
        
        /// <summary>
        /// Gets or Sets AppName
        /// </summary>
        [DataMember(Name="app_name", EmitDefaultValue=false)]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or Sets AppDisplayName
        /// </summary>
        [DataMember(Name="app_display_name", EmitDefaultValue=false)]
        public string AppDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseId
        /// </summary>
        [DataMember(Name="release_id", EmitDefaultValue=false)]
        public string ReleaseId { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name="platform", EmitDefaultValue=false)]
        public string Platform { get; set; }

        /// <summary>
        /// Date and time in ISO 8601 format
        /// </summary>
        /// <value>Date and time in ISO 8601 format</value>
        [DataMember(Name="uploaded_at", EmitDefaultValue=false)]
        public string UploadedAt { get; set; }

        /// <summary>
        /// Gets or Sets Fingerprint
        /// </summary>
        [DataMember(Name="fingerprint", EmitDefaultValue=false)]
        public string Fingerprint { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseNotes
        /// </summary>
        [DataMember(Name="release_notes", EmitDefaultValue=false)]
        public string ReleaseNotes { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets ShortVersion
        /// </summary>
        [DataMember(Name="short_version", EmitDefaultValue=false)]
        public string ShortVersion { get; set; }

        /// <summary>
        /// Gets or Sets MinOs
        /// </summary>
        [DataMember(Name="min_os", EmitDefaultValue=false)]
        public string MinOs { get; set; }

        /// <summary>
        /// Gets or Sets MandatoryUpdate
        /// </summary>
        [DataMember(Name="mandatory_update", EmitDefaultValue=false)]
        public bool? MandatoryUpdate { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or Sets ProvisioningProfileName
        /// </summary>
        [DataMember(Name="provisioning_profile_name", EmitDefaultValue=false)]
        public string ProvisioningProfileName { get; set; }

        /// <summary>
        /// Gets or Sets ProvisioningProfileType
        /// </summary>
        [DataMember(Name="provisioning_profile_type", EmitDefaultValue=false)]
        public string ProvisioningProfileType { get; set; }

        /// <summary>
        /// Gets or Sets BundleIdentifier
        /// </summary>
        [DataMember(Name="bundle_identifier", EmitDefaultValue=false)]
        public string BundleIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets InstallLink
        /// </summary>
        [DataMember(Name="install_link", EmitDefaultValue=false)]
        public string InstallLink { get; set; }

        /// <summary>
        /// Gets or Sets IconLink
        /// </summary>
        [DataMember(Name="icon_link", EmitDefaultValue=false)]
        public string IconLink { get; set; }

        /// <summary>
        /// Gets or Sets DistributionGroupId
        /// </summary>
        [DataMember(Name="distribution_group_id", EmitDefaultValue=false)]
        public string DistributionGroupId { get; set; }

        /// <summary>
        /// Gets or Sets Installable
        /// </summary>
        [DataMember(Name="installable", EmitDefaultValue=false)]
        public bool? Installable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewAppReleaseAlertingEventAppReleaseProperties {\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppDisplayName: ").Append(AppDisplayName).Append("\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  UploadedAt: ").Append(UploadedAt).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  ReleaseNotes: ").Append(ReleaseNotes).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  ShortVersion: ").Append(ShortVersion).Append("\n");
            sb.Append("  MinOs: ").Append(MinOs).Append("\n");
            sb.Append("  MandatoryUpdate: ").Append(MandatoryUpdate).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  ProvisioningProfileName: ").Append(ProvisioningProfileName).Append("\n");
            sb.Append("  ProvisioningProfileType: ").Append(ProvisioningProfileType).Append("\n");
            sb.Append("  BundleIdentifier: ").Append(BundleIdentifier).Append("\n");
            sb.Append("  InstallLink: ").Append(InstallLink).Append("\n");
            sb.Append("  IconLink: ").Append(IconLink).Append("\n");
            sb.Append("  DistributionGroupId: ").Append(DistributionGroupId).Append("\n");
            sb.Append("  Installable: ").Append(Installable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewAppReleaseAlertingEventAppReleaseProperties);
        }

        /// <summary>
        /// Returns true if NewAppReleaseAlertingEventAppReleaseProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of NewAppReleaseAlertingEventAppReleaseProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewAppReleaseAlertingEventAppReleaseProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.AppDisplayName == input.AppDisplayName ||
                    (this.AppDisplayName != null &&
                    this.AppDisplayName.Equals(input.AppDisplayName))
                ) && 
                (
                    this.ReleaseId == input.ReleaseId ||
                    (this.ReleaseId != null &&
                    this.ReleaseId.Equals(input.ReleaseId))
                ) && 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this.UploadedAt == input.UploadedAt ||
                    (this.UploadedAt != null &&
                    this.UploadedAt.Equals(input.UploadedAt))
                ) && 
                (
                    this.Fingerprint == input.Fingerprint ||
                    (this.Fingerprint != null &&
                    this.Fingerprint.Equals(input.Fingerprint))
                ) && 
                (
                    this.ReleaseNotes == input.ReleaseNotes ||
                    (this.ReleaseNotes != null &&
                    this.ReleaseNotes.Equals(input.ReleaseNotes))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.ShortVersion == input.ShortVersion ||
                    (this.ShortVersion != null &&
                    this.ShortVersion.Equals(input.ShortVersion))
                ) && 
                (
                    this.MinOs == input.MinOs ||
                    (this.MinOs != null &&
                    this.MinOs.Equals(input.MinOs))
                ) && 
                (
                    this.MandatoryUpdate == input.MandatoryUpdate ||
                    (this.MandatoryUpdate != null &&
                    this.MandatoryUpdate.Equals(input.MandatoryUpdate))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.ProvisioningProfileName == input.ProvisioningProfileName ||
                    (this.ProvisioningProfileName != null &&
                    this.ProvisioningProfileName.Equals(input.ProvisioningProfileName))
                ) && 
                (
                    this.ProvisioningProfileType == input.ProvisioningProfileType ||
                    (this.ProvisioningProfileType != null &&
                    this.ProvisioningProfileType.Equals(input.ProvisioningProfileType))
                ) && 
                (
                    this.BundleIdentifier == input.BundleIdentifier ||
                    (this.BundleIdentifier != null &&
                    this.BundleIdentifier.Equals(input.BundleIdentifier))
                ) && 
                (
                    this.InstallLink == input.InstallLink ||
                    (this.InstallLink != null &&
                    this.InstallLink.Equals(input.InstallLink))
                ) && 
                (
                    this.IconLink == input.IconLink ||
                    (this.IconLink != null &&
                    this.IconLink.Equals(input.IconLink))
                ) && 
                (
                    this.DistributionGroupId == input.DistributionGroupId ||
                    (this.DistributionGroupId != null &&
                    this.DistributionGroupId.Equals(input.DistributionGroupId))
                ) && 
                (
                    this.Installable == input.Installable ||
                    (this.Installable != null &&
                    this.Installable.Equals(input.Installable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppName != null)
                    hashCode = hashCode * 59 + this.AppName.GetHashCode();
                if (this.AppDisplayName != null)
                    hashCode = hashCode * 59 + this.AppDisplayName.GetHashCode();
                if (this.ReleaseId != null)
                    hashCode = hashCode * 59 + this.ReleaseId.GetHashCode();
                if (this.Platform != null)
                    hashCode = hashCode * 59 + this.Platform.GetHashCode();
                if (this.UploadedAt != null)
                    hashCode = hashCode * 59 + this.UploadedAt.GetHashCode();
                if (this.Fingerprint != null)
                    hashCode = hashCode * 59 + this.Fingerprint.GetHashCode();
                if (this.ReleaseNotes != null)
                    hashCode = hashCode * 59 + this.ReleaseNotes.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.ShortVersion != null)
                    hashCode = hashCode * 59 + this.ShortVersion.GetHashCode();
                if (this.MinOs != null)
                    hashCode = hashCode * 59 + this.MinOs.GetHashCode();
                if (this.MandatoryUpdate != null)
                    hashCode = hashCode * 59 + this.MandatoryUpdate.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.ProvisioningProfileName != null)
                    hashCode = hashCode * 59 + this.ProvisioningProfileName.GetHashCode();
                if (this.ProvisioningProfileType != null)
                    hashCode = hashCode * 59 + this.ProvisioningProfileType.GetHashCode();
                if (this.BundleIdentifier != null)
                    hashCode = hashCode * 59 + this.BundleIdentifier.GetHashCode();
                if (this.InstallLink != null)
                    hashCode = hashCode * 59 + this.InstallLink.GetHashCode();
                if (this.IconLink != null)
                    hashCode = hashCode * 59 + this.IconLink.GetHashCode();
                if (this.DistributionGroupId != null)
                    hashCode = hashCode * 59 + this.DistributionGroupId.GetHashCode();
                if (this.Installable != null)
                    hashCode = hashCode * 59 + this.Installable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
