/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Apple Mapping Request Type
    /// </summary>
    [DataContract]
        public partial class AppleMappingResponse :  IEquatable<AppleMappingResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppleMappingResponse" /> class.
        /// </summary>
        /// <param name="appId">ID of the apple application in Mobile Center.</param>
        /// <param name="serviceConnectionId">Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center..</param>
        /// <param name="appleId">ID of the apple application in apple store.</param>
        /// <param name="teamIdentifier">ID of the Team associated with the app in apple store.</param>
        public AppleMappingResponse(string appId = default(string), string serviceConnectionId = default(string), string appleId = default(string), string teamIdentifier = default(string))
        {
            this.AppId = appId;
            this.ServiceConnectionId = serviceConnectionId;
            this.AppleId = appleId;
            this.TeamIdentifier = teamIdentifier;
        }
        
        /// <summary>
        /// ID of the apple application in Mobile Center
        /// </summary>
        /// <value>ID of the apple application in Mobile Center</value>
        [DataMember(Name="app_id", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.
        /// </summary>
        /// <value>Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.</value>
        [DataMember(Name="service_connection_id", EmitDefaultValue=false)]
        public string ServiceConnectionId { get; set; }

        /// <summary>
        /// ID of the apple application in apple store
        /// </summary>
        /// <value>ID of the apple application in apple store</value>
        [DataMember(Name="apple_id", EmitDefaultValue=false)]
        public string AppleId { get; set; }

        /// <summary>
        /// ID of the Team associated with the app in apple store
        /// </summary>
        /// <value>ID of the Team associated with the app in apple store</value>
        [DataMember(Name="team_identifier", EmitDefaultValue=false)]
        public string TeamIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppleMappingResponse {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  ServiceConnectionId: ").Append(ServiceConnectionId).Append("\n");
            sb.Append("  AppleId: ").Append(AppleId).Append("\n");
            sb.Append("  TeamIdentifier: ").Append(TeamIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppleMappingResponse);
        }

        /// <summary>
        /// Returns true if AppleMappingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AppleMappingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppleMappingResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.ServiceConnectionId == input.ServiceConnectionId ||
                    (this.ServiceConnectionId != null &&
                    this.ServiceConnectionId.Equals(input.ServiceConnectionId))
                ) && 
                (
                    this.AppleId == input.AppleId ||
                    (this.AppleId != null &&
                    this.AppleId.Equals(input.AppleId))
                ) && 
                (
                    this.TeamIdentifier == input.TeamIdentifier ||
                    (this.TeamIdentifier != null &&
                    this.TeamIdentifier.Equals(input.TeamIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.ServiceConnectionId != null)
                    hashCode = hashCode * 59 + this.ServiceConnectionId.GetHashCode();
                if (this.AppleId != null)
                    hashCode = hashCode * 59 + this.AppleId.GetHashCode();
                if (this.TeamIdentifier != null)
                    hashCode = hashCode * 59 + this.TeamIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
