/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// symbol update message
    /// </summary>
    [DataContract]
        public partial class V2SymbolUpdateInfo :  IEquatable<V2SymbolUpdateInfo>, IValidatableObject
    {
        /// <summary>
        /// symbol upload status
        /// </summary>
        /// <value>symbol upload status</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Missing for value: missing
            /// </summary>
            [EnumMember(Value = "missing")]
            Missing = 1,
            /// <summary>
            /// Enum Ignored for value: ignored
            /// </summary>
            [EnumMember(Value = "ignored")]
            Ignored = 2,
            /// <summary>
            /// Enum Available for value: available
            /// </summary>
            [EnumMember(Value = "available")]
            Available = 3        }
        /// <summary>
        /// symbol upload status
        /// </summary>
        /// <value>symbol upload status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V2SymbolUpdateInfo" /> class.
        /// </summary>
        /// <param name="symbolId">UUID of the symbol (required).</param>
        /// <param name="appId">application id (required).</param>
        /// <param name="status">symbol upload status (required).</param>
        public V2SymbolUpdateInfo(string symbolId = default(string), string appId = default(string), StatusEnum status = default(StatusEnum))
        {
            // to ensure "symbolId" is required (not null)
            if (symbolId == null)
            {
                throw new InvalidDataException("symbolId is a required property for V2SymbolUpdateInfo and cannot be null");
            }
            else
            {
                this.SymbolId = symbolId;
            }
            // to ensure "appId" is required (not null)
            if (appId == null)
            {
                throw new InvalidDataException("appId is a required property for V2SymbolUpdateInfo and cannot be null");
            }
            else
            {
                this.AppId = appId;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for V2SymbolUpdateInfo and cannot be null");
            }
            else
            {
                this.Status = status;
            }
        }
        
        /// <summary>
        /// UUID of the symbol
        /// </summary>
        /// <value>UUID of the symbol</value>
        [DataMember(Name="symbol_id", EmitDefaultValue=false)]
        public string SymbolId { get; set; }

        /// <summary>
        /// application id
        /// </summary>
        /// <value>application id</value>
        [DataMember(Name="app_id", EmitDefaultValue=false)]
        public string AppId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V2SymbolUpdateInfo {\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V2SymbolUpdateInfo);
        }

        /// <summary>
        /// Returns true if V2SymbolUpdateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of V2SymbolUpdateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V2SymbolUpdateInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SymbolId == input.SymbolId ||
                    (this.SymbolId != null &&
                    this.SymbolId.Equals(input.SymbolId))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SymbolId != null)
                    hashCode = hashCode * 59 + this.SymbolId.GetHashCode();
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
