/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AnalyticsReleasesParameter
    /// </summary>
    [DataContract]
        public partial class AnalyticsReleasesParameter :  IEquatable<AnalyticsReleasesParameter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsReleasesParameter" /> class.
        /// </summary>
        /// <param name="releaseId">release id (required).</param>
        /// <param name="distributionGroupId">distribution group id (required).</param>
        /// <param name="userId">user id (required).</param>
        public AnalyticsReleasesParameter(int? releaseId = default(int?), string distributionGroupId = default(string), Guid? userId = default(Guid?))
        {
            // to ensure "releaseId" is required (not null)
            if (releaseId == null)
            {
                throw new InvalidDataException("releaseId is a required property for AnalyticsReleasesParameter and cannot be null");
            }
            else
            {
                this.ReleaseId = releaseId;
            }
            // to ensure "distributionGroupId" is required (not null)
            if (distributionGroupId == null)
            {
                throw new InvalidDataException("distributionGroupId is a required property for AnalyticsReleasesParameter and cannot be null");
            }
            else
            {
                this.DistributionGroupId = distributionGroupId;
            }
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for AnalyticsReleasesParameter and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
        }
        
        /// <summary>
        /// release id
        /// </summary>
        /// <value>release id</value>
        [DataMember(Name="release_id", EmitDefaultValue=false)]
        public int? ReleaseId { get; set; }

        /// <summary>
        /// distribution group id
        /// </summary>
        /// <value>distribution group id</value>
        [DataMember(Name="distribution_group_id", EmitDefaultValue=false)]
        public string DistributionGroupId { get; set; }

        /// <summary>
        /// user id
        /// </summary>
        /// <value>user id</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public Guid? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyticsReleasesParameter {\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("  DistributionGroupId: ").Append(DistributionGroupId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyticsReleasesParameter);
        }

        /// <summary>
        /// Returns true if AnalyticsReleasesParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyticsReleasesParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyticsReleasesParameter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReleaseId == input.ReleaseId ||
                    (this.ReleaseId != null &&
                    this.ReleaseId.Equals(input.ReleaseId))
                ) && 
                (
                    this.DistributionGroupId == input.DistributionGroupId ||
                    (this.DistributionGroupId != null &&
                    this.DistributionGroupId.Equals(input.DistributionGroupId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReleaseId != null)
                    hashCode = hashCode * 59 + this.ReleaseId.GetHashCode();
                if (this.DistributionGroupId != null)
                    hashCode = hashCode * 59 + this.DistributionGroupId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
