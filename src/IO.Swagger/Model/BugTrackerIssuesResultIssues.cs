/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Object returned in response to getting a bug tracker issue related to a crash group id
    /// </summary>
    [DataContract]
        public partial class BugTrackerIssuesResultIssues :  IEquatable<BugTrackerIssuesResultIssues>, IValidatableObject
    {
        /// <summary>
        /// Defines BugTrackerType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum BugTrackerTypeEnum
        {
            /// <summary>
            /// Enum Github for value: github
            /// </summary>
            [EnumMember(Value = "github")]
            Github = 1,
            /// <summary>
            /// Enum Vsts for value: vsts
            /// </summary>
            [EnumMember(Value = "vsts")]
            Vsts = 2,
            /// <summary>
            /// Enum Jira for value: jira
            /// </summary>
            [EnumMember(Value = "jira")]
            Jira = 3        }
        /// <summary>
        /// Gets or Sets BugTrackerType
        /// </summary>
        [DataMember(Name="bug_tracker_type", EmitDefaultValue=false)]
        public BugTrackerTypeEnum? BugTrackerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BugTrackerIssuesResultIssues" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="url">url.</param>
        /// <param name="title">title.</param>
        /// <param name="bugTrackerType">bugTrackerType.</param>
        /// <param name="repoName">repoName.</param>
        /// <param name="mobileCenterId">mobileCenterId.</param>
        /// <param name="eventType">eventType.</param>
        public BugTrackerIssuesResultIssues(string id = default(string), string url = default(string), string title = default(string), BugTrackerTypeEnum? bugTrackerType = default(BugTrackerTypeEnum?), string repoName = default(string), string mobileCenterId = default(string), string eventType = default(string))
        {
            this.Id = id;
            this.Url = url;
            this.Title = title;
            this.BugTrackerType = bugTrackerType;
            this.RepoName = repoName;
            this.MobileCenterId = mobileCenterId;
            this.EventType = eventType;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }


        /// <summary>
        /// Gets or Sets RepoName
        /// </summary>
        [DataMember(Name="repo_name", EmitDefaultValue=false)]
        public string RepoName { get; set; }

        /// <summary>
        /// Gets or Sets MobileCenterId
        /// </summary>
        [DataMember(Name="mobile_center_id", EmitDefaultValue=false)]
        public string MobileCenterId { get; set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name="event_type", EmitDefaultValue=false)]
        public string EventType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BugTrackerIssuesResultIssues {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  BugTrackerType: ").Append(BugTrackerType).Append("\n");
            sb.Append("  RepoName: ").Append(RepoName).Append("\n");
            sb.Append("  MobileCenterId: ").Append(MobileCenterId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BugTrackerIssuesResultIssues);
        }

        /// <summary>
        /// Returns true if BugTrackerIssuesResultIssues instances are equal
        /// </summary>
        /// <param name="input">Instance of BugTrackerIssuesResultIssues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BugTrackerIssuesResultIssues input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.BugTrackerType == input.BugTrackerType ||
                    (this.BugTrackerType != null &&
                    this.BugTrackerType.Equals(input.BugTrackerType))
                ) && 
                (
                    this.RepoName == input.RepoName ||
                    (this.RepoName != null &&
                    this.RepoName.Equals(input.RepoName))
                ) && 
                (
                    this.MobileCenterId == input.MobileCenterId ||
                    (this.MobileCenterId != null &&
                    this.MobileCenterId.Equals(input.MobileCenterId))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.BugTrackerType != null)
                    hashCode = hashCode * 59 + this.BugTrackerType.GetHashCode();
                if (this.RepoName != null)
                    hashCode = hashCode * 59 + this.RepoName.GetHashCode();
                if (this.MobileCenterId != null)
                    hashCode = hashCode * 59 + this.MobileCenterId.GetHashCode();
                if (this.EventType != null)
                    hashCode = hashCode * 59 + this.EventType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
