/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Alerting webhook ping operation result
    /// </summary>
    [DataContract]
        public partial class AlertWebhookPingResult :  IEquatable<AlertWebhookPingResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertWebhookPingResult" /> class.
        /// </summary>
        /// <param name="responseStatusCode">HTTP status code returned in response from calling webhook (required).</param>
        /// <param name="responseReason">Reason returned in response from calling webhook.</param>
        public AlertWebhookPingResult(int? responseStatusCode = default(int?), string responseReason = default(string))
        {
            // to ensure "responseStatusCode" is required (not null)
            if (responseStatusCode == null)
            {
                throw new InvalidDataException("responseStatusCode is a required property for AlertWebhookPingResult and cannot be null");
            }
            else
            {
                this.ResponseStatusCode = responseStatusCode;
            }
            this.ResponseReason = responseReason;
        }
        
        /// <summary>
        /// HTTP status code returned in response from calling webhook
        /// </summary>
        /// <value>HTTP status code returned in response from calling webhook</value>
        [DataMember(Name="response_status_code", EmitDefaultValue=false)]
        public int? ResponseStatusCode { get; set; }

        /// <summary>
        /// Reason returned in response from calling webhook
        /// </summary>
        /// <value>Reason returned in response from calling webhook</value>
        [DataMember(Name="response_reason", EmitDefaultValue=false)]
        public string ResponseReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertWebhookPingResult {\n");
            sb.Append("  ResponseStatusCode: ").Append(ResponseStatusCode).Append("\n");
            sb.Append("  ResponseReason: ").Append(ResponseReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertWebhookPingResult);
        }

        /// <summary>
        /// Returns true if AlertWebhookPingResult instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertWebhookPingResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertWebhookPingResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseStatusCode == input.ResponseStatusCode ||
                    (this.ResponseStatusCode != null &&
                    this.ResponseStatusCode.Equals(input.ResponseStatusCode))
                ) && 
                (
                    this.ResponseReason == input.ResponseReason ||
                    (this.ResponseReason != null &&
                    this.ResponseReason.Equals(input.ResponseReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseStatusCode != null)
                    hashCode = hashCode * 59 + this.ResponseStatusCode.GetHashCode();
                if (this.ResponseReason != null)
                    hashCode = hashCode * 59 + this.ResponseReason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
