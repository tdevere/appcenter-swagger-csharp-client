/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PrivateSharedConnectionResponse
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "serviceType")]
        public partial class PrivateSharedConnectionResponse :  IEquatable<PrivateSharedConnectionResponse>, IValidatableObject
    {
        /// <summary>
        /// service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate
        /// </summary>
        /// <value>service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ServiceTypeEnum
        {
            /// <summary>
            /// Enum Apple for value: apple
            /// </summary>
            [EnumMember(Value = "apple")]
            Apple = 1,
            /// <summary>
            /// Enum Jira for value: jira
            /// </summary>
            [EnumMember(Value = "jira")]
            Jira = 2,
            /// <summary>
            /// Enum Googleplay for value: googleplay
            /// </summary>
            [EnumMember(Value = "googleplay")]
            Googleplay = 3,
            /// <summary>
            /// Enum Gitlab for value: gitlab
            /// </summary>
            [EnumMember(Value = "gitlab")]
            Gitlab = 4        }
        /// <summary>
        /// service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate
        /// </summary>
        /// <value>service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate</value>
        [DataMember(Name="serviceType", EmitDefaultValue=false)]
        public ServiceTypeEnum ServiceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrivateSharedConnectionResponse" /> class.
        /// </summary>
        /// <param name="id">id of the shared connection (required).</param>
        /// <param name="displayName">display name of shared connection.</param>
        /// <param name="serviceType">service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate (required).</param>
        /// <param name="isValid">whether the credentials are valid or not.</param>
        /// <param name="is2FA">if the account is a 2FA account or not.</param>
        public PrivateSharedConnectionResponse(string id = default(string), string displayName = default(string), ServiceTypeEnum serviceType = default(ServiceTypeEnum), bool? isValid = default(bool?), bool? is2FA = default(bool?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for PrivateSharedConnectionResponse and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "serviceType" is required (not null)
            if (serviceType == null)
            {
                throw new InvalidDataException("serviceType is a required property for PrivateSharedConnectionResponse and cannot be null");
            }
            else
            {
                this.ServiceType = serviceType;
            }
            this.DisplayName = displayName;
            this.IsValid = isValid;
            this.Is2FA = is2FA;
        }
        
        /// <summary>
        /// id of the shared connection
        /// </summary>
        /// <value>id of the shared connection</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// display name of shared connection
        /// </summary>
        /// <value>display name of shared connection</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }


        /// <summary>
        /// whether the credentials are valid or not
        /// </summary>
        /// <value>whether the credentials are valid or not</value>
        [DataMember(Name="isValid", EmitDefaultValue=false)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// if the account is a 2FA account or not
        /// </summary>
        /// <value>if the account is a 2FA account or not</value>
        [DataMember(Name="is2FA", EmitDefaultValue=false)]
        public bool? Is2FA { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrivateSharedConnectionResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  Is2FA: ").Append(Is2FA).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrivateSharedConnectionResponse);
        }

        /// <summary>
        /// Returns true if PrivateSharedConnectionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PrivateSharedConnectionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrivateSharedConnectionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.ServiceType == input.ServiceType ||
                    (this.ServiceType != null &&
                    this.ServiceType.Equals(input.ServiceType))
                ) && 
                (
                    this.IsValid == input.IsValid ||
                    (this.IsValid != null &&
                    this.IsValid.Equals(input.IsValid))
                ) && 
                (
                    this.Is2FA == input.Is2FA ||
                    (this.Is2FA != null &&
                    this.Is2FA.Equals(input.Is2FA))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.ServiceType != null)
                    hashCode = hashCode * 59 + this.ServiceType.GetHashCode();
                if (this.IsValid != null)
                    hashCode = hashCode * 59 + this.IsValid.GetHashCode();
                if (this.Is2FA != null)
                    hashCode = hashCode * 59 + this.Is2FA.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
