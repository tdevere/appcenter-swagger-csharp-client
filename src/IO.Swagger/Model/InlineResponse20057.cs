/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Basic information on a release
    /// </summary>
    [DataContract]
        public partial class InlineResponse20057 :  IEquatable<InlineResponse20057>, IValidatableObject
    {
        /// <summary>
        /// Destination for this release.
        /// </summary>
        /// <value>Destination for this release.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DestinationTypeEnum
        {
            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            [EnumMember(Value = "group")]
            Group = 1,
            /// <summary>
            /// Enum Store for value: store
            /// </summary>
            [EnumMember(Value = "store")]
            Store = 2,
            /// <summary>
            /// Enum Tester for value: tester
            /// </summary>
            [EnumMember(Value = "tester")]
            Tester = 3        }
        /// <summary>
        /// Destination for this release.
        /// </summary>
        /// <value>Destination for this release.</value>
        [DataMember(Name="destination_type", EmitDefaultValue=false)]
        public DestinationTypeEnum? DestinationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20057" /> class.
        /// </summary>
        /// <param name="id">ID identifying this unique release..</param>
        /// <param name="version">The release&#x27;s version. For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. .</param>
        /// <param name="shortVersion">The release&#x27;s short version. For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. .</param>
        /// <param name="uploadedAt">UTC time in ISO 8601 format of the uploaded time..</param>
        /// <param name="destinationType">Destination for this release..</param>
        /// <param name="distributionStores">a list of distribution stores that are associated with this release..</param>
        public InlineResponse20057(decimal? id = default(decimal?), string version = default(string), string shortVersion = default(string), string uploadedAt = default(string), DestinationTypeEnum? destinationType = default(DestinationTypeEnum?), List<V01appsownerNameappNamedistributionStoresstoreNamereleasesDistributionStores> distributionStores = default(List<V01appsownerNameappNamedistributionStoresstoreNamereleasesDistributionStores>))
        {
            this.Id = id;
            this.Version = version;
            this.ShortVersion = shortVersion;
            this.UploadedAt = uploadedAt;
            this.DestinationType = destinationType;
            this.DistributionStores = distributionStores;
        }
        
        /// <summary>
        /// ID identifying this unique release.
        /// </summary>
        /// <value>ID identifying this unique release.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// The release&#x27;s version. For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 
        /// </summary>
        /// <value>The release&#x27;s version. For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. </value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// The release&#x27;s short version. For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 
        /// </summary>
        /// <value>The release&#x27;s short version. For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. </value>
        [DataMember(Name="short_version", EmitDefaultValue=false)]
        public string ShortVersion { get; set; }

        /// <summary>
        /// UTC time in ISO 8601 format of the uploaded time.
        /// </summary>
        /// <value>UTC time in ISO 8601 format of the uploaded time.</value>
        [DataMember(Name="uploaded_at", EmitDefaultValue=false)]
        public string UploadedAt { get; set; }


        /// <summary>
        /// a list of distribution stores that are associated with this release.
        /// </summary>
        /// <value>a list of distribution stores that are associated with this release.</value>
        [DataMember(Name="distribution_stores", EmitDefaultValue=false)]
        public List<V01appsownerNameappNamedistributionStoresstoreNamereleasesDistributionStores> DistributionStores { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20057 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  ShortVersion: ").Append(ShortVersion).Append("\n");
            sb.Append("  UploadedAt: ").Append(UploadedAt).Append("\n");
            sb.Append("  DestinationType: ").Append(DestinationType).Append("\n");
            sb.Append("  DistributionStores: ").Append(DistributionStores).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20057);
        }

        /// <summary>
        /// Returns true if InlineResponse20057 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20057 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20057 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.ShortVersion == input.ShortVersion ||
                    (this.ShortVersion != null &&
                    this.ShortVersion.Equals(input.ShortVersion))
                ) && 
                (
                    this.UploadedAt == input.UploadedAt ||
                    (this.UploadedAt != null &&
                    this.UploadedAt.Equals(input.UploadedAt))
                ) && 
                (
                    this.DestinationType == input.DestinationType ||
                    (this.DestinationType != null &&
                    this.DestinationType.Equals(input.DestinationType))
                ) && 
                (
                    this.DistributionStores == input.DistributionStores ||
                    this.DistributionStores != null &&
                    input.DistributionStores != null &&
                    this.DistributionStores.SequenceEqual(input.DistributionStores)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.ShortVersion != null)
                    hashCode = hashCode * 59 + this.ShortVersion.GetHashCode();
                if (this.UploadedAt != null)
                    hashCode = hashCode * 59 + this.UploadedAt.GetHashCode();
                if (this.DestinationType != null)
                    hashCode = hashCode * 59 + this.DestinationType.GetHashCode();
                if (this.DistributionStores != null)
                    hashCode = hashCode * 59 + this.DistributionStores.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
