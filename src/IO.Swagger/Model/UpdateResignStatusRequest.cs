/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Updates the status of the resign request
    /// </summary>
    [DataContract]
        public partial class UpdateResignStatusRequest :  IEquatable<UpdateResignStatusRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateResignStatusRequest" /> class.
        /// </summary>
        /// <param name="status">The updated status for the resigning request. (required).</param>
        /// <param name="errorCode">Error code if an error occured in the resigning operation..</param>
        /// <param name="errorMessage">Error message if an error occured in the resigning operation..</param>
        /// <param name="releaseMetadata">releaseMetadata from ios resigner extractor.</param>
        public UpdateResignStatusRequest(string status = default(string), string errorCode = default(string), string errorMessage = default(string), Object releaseMetadata = default(Object))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for UpdateResignStatusRequest and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.ErrorCode = errorCode;
            this.ErrorMessage = errorMessage;
            this.ReleaseMetadata = releaseMetadata;
        }
        
        /// <summary>
        /// The updated status for the resigning request.
        /// </summary>
        /// <value>The updated status for the resigning request.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Error code if an error occured in the resigning operation.
        /// </summary>
        /// <value>Error code if an error occured in the resigning operation.</value>
        [DataMember(Name="error_code", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Error message if an error occured in the resigning operation.
        /// </summary>
        /// <value>Error message if an error occured in the resigning operation.</value>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// releaseMetadata from ios resigner extractor
        /// </summary>
        /// <value>releaseMetadata from ios resigner extractor</value>
        [DataMember(Name="releaseMetadata", EmitDefaultValue=false)]
        public Object ReleaseMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateResignStatusRequest {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ReleaseMetadata: ").Append(ReleaseMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateResignStatusRequest);
        }

        /// <summary>
        /// Returns true if UpdateResignStatusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateResignStatusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateResignStatusRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.ReleaseMetadata == input.ReleaseMetadata ||
                    (this.ReleaseMetadata != null &&
                    this.ReleaseMetadata.Equals(input.ReleaseMetadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.ReleaseMetadata != null)
                    hashCode = hashCode * 59 + this.ReleaseMetadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
