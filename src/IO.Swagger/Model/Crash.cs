/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Crash
    /// </summary>
    [DataContract]
        public partial class Crash :  IEquatable<Crash>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Crash" /> class.
        /// </summary>
        /// <param name="details">details.</param>
        /// <param name="newCrashGroupId">newCrashGroupId (required).</param>
        /// <param name="crashId">crashId (required).</param>
        /// <param name="newCrashId">newCrashId (required).</param>
        /// <param name="displayId">displayId.</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="version">version (required).</param>
        /// <param name="build">build (required).</param>
        /// <param name="device">device (required).</param>
        /// <param name="deviceName">deviceName.</param>
        /// <param name="osVersion">osVersion (required).</param>
        /// <param name="osType">osType.</param>
        /// <param name="stacktrace">stacktrace.</param>
        /// <param name="userName">userName (required).</param>
        /// <param name="userEmail">userEmail.</param>
        public Crash(CrashDetails details = default(CrashDetails), string newCrashGroupId = default(string), string crashId = default(string), string newCrashId = default(string), string displayId = default(string), DateTime? timestamp = default(DateTime?), string version = default(string), string build = default(string), string device = default(string), string deviceName = default(string), string osVersion = default(string), string osType = default(string), Stacktrace stacktrace = default(Stacktrace), string userName = default(string), string userEmail = default(string))
        {
            // to ensure "newCrashGroupId" is required (not null)
            if (newCrashGroupId == null)
            {
                throw new InvalidDataException("newCrashGroupId is a required property for Crash and cannot be null");
            }
            else
            {
                this.NewCrashGroupId = newCrashGroupId;
            }
            // to ensure "crashId" is required (not null)
            if (crashId == null)
            {
                throw new InvalidDataException("crashId is a required property for Crash and cannot be null");
            }
            else
            {
                this.CrashId = crashId;
            }
            // to ensure "newCrashId" is required (not null)
            if (newCrashId == null)
            {
                throw new InvalidDataException("newCrashId is a required property for Crash and cannot be null");
            }
            else
            {
                this.NewCrashId = newCrashId;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for Crash and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for Crash and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            // to ensure "build" is required (not null)
            if (build == null)
            {
                throw new InvalidDataException("build is a required property for Crash and cannot be null");
            }
            else
            {
                this.Build = build;
            }
            // to ensure "device" is required (not null)
            if (device == null)
            {
                throw new InvalidDataException("device is a required property for Crash and cannot be null");
            }
            else
            {
                this.Device = device;
            }
            // to ensure "osVersion" is required (not null)
            if (osVersion == null)
            {
                throw new InvalidDataException("osVersion is a required property for Crash and cannot be null");
            }
            else
            {
                this.OsVersion = osVersion;
            }
            // to ensure "userName" is required (not null)
            if (userName == null)
            {
                throw new InvalidDataException("userName is a required property for Crash and cannot be null");
            }
            else
            {
                this.UserName = userName;
            }
            this.Details = details;
            this.DisplayId = displayId;
            this.DeviceName = deviceName;
            this.OsType = osType;
            this.Stacktrace = stacktrace;
            this.UserEmail = userEmail;
        }
        
        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public CrashDetails Details { get; set; }

        /// <summary>
        /// Gets or Sets NewCrashGroupId
        /// </summary>
        [DataMember(Name="new_crash_group_id", EmitDefaultValue=false)]
        public string NewCrashGroupId { get; set; }

        /// <summary>
        /// Gets or Sets CrashId
        /// </summary>
        [DataMember(Name="crash_id", EmitDefaultValue=false)]
        public string CrashId { get; set; }

        /// <summary>
        /// Gets or Sets NewCrashId
        /// </summary>
        [DataMember(Name="new_crash_id", EmitDefaultValue=false)]
        public string NewCrashId { get; set; }

        /// <summary>
        /// Gets or Sets DisplayId
        /// </summary>
        [DataMember(Name="display_id", EmitDefaultValue=false)]
        public string DisplayId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name="build", EmitDefaultValue=false)]
        public string Build { get; set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name="device", EmitDefaultValue=false)]
        public string Device { get; set; }

        /// <summary>
        /// Gets or Sets DeviceName
        /// </summary>
        [DataMember(Name="device_name", EmitDefaultValue=false)]
        public string DeviceName { get; set; }

        /// <summary>
        /// Gets or Sets OsVersion
        /// </summary>
        [DataMember(Name="os_version", EmitDefaultValue=false)]
        public string OsVersion { get; set; }

        /// <summary>
        /// Gets or Sets OsType
        /// </summary>
        [DataMember(Name="os_type", EmitDefaultValue=false)]
        public string OsType { get; set; }

        /// <summary>
        /// Gets or Sets Stacktrace
        /// </summary>
        [DataMember(Name="stacktrace", EmitDefaultValue=false)]
        public Stacktrace Stacktrace { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets UserEmail
        /// </summary>
        [DataMember(Name="user_email", EmitDefaultValue=false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Crash {\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  NewCrashGroupId: ").Append(NewCrashGroupId).Append("\n");
            sb.Append("  CrashId: ").Append(CrashId).Append("\n");
            sb.Append("  NewCrashId: ").Append(NewCrashId).Append("\n");
            sb.Append("  DisplayId: ").Append(DisplayId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  DeviceName: ").Append(DeviceName).Append("\n");
            sb.Append("  OsVersion: ").Append(OsVersion).Append("\n");
            sb.Append("  OsType: ").Append(OsType).Append("\n");
            sb.Append("  Stacktrace: ").Append(Stacktrace).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Crash);
        }

        /// <summary>
        /// Returns true if Crash instances are equal
        /// </summary>
        /// <param name="input">Instance of Crash to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Crash input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.NewCrashGroupId == input.NewCrashGroupId ||
                    (this.NewCrashGroupId != null &&
                    this.NewCrashGroupId.Equals(input.NewCrashGroupId))
                ) && 
                (
                    this.CrashId == input.CrashId ||
                    (this.CrashId != null &&
                    this.CrashId.Equals(input.CrashId))
                ) && 
                (
                    this.NewCrashId == input.NewCrashId ||
                    (this.NewCrashId != null &&
                    this.NewCrashId.Equals(input.NewCrashId))
                ) && 
                (
                    this.DisplayId == input.DisplayId ||
                    (this.DisplayId != null &&
                    this.DisplayId.Equals(input.DisplayId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Build == input.Build ||
                    (this.Build != null &&
                    this.Build.Equals(input.Build))
                ) && 
                (
                    this.Device == input.Device ||
                    (this.Device != null &&
                    this.Device.Equals(input.Device))
                ) && 
                (
                    this.DeviceName == input.DeviceName ||
                    (this.DeviceName != null &&
                    this.DeviceName.Equals(input.DeviceName))
                ) && 
                (
                    this.OsVersion == input.OsVersion ||
                    (this.OsVersion != null &&
                    this.OsVersion.Equals(input.OsVersion))
                ) && 
                (
                    this.OsType == input.OsType ||
                    (this.OsType != null &&
                    this.OsType.Equals(input.OsType))
                ) && 
                (
                    this.Stacktrace == input.Stacktrace ||
                    (this.Stacktrace != null &&
                    this.Stacktrace.Equals(input.Stacktrace))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.UserEmail == input.UserEmail ||
                    (this.UserEmail != null &&
                    this.UserEmail.Equals(input.UserEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.NewCrashGroupId != null)
                    hashCode = hashCode * 59 + this.NewCrashGroupId.GetHashCode();
                if (this.CrashId != null)
                    hashCode = hashCode * 59 + this.CrashId.GetHashCode();
                if (this.NewCrashId != null)
                    hashCode = hashCode * 59 + this.NewCrashId.GetHashCode();
                if (this.DisplayId != null)
                    hashCode = hashCode * 59 + this.DisplayId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Build != null)
                    hashCode = hashCode * 59 + this.Build.GetHashCode();
                if (this.Device != null)
                    hashCode = hashCode * 59 + this.Device.GetHashCode();
                if (this.DeviceName != null)
                    hashCode = hashCode * 59 + this.DeviceName.GetHashCode();
                if (this.OsVersion != null)
                    hashCode = hashCode * 59 + this.OsVersion.GetHashCode();
                if (this.OsType != null)
                    hashCode = hashCode * 59 + this.OsType.GetHashCode();
                if (this.Stacktrace != null)
                    hashCode = hashCode * 59 + this.Stacktrace.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.UserEmail != null)
                    hashCode = hashCode * 59 + this.UserEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
