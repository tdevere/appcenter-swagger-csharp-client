/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// New app release alerting event
    /// </summary>
    [DataContract]
        public partial class NewAppReleaseAlertingEvent :  IEquatable<NewAppReleaseAlertingEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewAppReleaseAlertingEvent" /> class.
        /// </summary>
        /// <param name="userIds">List of users who need to receive an email notification. If this is not null, then only sending emails will be triggered even if the event requires calling webhooks or doing other actions..</param>
        /// <param name="disableWebhook">indicate whether notify via webhook or not.</param>
        /// <param name="appReleaseProperties">appReleaseProperties.</param>
        public NewAppReleaseAlertingEvent(List<string> userIds = default(List<string>), bool? disableWebhook = default(bool?), NewAppReleaseAlertingEventAppReleaseProperties appReleaseProperties = default(NewAppReleaseAlertingEventAppReleaseProperties))
        {
            this.UserIds = userIds;
            this.DisableWebhook = disableWebhook;
            this.AppReleaseProperties = appReleaseProperties;
        }
        
        /// <summary>
        /// List of users who need to receive an email notification. If this is not null, then only sending emails will be triggered even if the event requires calling webhooks or doing other actions.
        /// </summary>
        /// <value>List of users who need to receive an email notification. If this is not null, then only sending emails will be triggered even if the event requires calling webhooks or doing other actions.</value>
        [DataMember(Name="user_ids", EmitDefaultValue=false)]
        public List<string> UserIds { get; set; }

        /// <summary>
        /// indicate whether notify via webhook or not
        /// </summary>
        /// <value>indicate whether notify via webhook or not</value>
        [DataMember(Name="disable_webhook", EmitDefaultValue=false)]
        public bool? DisableWebhook { get; set; }

        /// <summary>
        /// Gets or Sets AppReleaseProperties
        /// </summary>
        [DataMember(Name="app_release_properties", EmitDefaultValue=false)]
        public NewAppReleaseAlertingEventAppReleaseProperties AppReleaseProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewAppReleaseAlertingEvent {\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("  DisableWebhook: ").Append(DisableWebhook).Append("\n");
            sb.Append("  AppReleaseProperties: ").Append(AppReleaseProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewAppReleaseAlertingEvent);
        }

        /// <summary>
        /// Returns true if NewAppReleaseAlertingEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of NewAppReleaseAlertingEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewAppReleaseAlertingEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserIds == input.UserIds ||
                    this.UserIds != null &&
                    input.UserIds != null &&
                    this.UserIds.SequenceEqual(input.UserIds)
                ) && 
                (
                    this.DisableWebhook == input.DisableWebhook ||
                    (this.DisableWebhook != null &&
                    this.DisableWebhook.Equals(input.DisableWebhook))
                ) && 
                (
                    this.AppReleaseProperties == input.AppReleaseProperties ||
                    (this.AppReleaseProperties != null &&
                    this.AppReleaseProperties.Equals(input.AppReleaseProperties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserIds != null)
                    hashCode = hashCode * 59 + this.UserIds.GetHashCode();
                if (this.DisableWebhook != null)
                    hashCode = hashCode * 59 + this.DisableWebhook.GetHashCode();
                if (this.AppReleaseProperties != null)
                    hashCode = hashCode * 59 + this.AppReleaseProperties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
