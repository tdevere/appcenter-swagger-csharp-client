/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Provisioning profile fetch and store information
    /// </summary>
    [DataContract]
        public partial class V01appsownerNameappNamebranchesbranchconfigToolsetsXcodeAppExtensionProvisioningProfileFiles :  IEquatable<V01appsownerNameappNamebranchesbranchconfigToolsetsXcodeAppExtensionProvisioningProfileFiles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V01appsownerNameappNamebranchesbranchconfigToolsetsXcodeAppExtensionProvisioningProfileFiles" /> class.
        /// </summary>
        /// <param name="fileName">Name of uploaded provisioning profile.</param>
        /// <param name="fileId">File id from secure file storage.</param>
        /// <param name="uploadId">Upload id to App Center File Upload Store.</param>
        /// <param name="targetBundleIdentifier">Target the provisioning profile is used to sign.</param>
        public V01appsownerNameappNamebranchesbranchconfigToolsetsXcodeAppExtensionProvisioningProfileFiles(string fileName = default(string), string fileId = default(string), string uploadId = default(string), string targetBundleIdentifier = default(string))
        {
            this.FileName = fileName;
            this.FileId = fileId;
            this.UploadId = uploadId;
            this.TargetBundleIdentifier = targetBundleIdentifier;
        }
        
        /// <summary>
        /// Name of uploaded provisioning profile
        /// </summary>
        /// <value>Name of uploaded provisioning profile</value>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// File id from secure file storage
        /// </summary>
        /// <value>File id from secure file storage</value>
        [DataMember(Name="fileId", EmitDefaultValue=false)]
        public string FileId { get; set; }

        /// <summary>
        /// Upload id to App Center File Upload Store
        /// </summary>
        /// <value>Upload id to App Center File Upload Store</value>
        [DataMember(Name="uploadId", EmitDefaultValue=false)]
        public string UploadId { get; set; }

        /// <summary>
        /// Target the provisioning profile is used to sign
        /// </summary>
        /// <value>Target the provisioning profile is used to sign</value>
        [DataMember(Name="targetBundleIdentifier", EmitDefaultValue=false)]
        public string TargetBundleIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V01appsownerNameappNamebranchesbranchconfigToolsetsXcodeAppExtensionProvisioningProfileFiles {\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  UploadId: ").Append(UploadId).Append("\n");
            sb.Append("  TargetBundleIdentifier: ").Append(TargetBundleIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V01appsownerNameappNamebranchesbranchconfigToolsetsXcodeAppExtensionProvisioningProfileFiles);
        }

        /// <summary>
        /// Returns true if V01appsownerNameappNamebranchesbranchconfigToolsetsXcodeAppExtensionProvisioningProfileFiles instances are equal
        /// </summary>
        /// <param name="input">Instance of V01appsownerNameappNamebranchesbranchconfigToolsetsXcodeAppExtensionProvisioningProfileFiles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V01appsownerNameappNamebranchesbranchconfigToolsetsXcodeAppExtensionProvisioningProfileFiles input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.FileId == input.FileId ||
                    (this.FileId != null &&
                    this.FileId.Equals(input.FileId))
                ) && 
                (
                    this.UploadId == input.UploadId ||
                    (this.UploadId != null &&
                    this.UploadId.Equals(input.UploadId))
                ) && 
                (
                    this.TargetBundleIdentifier == input.TargetBundleIdentifier ||
                    (this.TargetBundleIdentifier != null &&
                    this.TargetBundleIdentifier.Equals(input.TargetBundleIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.FileId != null)
                    hashCode = hashCode * 59 + this.FileId.GetHashCode();
                if (this.UploadId != null)
                    hashCode = hashCode * 59 + this.UploadId.GetHashCode();
                if (this.TargetBundleIdentifier != null)
                    hashCode = hashCode * 59 + this.TargetBundleIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
