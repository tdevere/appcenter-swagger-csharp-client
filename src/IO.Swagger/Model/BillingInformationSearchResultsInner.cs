/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BillingInformationSearchResultsInner
    /// </summary>
    [DataContract]
        public partial class BillingInformationSearchResultsInner :  IEquatable<BillingInformationSearchResultsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingInformationSearchResultsInner" /> class.
        /// </summary>
        /// <param name="accountId">The Account ID.</param>
        /// <param name="accountName">The Account Name.</param>
        /// <param name="billingInternalAccountId">The Billing Internal Account ID.</param>
        /// <param name="buildPlan">The ID of the Build Billing Plan.</param>
        /// <param name="testPlan">The ID of the Test Billing Plan.</param>
        public BillingInformationSearchResultsInner(string accountId = default(string), string accountName = default(string), string billingInternalAccountId = default(string), string buildPlan = default(string), string testPlan = default(string))
        {
            this.AccountId = accountId;
            this.AccountName = accountName;
            this.BillingInternalAccountId = billingInternalAccountId;
            this.BuildPlan = buildPlan;
            this.TestPlan = testPlan;
        }
        
        /// <summary>
        /// The Account ID
        /// </summary>
        /// <value>The Account ID</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The Account Name
        /// </summary>
        /// <value>The Account Name</value>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// The Billing Internal Account ID
        /// </summary>
        /// <value>The Billing Internal Account ID</value>
        [DataMember(Name="billingInternalAccountId", EmitDefaultValue=false)]
        public string BillingInternalAccountId { get; set; }

        /// <summary>
        /// The ID of the Build Billing Plan
        /// </summary>
        /// <value>The ID of the Build Billing Plan</value>
        [DataMember(Name="buildPlan", EmitDefaultValue=false)]
        public string BuildPlan { get; set; }

        /// <summary>
        /// The ID of the Test Billing Plan
        /// </summary>
        /// <value>The ID of the Test Billing Plan</value>
        [DataMember(Name="testPlan", EmitDefaultValue=false)]
        public string TestPlan { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingInformationSearchResultsInner {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  BillingInternalAccountId: ").Append(BillingInternalAccountId).Append("\n");
            sb.Append("  BuildPlan: ").Append(BuildPlan).Append("\n");
            sb.Append("  TestPlan: ").Append(TestPlan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillingInformationSearchResultsInner);
        }

        /// <summary>
        /// Returns true if BillingInformationSearchResultsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of BillingInformationSearchResultsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingInformationSearchResultsInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.BillingInternalAccountId == input.BillingInternalAccountId ||
                    (this.BillingInternalAccountId != null &&
                    this.BillingInternalAccountId.Equals(input.BillingInternalAccountId))
                ) && 
                (
                    this.BuildPlan == input.BuildPlan ||
                    (this.BuildPlan != null &&
                    this.BuildPlan.Equals(input.BuildPlan))
                ) && 
                (
                    this.TestPlan == input.TestPlan ||
                    (this.TestPlan != null &&
                    this.TestPlan.Equals(input.TestPlan))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.BillingInternalAccountId != null)
                    hashCode = hashCode * 59 + this.BillingInternalAccountId.GetHashCode();
                if (this.BuildPlan != null)
                    hashCode = hashCode * 59 + this.BuildPlan.GetHashCode();
                if (this.TestPlan != null)
                    hashCode = hashCode * 59 + this.TestPlan.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
