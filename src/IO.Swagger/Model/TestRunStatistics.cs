/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Summary single test run on Xamarin Test Cloud
    /// </summary>
    [DataContract]
        public partial class TestRunStatistics :  IEquatable<TestRunStatistics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestRunStatistics" /> class.
        /// </summary>
        /// <param name="devices">Number of devices running the test.</param>
        /// <param name="devicesFinished">Number of finished devices.</param>
        /// <param name="devicesFailed">Number of failed devices.</param>
        /// <param name="total">Number of tests in total.</param>
        /// <param name="passed">Number of passed tests.</param>
        /// <param name="failed">Number of failed tests.</param>
        /// <param name="skipped">Number of skipped tests.</param>
        /// <param name="peakMemory">The max amount of MB used during the test run.</param>
        /// <param name="totalDeviceMinutes">The number of minutes of device time the test has been runnign.</param>
        public TestRunStatistics(decimal? devices = default(decimal?), decimal? devicesFinished = default(decimal?), decimal? devicesFailed = default(decimal?), decimal? total = default(decimal?), decimal? passed = default(decimal?), decimal? failed = default(decimal?), decimal? skipped = default(decimal?), decimal? peakMemory = default(decimal?), decimal? totalDeviceMinutes = default(decimal?))
        {
            this.Devices = devices;
            this.DevicesFinished = devicesFinished;
            this.DevicesFailed = devicesFailed;
            this.Total = total;
            this.Passed = passed;
            this.Failed = failed;
            this.Skipped = skipped;
            this.PeakMemory = peakMemory;
            this.TotalDeviceMinutes = totalDeviceMinutes;
        }
        
        /// <summary>
        /// Number of devices running the test
        /// </summary>
        /// <value>Number of devices running the test</value>
        [DataMember(Name="devices", EmitDefaultValue=false)]
        public decimal? Devices { get; set; }

        /// <summary>
        /// Number of finished devices
        /// </summary>
        /// <value>Number of finished devices</value>
        [DataMember(Name="devicesFinished", EmitDefaultValue=false)]
        public decimal? DevicesFinished { get; set; }

        /// <summary>
        /// Number of failed devices
        /// </summary>
        /// <value>Number of failed devices</value>
        [DataMember(Name="devicesFailed", EmitDefaultValue=false)]
        public decimal? DevicesFailed { get; set; }

        /// <summary>
        /// Number of tests in total
        /// </summary>
        /// <value>Number of tests in total</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal? Total { get; set; }

        /// <summary>
        /// Number of passed tests
        /// </summary>
        /// <value>Number of passed tests</value>
        [DataMember(Name="passed", EmitDefaultValue=false)]
        public decimal? Passed { get; set; }

        /// <summary>
        /// Number of failed tests
        /// </summary>
        /// <value>Number of failed tests</value>
        [DataMember(Name="failed", EmitDefaultValue=false)]
        public decimal? Failed { get; set; }

        /// <summary>
        /// Number of skipped tests
        /// </summary>
        /// <value>Number of skipped tests</value>
        [DataMember(Name="skipped", EmitDefaultValue=false)]
        public decimal? Skipped { get; set; }

        /// <summary>
        /// The max amount of MB used during the test run
        /// </summary>
        /// <value>The max amount of MB used during the test run</value>
        [DataMember(Name="peakMemory", EmitDefaultValue=false)]
        public decimal? PeakMemory { get; set; }

        /// <summary>
        /// The number of minutes of device time the test has been runnign
        /// </summary>
        /// <value>The number of minutes of device time the test has been runnign</value>
        [DataMember(Name="totalDeviceMinutes", EmitDefaultValue=false)]
        public decimal? TotalDeviceMinutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestRunStatistics {\n");
            sb.Append("  Devices: ").Append(Devices).Append("\n");
            sb.Append("  DevicesFinished: ").Append(DevicesFinished).Append("\n");
            sb.Append("  DevicesFailed: ").Append(DevicesFailed).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Passed: ").Append(Passed).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Skipped: ").Append(Skipped).Append("\n");
            sb.Append("  PeakMemory: ").Append(PeakMemory).Append("\n");
            sb.Append("  TotalDeviceMinutes: ").Append(TotalDeviceMinutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestRunStatistics);
        }

        /// <summary>
        /// Returns true if TestRunStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of TestRunStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestRunStatistics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Devices == input.Devices ||
                    (this.Devices != null &&
                    this.Devices.Equals(input.Devices))
                ) && 
                (
                    this.DevicesFinished == input.DevicesFinished ||
                    (this.DevicesFinished != null &&
                    this.DevicesFinished.Equals(input.DevicesFinished))
                ) && 
                (
                    this.DevicesFailed == input.DevicesFailed ||
                    (this.DevicesFailed != null &&
                    this.DevicesFailed.Equals(input.DevicesFailed))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Passed == input.Passed ||
                    (this.Passed != null &&
                    this.Passed.Equals(input.Passed))
                ) && 
                (
                    this.Failed == input.Failed ||
                    (this.Failed != null &&
                    this.Failed.Equals(input.Failed))
                ) && 
                (
                    this.Skipped == input.Skipped ||
                    (this.Skipped != null &&
                    this.Skipped.Equals(input.Skipped))
                ) && 
                (
                    this.PeakMemory == input.PeakMemory ||
                    (this.PeakMemory != null &&
                    this.PeakMemory.Equals(input.PeakMemory))
                ) && 
                (
                    this.TotalDeviceMinutes == input.TotalDeviceMinutes ||
                    (this.TotalDeviceMinutes != null &&
                    this.TotalDeviceMinutes.Equals(input.TotalDeviceMinutes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Devices != null)
                    hashCode = hashCode * 59 + this.Devices.GetHashCode();
                if (this.DevicesFinished != null)
                    hashCode = hashCode * 59 + this.DevicesFinished.GetHashCode();
                if (this.DevicesFailed != null)
                    hashCode = hashCode * 59 + this.DevicesFailed.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Passed != null)
                    hashCode = hashCode * 59 + this.Passed.GetHashCode();
                if (this.Failed != null)
                    hashCode = hashCode * 59 + this.Failed.GetHashCode();
                if (this.Skipped != null)
                    hashCode = hashCode * 59 + this.Skipped.GetHashCode();
                if (this.PeakMemory != null)
                    hashCode = hashCode * 59 + this.PeakMemory.GetHashCode();
                if (this.TotalDeviceMinutes != null)
                    hashCode = hashCode * 59 + this.TotalDeviceMinutes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
