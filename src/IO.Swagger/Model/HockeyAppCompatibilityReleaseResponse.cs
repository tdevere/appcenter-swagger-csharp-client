/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HockeyAppCompatibilityReleaseResponse
    /// </summary>
    [DataContract]
        public partial class HockeyAppCompatibilityReleaseResponse :  IEquatable<HockeyAppCompatibilityReleaseResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HockeyAppCompatibilityReleaseResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="shortversion">shortversion.</param>
        /// <param name="version">version.</param>
        /// <param name="uploadedAt">uploadedAt.</param>
        /// <param name="appsize">appsize.</param>
        /// <param name="notes">notes.</param>
        /// <param name="mandatory">mandatory.</param>
        /// <param name="external">external.</param>
        /// <param name="deviceFamily">deviceFamily.</param>
        /// <param name="minimumOsVersion">minimumOsVersion.</param>
        /// <param name="installUrl">installUrl.</param>
        /// <param name="bundleIdentifier">bundleIdentifier.</param>
        public HockeyAppCompatibilityReleaseResponse(int? id = default(int?), string shortversion = default(string), string version = default(string), string uploadedAt = default(string), int? appsize = default(int?), string notes = default(string), bool? mandatory = default(bool?), bool? external = default(bool?), string deviceFamily = default(string), string minimumOsVersion = default(string), string installUrl = default(string), string bundleIdentifier = default(string))
        {
            this.Id = id;
            this.Shortversion = shortversion;
            this.Version = version;
            this.UploadedAt = uploadedAt;
            this.Appsize = appsize;
            this.Notes = notes;
            this.Mandatory = mandatory;
            this.External = external;
            this.DeviceFamily = deviceFamily;
            this.MinimumOsVersion = minimumOsVersion;
            this.InstallUrl = installUrl;
            this.BundleIdentifier = bundleIdentifier;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Shortversion
        /// </summary>
        [DataMember(Name="shortversion", EmitDefaultValue=false)]
        public string Shortversion { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets UploadedAt
        /// </summary>
        [DataMember(Name="uploaded_at", EmitDefaultValue=false)]
        public string UploadedAt { get; set; }

        /// <summary>
        /// Gets or Sets Appsize
        /// </summary>
        [DataMember(Name="appsize", EmitDefaultValue=false)]
        public int? Appsize { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets Mandatory
        /// </summary>
        [DataMember(Name="mandatory", EmitDefaultValue=false)]
        public bool? Mandatory { get; set; }

        /// <summary>
        /// Gets or Sets External
        /// </summary>
        [DataMember(Name="external", EmitDefaultValue=false)]
        public bool? External { get; set; }

        /// <summary>
        /// Gets or Sets DeviceFamily
        /// </summary>
        [DataMember(Name="device_family", EmitDefaultValue=false)]
        public string DeviceFamily { get; set; }

        /// <summary>
        /// Gets or Sets MinimumOsVersion
        /// </summary>
        [DataMember(Name="minimum_os_version", EmitDefaultValue=false)]
        public string MinimumOsVersion { get; set; }

        /// <summary>
        /// Gets or Sets InstallUrl
        /// </summary>
        [DataMember(Name="install_url", EmitDefaultValue=false)]
        public string InstallUrl { get; set; }

        /// <summary>
        /// Gets or Sets BundleIdentifier
        /// </summary>
        [DataMember(Name="bundle_identifier", EmitDefaultValue=false)]
        public string BundleIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HockeyAppCompatibilityReleaseResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Shortversion: ").Append(Shortversion).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  UploadedAt: ").Append(UploadedAt).Append("\n");
            sb.Append("  Appsize: ").Append(Appsize).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Mandatory: ").Append(Mandatory).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  DeviceFamily: ").Append(DeviceFamily).Append("\n");
            sb.Append("  MinimumOsVersion: ").Append(MinimumOsVersion).Append("\n");
            sb.Append("  InstallUrl: ").Append(InstallUrl).Append("\n");
            sb.Append("  BundleIdentifier: ").Append(BundleIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HockeyAppCompatibilityReleaseResponse);
        }

        /// <summary>
        /// Returns true if HockeyAppCompatibilityReleaseResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of HockeyAppCompatibilityReleaseResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HockeyAppCompatibilityReleaseResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Shortversion == input.Shortversion ||
                    (this.Shortversion != null &&
                    this.Shortversion.Equals(input.Shortversion))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.UploadedAt == input.UploadedAt ||
                    (this.UploadedAt != null &&
                    this.UploadedAt.Equals(input.UploadedAt))
                ) && 
                (
                    this.Appsize == input.Appsize ||
                    (this.Appsize != null &&
                    this.Appsize.Equals(input.Appsize))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Mandatory == input.Mandatory ||
                    (this.Mandatory != null &&
                    this.Mandatory.Equals(input.Mandatory))
                ) && 
                (
                    this.External == input.External ||
                    (this.External != null &&
                    this.External.Equals(input.External))
                ) && 
                (
                    this.DeviceFamily == input.DeviceFamily ||
                    (this.DeviceFamily != null &&
                    this.DeviceFamily.Equals(input.DeviceFamily))
                ) && 
                (
                    this.MinimumOsVersion == input.MinimumOsVersion ||
                    (this.MinimumOsVersion != null &&
                    this.MinimumOsVersion.Equals(input.MinimumOsVersion))
                ) && 
                (
                    this.InstallUrl == input.InstallUrl ||
                    (this.InstallUrl != null &&
                    this.InstallUrl.Equals(input.InstallUrl))
                ) && 
                (
                    this.BundleIdentifier == input.BundleIdentifier ||
                    (this.BundleIdentifier != null &&
                    this.BundleIdentifier.Equals(input.BundleIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Shortversion != null)
                    hashCode = hashCode * 59 + this.Shortversion.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.UploadedAt != null)
                    hashCode = hashCode * 59 + this.UploadedAt.GetHashCode();
                if (this.Appsize != null)
                    hashCode = hashCode * 59 + this.Appsize.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Mandatory != null)
                    hashCode = hashCode * 59 + this.Mandatory.GetHashCode();
                if (this.External != null)
                    hashCode = hashCode * 59 + this.External.GetHashCode();
                if (this.DeviceFamily != null)
                    hashCode = hashCode * 59 + this.DeviceFamily.GetHashCode();
                if (this.MinimumOsVersion != null)
                    hashCode = hashCode * 59 + this.MinimumOsVersion.GetHashCode();
                if (this.InstallUrl != null)
                    hashCode = hashCode * 59 + this.InstallUrl.GetHashCode();
                if (this.BundleIdentifier != null)
                    hashCode = hashCode * 59 + this.BundleIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
