/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Billing Plan
    /// </summary>
    [DataContract]
        public partial class AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan :  IEquatable<AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan>, IValidatableObject
    {
        /// <summary>
        /// Service that receives payments for this billing plan.
        /// </summary>
        /// <value>Service that receives payments for this billing plan.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PaymentSourceEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            /// <summary>
            /// Enum AppCenter for value: AppCenter
            /// </summary>
            [EnumMember(Value = "AppCenter")]
            AppCenter = 2,
            /// <summary>
            /// Enum GitHub for value: GitHub
            /// </summary>
            [EnumMember(Value = "GitHub")]
            GitHub = 3,
            /// <summary>
            /// Enum Xtc for value: Xtc
            /// </summary>
            [EnumMember(Value = "Xtc")]
            Xtc = 4        }
        /// <summary>
        /// Service that receives payments for this billing plan.
        /// </summary>
        /// <value>Service that receives payments for this billing plan.</value>
        [DataMember(Name="paymentSource", EmitDefaultValue=false)]
        public PaymentSourceEnum? PaymentSource { get; set; }
        /// <summary>
        /// Name of the service that the plan applies to.
        /// </summary>
        /// <value>Name of the service that the plan applies to.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ServiceEnum
        {
            /// <summary>
            /// Enum Build for value: Build
            /// </summary>
            [EnumMember(Value = "Build")]
            Build = 1,
            /// <summary>
            /// Enum Test for value: Test
            /// </summary>
            [EnumMember(Value = "Test")]
            Test = 2        }
        /// <summary>
        /// Name of the service that the plan applies to.
        /// </summary>
        /// <value>Name of the service that the plan applies to.</value>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public ServiceEnum? Service { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan" /> class.
        /// </summary>
        /// <param name="id">The Billing Plan ID.</param>
        /// <param name="version">Version of the Billing Plan schema.</param>
        /// <param name="price">Price of the Billing Plan.</param>
        /// <param name="paymentSource">Service that receives payments for this billing plan..</param>
        /// <param name="service">Name of the service that the plan applies to..</param>
        /// <param name="limits">A collection of named numeric values.</param>
        /// <param name="attributes">Collection of attribute values..</param>
        /// <param name="parentId">parentId.</param>
        public AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan(string id = default(string), string version = default(string), decimal? price = default(decimal?), PaymentSourceEnum? paymentSource = default(PaymentSourceEnum?), ServiceEnum? service = default(ServiceEnum?), Dictionary<string, decimal?> limits = default(Dictionary<string, decimal?>), Dictionary<string, Object> attributes = default(Dictionary<string, Object>), string parentId = default(string))
        {
            this.Id = id;
            this.Version = version;
            this.Price = price;
            this.PaymentSource = paymentSource;
            this.Service = service;
            this.Limits = limits;
            this.Attributes = attributes;
            this.ParentId = parentId;
        }
        
        /// <summary>
        /// The Billing Plan ID
        /// </summary>
        /// <value>The Billing Plan ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Version of the Billing Plan schema
        /// </summary>
        /// <value>Version of the Billing Plan schema</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Price of the Billing Plan
        /// </summary>
        /// <value>Price of the Billing Plan</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal? Price { get; set; }



        /// <summary>
        /// A collection of named numeric values
        /// </summary>
        /// <value>A collection of named numeric values</value>
        [DataMember(Name="limits", EmitDefaultValue=false)]
        public Dictionary<string, decimal?> Limits { get; set; }

        /// <summary>
        /// Collection of attribute values.
        /// </summary>
        /// <value>Collection of attribute values.</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PaymentSource: ").Append(PaymentSource).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan);
        }

        /// <summary>
        /// Returns true if AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.PaymentSource == input.PaymentSource ||
                    (this.PaymentSource != null &&
                    this.PaymentSource.Equals(input.PaymentSource))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.Limits == input.Limits ||
                    this.Limits != null &&
                    input.Limits != null &&
                    this.Limits.SequenceEqual(input.Limits)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.PaymentSource != null)
                    hashCode = hashCode * 59 + this.PaymentSource.GetHashCode();
                if (this.Service != null)
                    hashCode = hashCode * 59 + this.Service.GetHashCode();
                if (this.Limits != null)
                    hashCode = hashCode * 59 + this.Limits.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
