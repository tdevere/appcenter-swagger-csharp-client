/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Information about a specific release.
    /// </summary>
    [DataContract]
        public partial class LegacyDeploymentHistoryResponseHistory :  IEquatable<LegacyDeploymentHistoryResponseHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegacyDeploymentHistoryResponseHistory" /> class.
        /// </summary>
        /// <param name="allOf">allOf.</param>
        /// <param name="description">The description of the release..</param>
        /// <param name="originalDeployment">The original deployment of the release, if it&#x27;s ever been promoted..</param>
        /// <param name="originalLabel">The original label of the release, if it&#x27;s ever been updated..</param>
        /// <param name="packageHash">The package&#x27;s hash value (internal use)..</param>
        public LegacyDeploymentHistoryResponseHistory(LegacyDeploymentsResponsePackage allOf = default(LegacyDeploymentsResponsePackage), string description = default(string), string originalDeployment = default(string), string originalLabel = default(string), string packageHash = default(string))
        {
            this.AllOf = allOf;
            this.Description = description;
            this.OriginalDeployment = originalDeployment;
            this.OriginalLabel = originalLabel;
            this.PackageHash = packageHash;
        }
        
        /// <summary>
        /// Gets or Sets AllOf
        /// </summary>
        [DataMember(Name="allOf", EmitDefaultValue=false)]
        public LegacyDeploymentsResponsePackage AllOf { get; set; }

        /// <summary>
        /// The description of the release.
        /// </summary>
        /// <value>The description of the release.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The original deployment of the release, if it&#x27;s ever been promoted.
        /// </summary>
        /// <value>The original deployment of the release, if it&#x27;s ever been promoted.</value>
        [DataMember(Name="originalDeployment", EmitDefaultValue=false)]
        public string OriginalDeployment { get; set; }

        /// <summary>
        /// The original label of the release, if it&#x27;s ever been updated.
        /// </summary>
        /// <value>The original label of the release, if it&#x27;s ever been updated.</value>
        [DataMember(Name="originalLabel", EmitDefaultValue=false)]
        public string OriginalLabel { get; set; }

        /// <summary>
        /// The package&#x27;s hash value (internal use).
        /// </summary>
        /// <value>The package&#x27;s hash value (internal use).</value>
        [DataMember(Name="packageHash", EmitDefaultValue=false)]
        public string PackageHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LegacyDeploymentHistoryResponseHistory {\n");
            sb.Append("  AllOf: ").Append(AllOf).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  OriginalDeployment: ").Append(OriginalDeployment).Append("\n");
            sb.Append("  OriginalLabel: ").Append(OriginalLabel).Append("\n");
            sb.Append("  PackageHash: ").Append(PackageHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LegacyDeploymentHistoryResponseHistory);
        }

        /// <summary>
        /// Returns true if LegacyDeploymentHistoryResponseHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of LegacyDeploymentHistoryResponseHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegacyDeploymentHistoryResponseHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllOf == input.AllOf ||
                    (this.AllOf != null &&
                    this.AllOf.Equals(input.AllOf))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.OriginalDeployment == input.OriginalDeployment ||
                    (this.OriginalDeployment != null &&
                    this.OriginalDeployment.Equals(input.OriginalDeployment))
                ) && 
                (
                    this.OriginalLabel == input.OriginalLabel ||
                    (this.OriginalLabel != null &&
                    this.OriginalLabel.Equals(input.OriginalLabel))
                ) && 
                (
                    this.PackageHash == input.PackageHash ||
                    (this.PackageHash != null &&
                    this.PackageHash.Equals(input.PackageHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllOf != null)
                    hashCode = hashCode * 59 + this.AllOf.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.OriginalDeployment != null)
                    hashCode = hashCode * 59 + this.OriginalDeployment.GetHashCode();
                if (this.OriginalLabel != null)
                    hashCode = hashCode * 59 + this.OriginalLabel.GetHashCode();
                if (this.PackageHash != null)
                    hashCode = hashCode * 59 + this.PackageHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
