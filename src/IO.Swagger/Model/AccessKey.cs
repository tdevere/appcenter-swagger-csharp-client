/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AccessKey
    /// </summary>
    [DataContract]
        public partial class AccessKey :  IEquatable<AccessKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessKey" /> class.
        /// </summary>
        /// <param name="name">Key of access key.</param>
        /// <param name="createdBy">Account name of creator..</param>
        /// <param name="description">Description of access key.</param>
        /// <param name="friendlyName">Friendly name of access key.</param>
        /// <param name="createdTime">Created time of access key.</param>
        /// <param name="expires">Time of expiry of access key.</param>
        /// <param name="id">Id of accessKey.</param>
        /// <param name="isSession">Legacy property which indicate if accessKey was created from session.</param>
        public AccessKey(string name = default(string), string createdBy = default(string), string description = default(string), string friendlyName = default(string), decimal? createdTime = default(decimal?), decimal? expires = default(decimal?), string id = default(string), bool? isSession = default(bool?))
        {
            this.Name = name;
            this.CreatedBy = createdBy;
            this.Description = description;
            this.FriendlyName = friendlyName;
            this.CreatedTime = createdTime;
            this.Expires = expires;
            this.Id = id;
            this.IsSession = isSession;
        }
        
        /// <summary>
        /// Key of access key
        /// </summary>
        /// <value>Key of access key</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Account name of creator.
        /// </summary>
        /// <value>Account name of creator.</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Description of access key
        /// </summary>
        /// <value>Description of access key</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Friendly name of access key
        /// </summary>
        /// <value>Friendly name of access key</value>
        [DataMember(Name="friendlyName", EmitDefaultValue=false)]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Created time of access key
        /// </summary>
        /// <value>Created time of access key</value>
        [DataMember(Name="createdTime", EmitDefaultValue=false)]
        public decimal? CreatedTime { get; set; }

        /// <summary>
        /// Time of expiry of access key
        /// </summary>
        /// <value>Time of expiry of access key</value>
        [DataMember(Name="expires", EmitDefaultValue=false)]
        public decimal? Expires { get; set; }

        /// <summary>
        /// Id of accessKey
        /// </summary>
        /// <value>Id of accessKey</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Legacy property which indicate if accessKey was created from session
        /// </summary>
        /// <value>Legacy property which indicate if accessKey was created from session</value>
        [DataMember(Name="isSession", EmitDefaultValue=false)]
        public bool? IsSession { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessKey {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FriendlyName: ").Append(FriendlyName).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsSession: ").Append(IsSession).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccessKey);
        }

        /// <summary>
        /// Returns true if AccessKey instances are equal
        /// </summary>
        /// <param name="input">Instance of AccessKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessKey input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FriendlyName == input.FriendlyName ||
                    (this.FriendlyName != null &&
                    this.FriendlyName.Equals(input.FriendlyName))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsSession == input.IsSession ||
                    (this.IsSession != null &&
                    this.IsSession.Equals(input.IsSession))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FriendlyName != null)
                    hashCode = hashCode * 59 + this.FriendlyName.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.Expires != null)
                    hashCode = hashCode * 59 + this.Expires.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsSession != null)
                    hashCode = hashCode * 59 + this.IsSession.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
