/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ServiceBusStatusResponseSubscriptions
    /// </summary>
    [DataContract]
        public partial class ServiceBusStatusResponseSubscriptions :  IEquatable<ServiceBusStatusResponseSubscriptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceBusStatusResponseSubscriptions" /> class.
        /// </summary>
        /// <param name="name">The name of the subsciption (prefixed with the topic name) (required).</param>
        /// <param name="messageCount">The number of messages in the subscription (required).</param>
        public ServiceBusStatusResponseSubscriptions(string name = default(string), decimal? messageCount = default(decimal?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ServiceBusStatusResponseSubscriptions and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "messageCount" is required (not null)
            if (messageCount == null)
            {
                throw new InvalidDataException("messageCount is a required property for ServiceBusStatusResponseSubscriptions and cannot be null");
            }
            else
            {
                this.MessageCount = messageCount;
            }
        }
        
        /// <summary>
        /// The name of the subsciption (prefixed with the topic name)
        /// </summary>
        /// <value>The name of the subsciption (prefixed with the topic name)</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The number of messages in the subscription
        /// </summary>
        /// <value>The number of messages in the subscription</value>
        [DataMember(Name="message_count", EmitDefaultValue=false)]
        public decimal? MessageCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceBusStatusResponseSubscriptions {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MessageCount: ").Append(MessageCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceBusStatusResponseSubscriptions);
        }

        /// <summary>
        /// Returns true if ServiceBusStatusResponseSubscriptions instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceBusStatusResponseSubscriptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceBusStatusResponseSubscriptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MessageCount == input.MessageCount ||
                    (this.MessageCount != null &&
                    this.MessageCount.Equals(input.MessageCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MessageCount != null)
                    hashCode = hashCode * 59 + this.MessageCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
