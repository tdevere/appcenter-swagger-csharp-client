/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Selection of a billing plan
    /// </summary>
    [DataContract]
        public partial class BillingPlanSelection :  IEquatable<BillingPlanSelection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingPlanSelection" /> class.
        /// </summary>
        /// <param name="count">Number of instances of the billing plan..</param>
        /// <param name="plan">plan.</param>
        public BillingPlanSelection(int? count = default(int?), AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan plan = default(AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan))
        {
            this.Count = count;
            this.Plan = plan;
        }
        
        /// <summary>
        /// Number of instances of the billing plan.
        /// </summary>
        /// <value>Number of instances of the billing plan.</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or Sets Plan
        /// </summary>
        [DataMember(Name="plan", EmitDefaultValue=false)]
        public AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan Plan { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingPlanSelection {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillingPlanSelection);
        }

        /// <summary>
        /// Returns true if BillingPlanSelection instances are equal
        /// </summary>
        /// <param name="input">Instance of BillingPlanSelection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingPlanSelection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.Plan == input.Plan ||
                    (this.Plan != null &&
                    this.Plan.Equals(input.Plan))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Plan != null)
                    hashCode = hashCode * 59 + this.Plan.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
