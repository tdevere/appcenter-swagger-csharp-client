/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A request containing information for creating an externally hosted release.
    /// </summary>
    [DataContract]
        public partial class ExternallyHostedReleaseCreateRequest :  IEquatable<ExternallyHostedReleaseCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternallyHostedReleaseCreateRequest" /> class.
        /// </summary>
        /// <param name="buildVersion">The build version of the uploaded binary (required).</param>
        /// <param name="buildNumber">The build number of the uploaded binary.</param>
        /// <param name="externalDownloadUrl">The external URL to the release&#x27;s binary. (required).</param>
        public ExternallyHostedReleaseCreateRequest(string buildVersion = default(string), string buildNumber = default(string), string externalDownloadUrl = default(string))
        {
            // to ensure "buildVersion" is required (not null)
            if (buildVersion == null)
            {
                throw new InvalidDataException("buildVersion is a required property for ExternallyHostedReleaseCreateRequest and cannot be null");
            }
            else
            {
                this.BuildVersion = buildVersion;
            }
            // to ensure "externalDownloadUrl" is required (not null)
            if (externalDownloadUrl == null)
            {
                throw new InvalidDataException("externalDownloadUrl is a required property for ExternallyHostedReleaseCreateRequest and cannot be null");
            }
            else
            {
                this.ExternalDownloadUrl = externalDownloadUrl;
            }
            this.BuildNumber = buildNumber;
        }
        
        /// <summary>
        /// The build version of the uploaded binary
        /// </summary>
        /// <value>The build version of the uploaded binary</value>
        [DataMember(Name="build_version", EmitDefaultValue=false)]
        public string BuildVersion { get; set; }

        /// <summary>
        /// The build number of the uploaded binary
        /// </summary>
        /// <value>The build number of the uploaded binary</value>
        [DataMember(Name="build_number", EmitDefaultValue=false)]
        public string BuildNumber { get; set; }

        /// <summary>
        /// The external URL to the release&#x27;s binary.
        /// </summary>
        /// <value>The external URL to the release&#x27;s binary.</value>
        [DataMember(Name="external_download_url", EmitDefaultValue=false)]
        public string ExternalDownloadUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternallyHostedReleaseCreateRequest {\n");
            sb.Append("  BuildVersion: ").Append(BuildVersion).Append("\n");
            sb.Append("  BuildNumber: ").Append(BuildNumber).Append("\n");
            sb.Append("  ExternalDownloadUrl: ").Append(ExternalDownloadUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternallyHostedReleaseCreateRequest);
        }

        /// <summary>
        /// Returns true if ExternallyHostedReleaseCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternallyHostedReleaseCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternallyHostedReleaseCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BuildVersion == input.BuildVersion ||
                    (this.BuildVersion != null &&
                    this.BuildVersion.Equals(input.BuildVersion))
                ) && 
                (
                    this.BuildNumber == input.BuildNumber ||
                    (this.BuildNumber != null &&
                    this.BuildNumber.Equals(input.BuildNumber))
                ) && 
                (
                    this.ExternalDownloadUrl == input.ExternalDownloadUrl ||
                    (this.ExternalDownloadUrl != null &&
                    this.ExternalDownloadUrl.Equals(input.ExternalDownloadUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuildVersion != null)
                    hashCode = hashCode * 59 + this.BuildVersion.GetHashCode();
                if (this.BuildNumber != null)
                    hashCode = hashCode * 59 + this.BuildNumber.GetHashCode();
                if (this.ExternalDownloadUrl != null)
                    hashCode = hashCode * 59 + this.ExternalDownloadUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
