/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// test flight group details for the app.
    /// </summary>
    [DataContract]
        public partial class AppleTestFlightGroupResponse :  IEquatable<AppleTestFlightGroupResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppleTestFlightGroupResponse" /> class.
        /// </summary>
        /// <param name="id">id of the group..</param>
        /// <param name="providerId">provider id of the group..</param>
        /// <param name="appAdamId">apple id of the group..</param>
        /// <param name="name">name of the group..</param>
        /// <param name="active">true if group is in active state..</param>
        /// <param name="isInternalGroup">true if the group is an internal group..</param>
        public AppleTestFlightGroupResponse(string id = default(string), decimal? providerId = default(decimal?), decimal? appAdamId = default(decimal?), string name = default(string), bool? active = default(bool?), bool? isInternalGroup = default(bool?))
        {
            this.Id = id;
            this.ProviderId = providerId;
            this.AppAdamId = appAdamId;
            this.Name = name;
            this.Active = active;
            this.IsInternalGroup = isInternalGroup;
        }
        
        /// <summary>
        /// id of the group.
        /// </summary>
        /// <value>id of the group.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// provider id of the group.
        /// </summary>
        /// <value>provider id of the group.</value>
        [DataMember(Name="providerId", EmitDefaultValue=false)]
        public decimal? ProviderId { get; set; }

        /// <summary>
        /// apple id of the group.
        /// </summary>
        /// <value>apple id of the group.</value>
        [DataMember(Name="appAdamId", EmitDefaultValue=false)]
        public decimal? AppAdamId { get; set; }

        /// <summary>
        /// name of the group.
        /// </summary>
        /// <value>name of the group.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// true if group is in active state.
        /// </summary>
        /// <value>true if group is in active state.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// true if the group is an internal group.
        /// </summary>
        /// <value>true if the group is an internal group.</value>
        [DataMember(Name="isInternalGroup", EmitDefaultValue=false)]
        public bool? IsInternalGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppleTestFlightGroupResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  AppAdamId: ").Append(AppAdamId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  IsInternalGroup: ").Append(IsInternalGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppleTestFlightGroupResponse);
        }

        /// <summary>
        /// Returns true if AppleTestFlightGroupResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AppleTestFlightGroupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppleTestFlightGroupResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    (this.ProviderId != null &&
                    this.ProviderId.Equals(input.ProviderId))
                ) && 
                (
                    this.AppAdamId == input.AppAdamId ||
                    (this.AppAdamId != null &&
                    this.AppAdamId.Equals(input.AppAdamId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.IsInternalGroup == input.IsInternalGroup ||
                    (this.IsInternalGroup != null &&
                    this.IsInternalGroup.Equals(input.IsInternalGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProviderId != null)
                    hashCode = hashCode * 59 + this.ProviderId.GetHashCode();
                if (this.AppAdamId != null)
                    hashCode = hashCode * 59 + this.AppAdamId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.IsInternalGroup != null)
                    hashCode = hashCode * 59 + this.IsInternalGroup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
