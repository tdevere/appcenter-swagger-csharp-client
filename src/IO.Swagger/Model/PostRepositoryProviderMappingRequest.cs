/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PostRepositoryProviderMappingRequest
    /// </summary>
    [DataContract]
        public partial class PostRepositoryProviderMappingRequest :  IEquatable<PostRepositoryProviderMappingRequest>, IValidatableObject
    {
        /// <summary>
        /// Supported external providers of source control repositories
        /// </summary>
        /// <value>Supported external providers of source control repositories</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ProviderEnum
        {
            /// <summary>
            /// Enum Github for value: github
            /// </summary>
            [EnumMember(Value = "github")]
            Github = 1        }
        /// <summary>
        /// Supported external providers of source control repositories
        /// </summary>
        /// <value>Supported external providers of source control repositories</value>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public ProviderEnum Provider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostRepositoryProviderMappingRequest" /> class.
        /// </summary>
        /// <param name="externalAccountId">Id of user in the external provider service (required).</param>
        /// <param name="provider">Supported external providers of source control repositories (required).</param>
        /// <param name="accountId">App Center account id to link to this provider and external id (required).</param>
        public PostRepositoryProviderMappingRequest(string externalAccountId = default(string), ProviderEnum provider = default(ProviderEnum), Guid? accountId = default(Guid?))
        {
            // to ensure "externalAccountId" is required (not null)
            if (externalAccountId == null)
            {
                throw new InvalidDataException("externalAccountId is a required property for PostRepositoryProviderMappingRequest and cannot be null");
            }
            else
            {
                this.ExternalAccountId = externalAccountId;
            }
            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new InvalidDataException("provider is a required property for PostRepositoryProviderMappingRequest and cannot be null");
            }
            else
            {
                this.Provider = provider;
            }
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for PostRepositoryProviderMappingRequest and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
        }
        
        /// <summary>
        /// Id of user in the external provider service
        /// </summary>
        /// <value>Id of user in the external provider service</value>
        [DataMember(Name="external_account_id", EmitDefaultValue=false)]
        public string ExternalAccountId { get; set; }


        /// <summary>
        /// App Center account id to link to this provider and external id
        /// </summary>
        /// <value>App Center account id to link to this provider and external id</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostRepositoryProviderMappingRequest {\n");
            sb.Append("  ExternalAccountId: ").Append(ExternalAccountId).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostRepositoryProviderMappingRequest);
        }

        /// <summary>
        /// Returns true if PostRepositoryProviderMappingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostRepositoryProviderMappingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostRepositoryProviderMappingRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExternalAccountId == input.ExternalAccountId ||
                    (this.ExternalAccountId != null &&
                    this.ExternalAccountId.Equals(input.ExternalAccountId))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalAccountId != null)
                    hashCode = hashCode * 59 + this.ExternalAccountId.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
