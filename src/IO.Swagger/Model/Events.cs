/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Events
    /// </summary>
    [DataContract]
        public partial class Events :  IEquatable<Events>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Events" /> class.
        /// </summary>
        /// <param name="events">events.</param>
        /// <param name="total">The total count of events..</param>
        /// <param name="totalDevices">The active device over this period..</param>
        public Events(List<EventsEvents> events = default(List<EventsEvents>), long? total = default(long?), long? totalDevices = default(long?))
        {
            this._Events = events;
            this.Total = total;
            this.TotalDevices = totalDevices;
        }
        
        /// <summary>
        /// Gets or Sets _Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<EventsEvents> _Events { get; set; }

        /// <summary>
        /// The total count of events.
        /// </summary>
        /// <value>The total count of events.</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public long? Total { get; set; }

        /// <summary>
        /// The active device over this period.
        /// </summary>
        /// <value>The active device over this period.</value>
        [DataMember(Name="total_devices", EmitDefaultValue=false)]
        public long? TotalDevices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Events {\n");
            sb.Append("  _Events: ").Append(_Events).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TotalDevices: ").Append(TotalDevices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Events);
        }

        /// <summary>
        /// Returns true if Events instances are equal
        /// </summary>
        /// <param name="input">Instance of Events to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Events input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Events == input._Events ||
                    this._Events != null &&
                    input._Events != null &&
                    this._Events.SequenceEqual(input._Events)
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.TotalDevices == input.TotalDevices ||
                    (this.TotalDevices != null &&
                    this.TotalDevices.Equals(input.TotalDevices))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Events != null)
                    hashCode = hashCode * 59 + this._Events.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.TotalDevices != null)
                    hashCode = hashCode * 59 + this.TotalDevices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
