/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// V01appsownerNameappNamedeviceConfigurationsModelDeviceFrameGrid
    /// </summary>
    [DataContract]
        public partial class V01appsownerNameappNamedeviceConfigurationsModelDeviceFrameGrid :  IEquatable<V01appsownerNameappNamedeviceConfigurationsModelDeviceFrameGrid>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V01appsownerNameappNamedeviceConfigurationsModelDeviceFrameGrid" /> class.
        /// </summary>
        /// <param name="width">width.</param>
        /// <param name="height">height.</param>
        /// <param name="frameUrl">frameUrl.</param>
        /// <param name="screen">screen.</param>
        public V01appsownerNameappNamedeviceConfigurationsModelDeviceFrameGrid(decimal? width = default(decimal?), decimal? height = default(decimal?), string frameUrl = default(string), List<decimal?> screen = default(List<decimal?>))
        {
            this.Width = width;
            this.Height = height;
            this.FrameUrl = frameUrl;
            this.Screen = screen;
        }
        
        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public decimal? Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public decimal? Height { get; set; }

        /// <summary>
        /// Gets or Sets FrameUrl
        /// </summary>
        [DataMember(Name="frameUrl", EmitDefaultValue=false)]
        public string FrameUrl { get; set; }

        /// <summary>
        /// Gets or Sets Screen
        /// </summary>
        [DataMember(Name="screen", EmitDefaultValue=false)]
        public List<decimal?> Screen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V01appsownerNameappNamedeviceConfigurationsModelDeviceFrameGrid {\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  FrameUrl: ").Append(FrameUrl).Append("\n");
            sb.Append("  Screen: ").Append(Screen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V01appsownerNameappNamedeviceConfigurationsModelDeviceFrameGrid);
        }

        /// <summary>
        /// Returns true if V01appsownerNameappNamedeviceConfigurationsModelDeviceFrameGrid instances are equal
        /// </summary>
        /// <param name="input">Instance of V01appsownerNameappNamedeviceConfigurationsModelDeviceFrameGrid to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V01appsownerNameappNamedeviceConfigurationsModelDeviceFrameGrid input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.FrameUrl == input.FrameUrl ||
                    (this.FrameUrl != null &&
                    this.FrameUrl.Equals(input.FrameUrl))
                ) && 
                (
                    this.Screen == input.Screen ||
                    this.Screen != null &&
                    input.Screen != null &&
                    this.Screen.SequenceEqual(input.Screen)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.FrameUrl != null)
                    hashCode = hashCode * 59 + this.FrameUrl.GetHashCode();
                if (this.Screen != null)
                    hashCode = hashCode * 59 + this.Screen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
