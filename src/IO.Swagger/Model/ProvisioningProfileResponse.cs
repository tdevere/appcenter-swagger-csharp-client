/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A response containing information about an iOS provisioning profile.
    /// </summary>
    [DataContract]
        public partial class ProvisioningProfileResponse :  IEquatable<ProvisioningProfileResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines ProvisioningProfileType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ProvisioningProfileTypeEnum
        {
            /// <summary>
            /// Enum Adhoc for value: adhoc
            /// </summary>
            [EnumMember(Value = "adhoc")]
            Adhoc = 1,
            /// <summary>
            /// Enum Enterprise for value: enterprise
            /// </summary>
            [EnumMember(Value = "enterprise")]
            Enterprise = 2,
            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 3        }
        /// <summary>
        /// Gets or Sets ProvisioningProfileType
        /// </summary>
        [DataMember(Name="provisioning_profile_type", EmitDefaultValue=false)]
        public ProvisioningProfileTypeEnum ProvisioningProfileType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisioningProfileResponse" /> class.
        /// </summary>
        /// <param name="provisioningProfileType">provisioningProfileType (required).</param>
        /// <param name="udids">udids.</param>
        /// <param name="provisioningProfileName">The name of the provisioning profile..</param>
        /// <param name="teamIdentifier">The team identifier..</param>
        /// <param name="provisioningBundleId">The bundle identifier associated with the profile..</param>
        /// <param name="appexProfiles">Array of provisioning profiles for any app extensions.</param>
        public ProvisioningProfileResponse(ProvisioningProfileTypeEnum provisioningProfileType = default(ProvisioningProfileTypeEnum), List<string> udids = default(List<string>), string provisioningProfileName = default(string), string teamIdentifier = default(string), string provisioningBundleId = default(string), List<ProvisioningProfileResponse> appexProfiles = default(List<ProvisioningProfileResponse>))
        {
            // to ensure "provisioningProfileType" is required (not null)
            if (provisioningProfileType == null)
            {
                throw new InvalidDataException("provisioningProfileType is a required property for ProvisioningProfileResponse and cannot be null");
            }
            else
            {
                this.ProvisioningProfileType = provisioningProfileType;
            }
            this.Udids = udids;
            this.ProvisioningProfileName = provisioningProfileName;
            this.TeamIdentifier = teamIdentifier;
            this.ProvisioningBundleId = provisioningBundleId;
            this.AppexProfiles = appexProfiles;
        }
        

        /// <summary>
        /// Gets or Sets Udids
        /// </summary>
        [DataMember(Name="udids", EmitDefaultValue=false)]
        public List<string> Udids { get; set; }

        /// <summary>
        /// The name of the provisioning profile.
        /// </summary>
        /// <value>The name of the provisioning profile.</value>
        [DataMember(Name="provisioning_profile_name", EmitDefaultValue=false)]
        public string ProvisioningProfileName { get; set; }

        /// <summary>
        /// The team identifier.
        /// </summary>
        /// <value>The team identifier.</value>
        [DataMember(Name="team_identifier", EmitDefaultValue=false)]
        public string TeamIdentifier { get; set; }

        /// <summary>
        /// The bundle identifier associated with the profile.
        /// </summary>
        /// <value>The bundle identifier associated with the profile.</value>
        [DataMember(Name="provisioning_bundle_id", EmitDefaultValue=false)]
        public string ProvisioningBundleId { get; set; }

        /// <summary>
        /// Array of provisioning profiles for any app extensions
        /// </summary>
        /// <value>Array of provisioning profiles for any app extensions</value>
        [DataMember(Name="appex_profiles", EmitDefaultValue=false)]
        public List<ProvisioningProfileResponse> AppexProfiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvisioningProfileResponse {\n");
            sb.Append("  ProvisioningProfileType: ").Append(ProvisioningProfileType).Append("\n");
            sb.Append("  Udids: ").Append(Udids).Append("\n");
            sb.Append("  ProvisioningProfileName: ").Append(ProvisioningProfileName).Append("\n");
            sb.Append("  TeamIdentifier: ").Append(TeamIdentifier).Append("\n");
            sb.Append("  ProvisioningBundleId: ").Append(ProvisioningBundleId).Append("\n");
            sb.Append("  AppexProfiles: ").Append(AppexProfiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvisioningProfileResponse);
        }

        /// <summary>
        /// Returns true if ProvisioningProfileResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvisioningProfileResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvisioningProfileResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProvisioningProfileType == input.ProvisioningProfileType ||
                    (this.ProvisioningProfileType != null &&
                    this.ProvisioningProfileType.Equals(input.ProvisioningProfileType))
                ) && 
                (
                    this.Udids == input.Udids ||
                    this.Udids != null &&
                    input.Udids != null &&
                    this.Udids.SequenceEqual(input.Udids)
                ) && 
                (
                    this.ProvisioningProfileName == input.ProvisioningProfileName ||
                    (this.ProvisioningProfileName != null &&
                    this.ProvisioningProfileName.Equals(input.ProvisioningProfileName))
                ) && 
                (
                    this.TeamIdentifier == input.TeamIdentifier ||
                    (this.TeamIdentifier != null &&
                    this.TeamIdentifier.Equals(input.TeamIdentifier))
                ) && 
                (
                    this.ProvisioningBundleId == input.ProvisioningBundleId ||
                    (this.ProvisioningBundleId != null &&
                    this.ProvisioningBundleId.Equals(input.ProvisioningBundleId))
                ) && 
                (
                    this.AppexProfiles == input.AppexProfiles ||
                    this.AppexProfiles != null &&
                    input.AppexProfiles != null &&
                    this.AppexProfiles.SequenceEqual(input.AppexProfiles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProvisioningProfileType != null)
                    hashCode = hashCode * 59 + this.ProvisioningProfileType.GetHashCode();
                if (this.Udids != null)
                    hashCode = hashCode * 59 + this.Udids.GetHashCode();
                if (this.ProvisioningProfileName != null)
                    hashCode = hashCode * 59 + this.ProvisioningProfileName.GetHashCode();
                if (this.TeamIdentifier != null)
                    hashCode = hashCode * 59 + this.TeamIdentifier.GetHashCode();
                if (this.ProvisioningBundleId != null)
                    hashCode = hashCode * 59 + this.ProvisioningBundleId.GetHashCode();
                if (this.AppexProfiles != null)
                    hashCode = hashCode * 59 + this.AppexProfiles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
