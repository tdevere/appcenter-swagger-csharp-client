/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AllOfinlineResponse20063LatestRelease
    /// </summary>
    [DataContract]
        public partial class AllOfinlineResponse20063LatestRelease :  IEquatable<AllOfinlineResponse20063LatestRelease>, IValidatableObject
    {
        /// <summary>
        /// The release method is unknown if unspecified
        /// </summary>
        /// <value>The release method is unknown if unspecified</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ReleaseMethodEnum
        {
            /// <summary>
            /// Enum Upload for value: Upload
            /// </summary>
            [EnumMember(Value = "Upload")]
            Upload = 1,
            /// <summary>
            /// Enum Promote for value: Promote
            /// </summary>
            [EnumMember(Value = "Promote")]
            Promote = 2,
            /// <summary>
            /// Enum Rollback for value: Rollback
            /// </summary>
            [EnumMember(Value = "Rollback")]
            Rollback = 3        }
        /// <summary>
        /// The release method is unknown if unspecified
        /// </summary>
        /// <value>The release method is unknown if unspecified</value>
        [DataMember(Name="release_method", EmitDefaultValue=false)]
        public ReleaseMethodEnum? ReleaseMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AllOfinlineResponse20063LatestRelease" /> class.
        /// </summary>
        /// <param name="label">label.</param>
        /// <param name="packageHash">packageHash.</param>
        /// <param name="blobUrl">blobUrl.</param>
        /// <param name="diffPackageMap">diffPackageMap.</param>
        /// <param name="originalDeployment">Set on &#x27;Promote&#x27;.</param>
        /// <param name="originalLabel">Set on &#x27;Promote&#x27; and &#x27;Rollback&#x27;.</param>
        /// <param name="releasedBy">releasedBy.</param>
        /// <param name="releaseMethod">The release method is unknown if unspecified.</param>
        /// <param name="size">size.</param>
        /// <param name="uploadTime">uploadTime.</param>
        public AllOfinlineResponse20063LatestRelease(string label = default(string), string packageHash = default(string), string blobUrl = default(string), Dictionary<string, Object> diffPackageMap = default(Dictionary<string, Object>), string originalDeployment = default(string), string originalLabel = default(string), string releasedBy = default(string), ReleaseMethodEnum? releaseMethod = default(ReleaseMethodEnum?), decimal? size = default(decimal?), int? uploadTime = default(int?))
        {
            this.Label = label;
            this.PackageHash = packageHash;
            this.BlobUrl = blobUrl;
            this.DiffPackageMap = diffPackageMap;
            this.OriginalDeployment = originalDeployment;
            this.OriginalLabel = originalLabel;
            this.ReleasedBy = releasedBy;
            this.ReleaseMethod = releaseMethod;
            this.Size = size;
            this.UploadTime = uploadTime;
        }
        
        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets PackageHash
        /// </summary>
        [DataMember(Name="package_hash", EmitDefaultValue=false)]
        public string PackageHash { get; set; }

        /// <summary>
        /// Gets or Sets BlobUrl
        /// </summary>
        [DataMember(Name="blob_url", EmitDefaultValue=false)]
        public string BlobUrl { get; set; }

        /// <summary>
        /// Gets or Sets DiffPackageMap
        /// </summary>
        [DataMember(Name="diff_package_map", EmitDefaultValue=false)]
        public Dictionary<string, Object> DiffPackageMap { get; set; }

        /// <summary>
        /// Set on &#x27;Promote&#x27;
        /// </summary>
        /// <value>Set on &#x27;Promote&#x27;</value>
        [DataMember(Name="original_deployment", EmitDefaultValue=false)]
        public string OriginalDeployment { get; set; }

        /// <summary>
        /// Set on &#x27;Promote&#x27; and &#x27;Rollback&#x27;
        /// </summary>
        /// <value>Set on &#x27;Promote&#x27; and &#x27;Rollback&#x27;</value>
        [DataMember(Name="original_label", EmitDefaultValue=false)]
        public string OriginalLabel { get; set; }

        /// <summary>
        /// Gets or Sets ReleasedBy
        /// </summary>
        [DataMember(Name="released_by", EmitDefaultValue=false)]
        public string ReleasedBy { get; set; }


        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public decimal? Size { get; set; }

        /// <summary>
        /// Gets or Sets UploadTime
        /// </summary>
        [DataMember(Name="upload_time", EmitDefaultValue=false)]
        public int? UploadTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AllOfinlineResponse20063LatestRelease {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  PackageHash: ").Append(PackageHash).Append("\n");
            sb.Append("  BlobUrl: ").Append(BlobUrl).Append("\n");
            sb.Append("  DiffPackageMap: ").Append(DiffPackageMap).Append("\n");
            sb.Append("  OriginalDeployment: ").Append(OriginalDeployment).Append("\n");
            sb.Append("  OriginalLabel: ").Append(OriginalLabel).Append("\n");
            sb.Append("  ReleasedBy: ").Append(ReleasedBy).Append("\n");
            sb.Append("  ReleaseMethod: ").Append(ReleaseMethod).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  UploadTime: ").Append(UploadTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllOfinlineResponse20063LatestRelease);
        }

        /// <summary>
        /// Returns true if AllOfinlineResponse20063LatestRelease instances are equal
        /// </summary>
        /// <param name="input">Instance of AllOfinlineResponse20063LatestRelease to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllOfinlineResponse20063LatestRelease input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.PackageHash == input.PackageHash ||
                    (this.PackageHash != null &&
                    this.PackageHash.Equals(input.PackageHash))
                ) && 
                (
                    this.BlobUrl == input.BlobUrl ||
                    (this.BlobUrl != null &&
                    this.BlobUrl.Equals(input.BlobUrl))
                ) && 
                (
                    this.DiffPackageMap == input.DiffPackageMap ||
                    this.DiffPackageMap != null &&
                    input.DiffPackageMap != null &&
                    this.DiffPackageMap.SequenceEqual(input.DiffPackageMap)
                ) && 
                (
                    this.OriginalDeployment == input.OriginalDeployment ||
                    (this.OriginalDeployment != null &&
                    this.OriginalDeployment.Equals(input.OriginalDeployment))
                ) && 
                (
                    this.OriginalLabel == input.OriginalLabel ||
                    (this.OriginalLabel != null &&
                    this.OriginalLabel.Equals(input.OriginalLabel))
                ) && 
                (
                    this.ReleasedBy == input.ReleasedBy ||
                    (this.ReleasedBy != null &&
                    this.ReleasedBy.Equals(input.ReleasedBy))
                ) && 
                (
                    this.ReleaseMethod == input.ReleaseMethod ||
                    (this.ReleaseMethod != null &&
                    this.ReleaseMethod.Equals(input.ReleaseMethod))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.UploadTime == input.UploadTime ||
                    (this.UploadTime != null &&
                    this.UploadTime.Equals(input.UploadTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.PackageHash != null)
                    hashCode = hashCode * 59 + this.PackageHash.GetHashCode();
                if (this.BlobUrl != null)
                    hashCode = hashCode * 59 + this.BlobUrl.GetHashCode();
                if (this.DiffPackageMap != null)
                    hashCode = hashCode * 59 + this.DiffPackageMap.GetHashCode();
                if (this.OriginalDeployment != null)
                    hashCode = hashCode * 59 + this.OriginalDeployment.GetHashCode();
                if (this.OriginalLabel != null)
                    hashCode = hashCode * 59 + this.OriginalLabel.GetHashCode();
                if (this.ReleasedBy != null)
                    hashCode = hashCode * 59 + this.ReleasedBy.GetHashCode();
                if (this.ReleaseMethod != null)
                    hashCode = hashCode * 59 + this.ReleaseMethod.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.UploadTime != null)
                    hashCode = hashCode * 59 + this.UploadTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
