/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// org settings response
    /// </summary>
    [DataContract]
        public partial class OrgComplianceSettingsResponse :  IEquatable<OrgComplianceSettingsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgComplianceSettingsResponse" /> class.
        /// </summary>
        /// <param name="id">The internal unique id (UUID) of the organization compliance setting (required).</param>
        /// <param name="orgId">The internal unique id (UUID) of the organization. (required).</param>
        /// <param name="certificateConnectionId">certificate connection id to wrap and resign the app after wrapping (required).</param>
        /// <param name="isMamEnabled">flag to tell if mam warpping is enabled on the Org.</param>
        public OrgComplianceSettingsResponse(string id = default(string), string orgId = default(string), string certificateConnectionId = default(string), bool? isMamEnabled = default(bool?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for OrgComplianceSettingsResponse and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "orgId" is required (not null)
            if (orgId == null)
            {
                throw new InvalidDataException("orgId is a required property for OrgComplianceSettingsResponse and cannot be null");
            }
            else
            {
                this.OrgId = orgId;
            }
            // to ensure "certificateConnectionId" is required (not null)
            if (certificateConnectionId == null)
            {
                throw new InvalidDataException("certificateConnectionId is a required property for OrgComplianceSettingsResponse and cannot be null");
            }
            else
            {
                this.CertificateConnectionId = certificateConnectionId;
            }
            this.IsMamEnabled = isMamEnabled;
        }
        
        /// <summary>
        /// The internal unique id (UUID) of the organization compliance setting
        /// </summary>
        /// <value>The internal unique id (UUID) of the organization compliance setting</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The internal unique id (UUID) of the organization.
        /// </summary>
        /// <value>The internal unique id (UUID) of the organization.</value>
        [DataMember(Name="org_id", EmitDefaultValue=false)]
        public string OrgId { get; set; }

        /// <summary>
        /// certificate connection id to wrap and resign the app after wrapping
        /// </summary>
        /// <value>certificate connection id to wrap and resign the app after wrapping</value>
        [DataMember(Name="certificate_connection_id", EmitDefaultValue=false)]
        public string CertificateConnectionId { get; set; }

        /// <summary>
        /// flag to tell if mam warpping is enabled on the Org
        /// </summary>
        /// <value>flag to tell if mam warpping is enabled on the Org</value>
        [DataMember(Name="is_mam_enabled", EmitDefaultValue=false)]
        public bool? IsMamEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgComplianceSettingsResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  CertificateConnectionId: ").Append(CertificateConnectionId).Append("\n");
            sb.Append("  IsMamEnabled: ").Append(IsMamEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgComplianceSettingsResponse);
        }

        /// <summary>
        /// Returns true if OrgComplianceSettingsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgComplianceSettingsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgComplianceSettingsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrgId == input.OrgId ||
                    (this.OrgId != null &&
                    this.OrgId.Equals(input.OrgId))
                ) && 
                (
                    this.CertificateConnectionId == input.CertificateConnectionId ||
                    (this.CertificateConnectionId != null &&
                    this.CertificateConnectionId.Equals(input.CertificateConnectionId))
                ) && 
                (
                    this.IsMamEnabled == input.IsMamEnabled ||
                    (this.IsMamEnabled != null &&
                    this.IsMamEnabled.Equals(input.IsMamEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrgId != null)
                    hashCode = hashCode * 59 + this.OrgId.GetHashCode();
                if (this.CertificateConnectionId != null)
                    hashCode = hashCode * 59 + this.CertificateConnectionId.GetHashCode();
                if (this.IsMamEnabled != null)
                    hashCode = hashCode * 59 + this.IsMamEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
