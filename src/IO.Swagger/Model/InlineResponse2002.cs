/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2002
    /// </summary>
    [DataContract]
        public partial class InlineResponse2002 :  IEquatable<InlineResponse2002>, IValidatableObject
    {
        /// <summary>
        /// Status of data subject right request
        /// </summary>
        /// <value>Status of data subject right request</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            /// <summary>
            /// Enum Created for value: Created
            /// </summary>
            [EnumMember(Value = "Created")]
            Created = 2,
            /// <summary>
            /// Enum Queued for value: Queued
            /// </summary>
            [EnumMember(Value = "Queued")]
            Queued = 3,
            /// <summary>
            /// Enum InProgress for value: InProgress
            /// </summary>
            [EnumMember(Value = "InProgress")]
            InProgress = 4,
            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 5,
            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed = 6        }
        /// <summary>
        /// Status of data subject right request
        /// </summary>
        /// <value>Status of data subject right request</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2002" /> class.
        /// </summary>
        /// <param name="sasUrl">Azure Storage shared access signature (SAS) URL for exported user data..</param>
        /// <param name="sasUrlExpired">Whether Azure Storage shared access signature (SAS) URL has expired or not..</param>
        /// <param name="status">Status of data subject right request (required).</param>
        /// <param name="message">explanation message of the status (required).</param>
        public InlineResponse2002(string sasUrl = default(string), bool? sasUrlExpired = default(bool?), StatusEnum status = default(StatusEnum), string message = default(string))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for InlineResponse2002 and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for InlineResponse2002 and cannot be null");
            }
            else
            {
                this.Message = message;
            }
            this.SasUrl = sasUrl;
            this.SasUrlExpired = sasUrlExpired;
        }
        
        /// <summary>
        /// Azure Storage shared access signature (SAS) URL for exported user data.
        /// </summary>
        /// <value>Azure Storage shared access signature (SAS) URL for exported user data.</value>
        [DataMember(Name="sasUrl", EmitDefaultValue=false)]
        public string SasUrl { get; set; }

        /// <summary>
        /// Whether Azure Storage shared access signature (SAS) URL has expired or not.
        /// </summary>
        /// <value>Whether Azure Storage shared access signature (SAS) URL has expired or not.</value>
        [DataMember(Name="sasUrlExpired", EmitDefaultValue=false)]
        public bool? SasUrlExpired { get; set; }


        /// <summary>
        /// explanation message of the status
        /// </summary>
        /// <value>explanation message of the status</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2002 {\n");
            sb.Append("  SasUrl: ").Append(SasUrl).Append("\n");
            sb.Append("  SasUrlExpired: ").Append(SasUrlExpired).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2002);
        }

        /// <summary>
        /// Returns true if InlineResponse2002 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2002 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2002 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SasUrl == input.SasUrl ||
                    (this.SasUrl != null &&
                    this.SasUrl.Equals(input.SasUrl))
                ) && 
                (
                    this.SasUrlExpired == input.SasUrlExpired ||
                    (this.SasUrlExpired != null &&
                    this.SasUrlExpired.Equals(input.SasUrlExpired))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SasUrl != null)
                    hashCode = hashCode * 59 + this.SasUrl.GetHashCode();
                if (this.SasUrlExpired != null)
                    hashCode = hashCode * 59 + this.SasUrlExpired.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
