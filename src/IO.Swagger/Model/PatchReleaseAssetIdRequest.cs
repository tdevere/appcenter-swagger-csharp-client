/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Patch the asset id of a release request body
    /// </summary>
    [DataContract]
        public partial class PatchReleaseAssetIdRequest :  IEquatable<PatchReleaseAssetIdRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchReleaseAssetIdRequest" /> class.
        /// </summary>
        /// <param name="packageAssetId">The release new package id in ACFUS (required).</param>
        /// <param name="uploadId">The release upload id used to upload the release (required).</param>
        /// <param name="ipaUuids">The ipa UUIDs for this release, as a serialized JSON array.</param>
        public PatchReleaseAssetIdRequest(Guid? packageAssetId = default(Guid?), Guid? uploadId = default(Guid?), string ipaUuids = default(string))
        {
            // to ensure "packageAssetId" is required (not null)
            if (packageAssetId == null)
            {
                throw new InvalidDataException("packageAssetId is a required property for PatchReleaseAssetIdRequest and cannot be null");
            }
            else
            {
                this.PackageAssetId = packageAssetId;
            }
            // to ensure "uploadId" is required (not null)
            if (uploadId == null)
            {
                throw new InvalidDataException("uploadId is a required property for PatchReleaseAssetIdRequest and cannot be null");
            }
            else
            {
                this.UploadId = uploadId;
            }
            this.IpaUuids = ipaUuids;
        }
        
        /// <summary>
        /// The release new package id in ACFUS
        /// </summary>
        /// <value>The release new package id in ACFUS</value>
        [DataMember(Name="package_asset_id", EmitDefaultValue=false)]
        public Guid? PackageAssetId { get; set; }

        /// <summary>
        /// The release upload id used to upload the release
        /// </summary>
        /// <value>The release upload id used to upload the release</value>
        [DataMember(Name="upload_id", EmitDefaultValue=false)]
        public Guid? UploadId { get; set; }

        /// <summary>
        /// The ipa UUIDs for this release, as a serialized JSON array
        /// </summary>
        /// <value>The ipa UUIDs for this release, as a serialized JSON array</value>
        [DataMember(Name="ipa_uuids", EmitDefaultValue=false)]
        public string IpaUuids { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatchReleaseAssetIdRequest {\n");
            sb.Append("  PackageAssetId: ").Append(PackageAssetId).Append("\n");
            sb.Append("  UploadId: ").Append(UploadId).Append("\n");
            sb.Append("  IpaUuids: ").Append(IpaUuids).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatchReleaseAssetIdRequest);
        }

        /// <summary>
        /// Returns true if PatchReleaseAssetIdRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PatchReleaseAssetIdRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatchReleaseAssetIdRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PackageAssetId == input.PackageAssetId ||
                    (this.PackageAssetId != null &&
                    this.PackageAssetId.Equals(input.PackageAssetId))
                ) && 
                (
                    this.UploadId == input.UploadId ||
                    (this.UploadId != null &&
                    this.UploadId.Equals(input.UploadId))
                ) && 
                (
                    this.IpaUuids == input.IpaUuids ||
                    (this.IpaUuids != null &&
                    this.IpaUuids.Equals(input.IpaUuids))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PackageAssetId != null)
                    hashCode = hashCode * 59 + this.PackageAssetId.GetHashCode();
                if (this.UploadId != null)
                    hashCode = hashCode * 59 + this.UploadId.GetHashCode();
                if (this.IpaUuids != null)
                    hashCode = hashCode * 59 + this.IpaUuids.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
