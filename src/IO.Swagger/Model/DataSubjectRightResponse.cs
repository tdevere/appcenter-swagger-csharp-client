/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DataSubjectRightResponse
    /// </summary>
    [DataContract]
        public partial class DataSubjectRightResponse :  IEquatable<DataSubjectRightResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataSubjectRightResponse" /> class.
        /// </summary>
        /// <param name="token">Unique request identifier (required).</param>
        /// <param name="createdAt">ISO 8601 format timestamp of when request was created. (required).</param>
        public DataSubjectRightResponse(Guid? token = default(Guid?), DateTime? createdAt = default(DateTime?))
        {
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for DataSubjectRightResponse and cannot be null");
            }
            else
            {
                this.Token = token;
            }
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for DataSubjectRightResponse and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }
        }
        
        /// <summary>
        /// Unique request identifier
        /// </summary>
        /// <value>Unique request identifier</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public Guid? Token { get; set; }

        /// <summary>
        /// ISO 8601 format timestamp of when request was created.
        /// </summary>
        /// <value>ISO 8601 format timestamp of when request was created.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataSubjectRightResponse {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataSubjectRightResponse);
        }

        /// <summary>
        /// Returns true if DataSubjectRightResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DataSubjectRightResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataSubjectRightResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
