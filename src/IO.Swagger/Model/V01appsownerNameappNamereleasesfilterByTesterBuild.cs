/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Build information for the release 
    /// </summary>
    [DataContract]
        public partial class V01appsownerNameappNamereleasesfilterByTesterBuild :  IEquatable<V01appsownerNameappNamereleasesfilterByTesterBuild>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V01appsownerNameappNamereleasesfilterByTesterBuild" /> class.
        /// </summary>
        /// <param name="branchName">The branch name of the build producing the release.</param>
        /// <param name="commitHash">The commit hash of the build producing the release.</param>
        /// <param name="commitMessage">The commit message of the build producing the release.</param>
        public V01appsownerNameappNamereleasesfilterByTesterBuild(string branchName = default(string), string commitHash = default(string), string commitMessage = default(string))
        {
            this.BranchName = branchName;
            this.CommitHash = commitHash;
            this.CommitMessage = commitMessage;
        }
        
        /// <summary>
        /// The branch name of the build producing the release
        /// </summary>
        /// <value>The branch name of the build producing the release</value>
        [DataMember(Name="branch_name", EmitDefaultValue=false)]
        public string BranchName { get; set; }

        /// <summary>
        /// The commit hash of the build producing the release
        /// </summary>
        /// <value>The commit hash of the build producing the release</value>
        [DataMember(Name="commit_hash", EmitDefaultValue=false)]
        public string CommitHash { get; set; }

        /// <summary>
        /// The commit message of the build producing the release
        /// </summary>
        /// <value>The commit message of the build producing the release</value>
        [DataMember(Name="commit_message", EmitDefaultValue=false)]
        public string CommitMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V01appsownerNameappNamereleasesfilterByTesterBuild {\n");
            sb.Append("  BranchName: ").Append(BranchName).Append("\n");
            sb.Append("  CommitHash: ").Append(CommitHash).Append("\n");
            sb.Append("  CommitMessage: ").Append(CommitMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V01appsownerNameappNamereleasesfilterByTesterBuild);
        }

        /// <summary>
        /// Returns true if V01appsownerNameappNamereleasesfilterByTesterBuild instances are equal
        /// </summary>
        /// <param name="input">Instance of V01appsownerNameappNamereleasesfilterByTesterBuild to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V01appsownerNameappNamereleasesfilterByTesterBuild input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BranchName == input.BranchName ||
                    (this.BranchName != null &&
                    this.BranchName.Equals(input.BranchName))
                ) && 
                (
                    this.CommitHash == input.CommitHash ||
                    (this.CommitHash != null &&
                    this.CommitHash.Equals(input.CommitHash))
                ) && 
                (
                    this.CommitMessage == input.CommitMessage ||
                    (this.CommitMessage != null &&
                    this.CommitMessage.Equals(input.CommitMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BranchName != null)
                    hashCode = hashCode * 59 + this.BranchName.GetHashCode();
                if (this.CommitHash != null)
                    hashCode = hashCode * 59 + this.CommitHash.GetHashCode();
                if (this.CommitMessage != null)
                    hashCode = hashCode * 59 + this.CommitMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
