/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Alerting event
    /// </summary>
    [DataContract]
        public partial class AlertingEvent :  IEquatable<AlertingEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertingEvent" /> class.
        /// </summary>
        /// <param name="eventTimestamp">ISO 8601 date time when event was generated (required).</param>
        /// <param name="eventId">A unique identifier for this event instance. Useful for deduplication (required).</param>
        /// <param name="properties">Obsolete. Use emailProperties..</param>
        public AlertingEvent(string eventTimestamp = default(string), string eventId = default(string), Object properties = default(Object))
        {
            // to ensure "eventTimestamp" is required (not null)
            if (eventTimestamp == null)
            {
                throw new InvalidDataException("eventTimestamp is a required property for AlertingEvent and cannot be null");
            }
            else
            {
                this.EventTimestamp = eventTimestamp;
            }
            // to ensure "eventId" is required (not null)
            if (eventId == null)
            {
                throw new InvalidDataException("eventId is a required property for AlertingEvent and cannot be null");
            }
            else
            {
                this.EventId = eventId;
            }
            this.Properties = properties;
        }
        
        /// <summary>
        /// ISO 8601 date time when event was generated
        /// </summary>
        /// <value>ISO 8601 date time when event was generated</value>
        [DataMember(Name="event_timestamp", EmitDefaultValue=false)]
        public string EventTimestamp { get; set; }

        /// <summary>
        /// A unique identifier for this event instance. Useful for deduplication
        /// </summary>
        /// <value>A unique identifier for this event instance. Useful for deduplication</value>
        [DataMember(Name="event_id", EmitDefaultValue=false)]
        public string EventId { get; set; }

        /// <summary>
        /// Obsolete. Use emailProperties.
        /// </summary>
        /// <value>Obsolete. Use emailProperties.</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Object Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertingEvent {\n");
            sb.Append("  EventTimestamp: ").Append(EventTimestamp).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertingEvent);
        }

        /// <summary>
        /// Returns true if AlertingEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertingEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertingEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventTimestamp == input.EventTimestamp ||
                    (this.EventTimestamp != null &&
                    this.EventTimestamp.Equals(input.EventTimestamp))
                ) && 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventTimestamp != null)
                    hashCode = hashCode * 59 + this.EventTimestamp.GetHashCode();
                if (this.EventId != null)
                    hashCode = hashCode * 59 + this.EventId.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
