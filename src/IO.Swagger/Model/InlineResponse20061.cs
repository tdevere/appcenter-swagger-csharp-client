/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20061
    /// </summary>
    [DataContract]
        public partial class InlineResponse20061 :  IEquatable<InlineResponse20061>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20061" /> class.
        /// </summary>
        /// <param name="name">The name of the device model and OS version.</param>
        /// <param name="id">The unique id of the device configuration.</param>
        /// <param name="tier">The tier.</param>
        /// <param name="image">image.</param>
        /// <param name="model">model.</param>
        /// <param name="os">os.</param>
        /// <param name="osName">osName.</param>
        /// <param name="marketShare">marketShare.</param>
        public InlineResponse20061(string name = default(string), Guid? id = default(Guid?), decimal? tier = default(decimal?), V01appsownerNameappNamedeviceConfigurationsImage image = default(V01appsownerNameappNamedeviceConfigurationsImage), V01appsownerNameappNamedeviceConfigurationsModel model = default(V01appsownerNameappNamedeviceConfigurationsModel), string os = default(string), string osName = default(string), decimal? marketShare = default(decimal?))
        {
            this.Name = name;
            this.Id = id;
            this.Tier = tier;
            this.Image = image;
            this.Model = model;
            this.Os = os;
            this.OsName = osName;
            this.MarketShare = marketShare;
        }
        
        /// <summary>
        /// The name of the device model and OS version
        /// </summary>
        /// <value>The name of the device model and OS version</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The unique id of the device configuration
        /// </summary>
        /// <value>The unique id of the device configuration</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// The tier
        /// </summary>
        /// <value>The tier</value>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public decimal? Tier { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public V01appsownerNameappNamedeviceConfigurationsImage Image { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public V01appsownerNameappNamedeviceConfigurationsModel Model { get; set; }

        /// <summary>
        /// Gets or Sets Os
        /// </summary>
        [DataMember(Name="os", EmitDefaultValue=false)]
        public string Os { get; set; }

        /// <summary>
        /// Gets or Sets OsName
        /// </summary>
        [DataMember(Name="osName", EmitDefaultValue=false)]
        public string OsName { get; set; }

        /// <summary>
        /// Gets or Sets MarketShare
        /// </summary>
        [DataMember(Name="marketShare", EmitDefaultValue=false)]
        public decimal? MarketShare { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20061 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  OsName: ").Append(OsName).Append("\n");
            sb.Append("  MarketShare: ").Append(MarketShare).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20061);
        }

        /// <summary>
        /// Returns true if InlineResponse20061 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20061 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20061 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Os == input.Os ||
                    (this.Os != null &&
                    this.Os.Equals(input.Os))
                ) && 
                (
                    this.OsName == input.OsName ||
                    (this.OsName != null &&
                    this.OsName.Equals(input.OsName))
                ) && 
                (
                    this.MarketShare == input.MarketShare ||
                    (this.MarketShare != null &&
                    this.MarketShare.Equals(input.MarketShare))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Tier != null)
                    hashCode = hashCode * 59 + this.Tier.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.Os != null)
                    hashCode = hashCode * 59 + this.Os.GetHashCode();
                if (this.OsName != null)
                    hashCode = hashCode * 59 + this.OsName.GetHashCode();
                if (this.MarketShare != null)
                    hashCode = hashCode * 59 + this.MarketShare.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
