/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CodePushReleaseUpload
    /// </summary>
    [DataContract]
        public partial class CodePushReleaseUpload :  IEquatable<CodePushReleaseUpload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CodePushReleaseUpload" /> class.
        /// </summary>
        /// <param name="id">The ID for the newly created upload. It is going to be required later in the process. (required).</param>
        /// <param name="uploadDomain">The URL domain used to upload the release. (required).</param>
        /// <param name="token">The URL encoded token used for upload permissions. (required).</param>
        public CodePushReleaseUpload(Guid? id = default(Guid?), string uploadDomain = default(string), string token = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for CodePushReleaseUpload and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "uploadDomain" is required (not null)
            if (uploadDomain == null)
            {
                throw new InvalidDataException("uploadDomain is a required property for CodePushReleaseUpload and cannot be null");
            }
            else
            {
                this.UploadDomain = uploadDomain;
            }
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for CodePushReleaseUpload and cannot be null");
            }
            else
            {
                this.Token = token;
            }
        }
        
        /// <summary>
        /// The ID for the newly created upload. It is going to be required later in the process.
        /// </summary>
        /// <value>The ID for the newly created upload. It is going to be required later in the process.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// The URL domain used to upload the release.
        /// </summary>
        /// <value>The URL domain used to upload the release.</value>
        [DataMember(Name="upload_domain", EmitDefaultValue=false)]
        public string UploadDomain { get; set; }

        /// <summary>
        /// The URL encoded token used for upload permissions.
        /// </summary>
        /// <value>The URL encoded token used for upload permissions.</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CodePushReleaseUpload {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UploadDomain: ").Append(UploadDomain).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CodePushReleaseUpload);
        }

        /// <summary>
        /// Returns true if CodePushReleaseUpload instances are equal
        /// </summary>
        /// <param name="input">Instance of CodePushReleaseUpload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodePushReleaseUpload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UploadDomain == input.UploadDomain ||
                    (this.UploadDomain != null &&
                    this.UploadDomain.Equals(input.UploadDomain))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UploadDomain != null)
                    hashCode = hashCode * 59 + this.UploadDomain.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
