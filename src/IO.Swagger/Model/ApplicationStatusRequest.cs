/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The information needed to fetch the status of an application
    /// </summary>
    [DataContract]
        public partial class ApplicationStatusRequest :  IEquatable<ApplicationStatusRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationStatusRequest" /> class.
        /// </summary>
        /// <param name="username">The username for the Apple Developer account. (required).</param>
        /// <param name="password">The password for the Apple Developer account. (required).</param>
        /// <param name="bundleIdentifier">Bundle Identifier of application in Apple Itunes portal. (required).</param>
        /// <param name="trackIdentifier">Track Identifier for which the status is to be fetched. (required).</param>
        /// <param name="buildVersion">The version of build for which real time status is to be fetched..</param>
        /// <param name="teamIdentifier">Identifier of the team to use when logged in..</param>
        /// <param name="trainVersion">The Train version for which the status is to be fetched..</param>
        public ApplicationStatusRequest(string username = default(string), string password = default(string), string bundleIdentifier = default(string), string trackIdentifier = default(string), string buildVersion = default(string), string teamIdentifier = default(string), string trainVersion = default(string))
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for ApplicationStatusRequest and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for ApplicationStatusRequest and cannot be null");
            }
            else
            {
                this.Password = password;
            }
            // to ensure "bundleIdentifier" is required (not null)
            if (bundleIdentifier == null)
            {
                throw new InvalidDataException("bundleIdentifier is a required property for ApplicationStatusRequest and cannot be null");
            }
            else
            {
                this.BundleIdentifier = bundleIdentifier;
            }
            // to ensure "trackIdentifier" is required (not null)
            if (trackIdentifier == null)
            {
                throw new InvalidDataException("trackIdentifier is a required property for ApplicationStatusRequest and cannot be null");
            }
            else
            {
                this.TrackIdentifier = trackIdentifier;
            }
            this.BuildVersion = buildVersion;
            this.TeamIdentifier = teamIdentifier;
            this.TrainVersion = trainVersion;
        }
        
        /// <summary>
        /// The username for the Apple Developer account.
        /// </summary>
        /// <value>The username for the Apple Developer account.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// The password for the Apple Developer account.
        /// </summary>
        /// <value>The password for the Apple Developer account.</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Bundle Identifier of application in Apple Itunes portal.
        /// </summary>
        /// <value>Bundle Identifier of application in Apple Itunes portal.</value>
        [DataMember(Name="bundle_identifier", EmitDefaultValue=false)]
        public string BundleIdentifier { get; set; }

        /// <summary>
        /// Track Identifier for which the status is to be fetched.
        /// </summary>
        /// <value>Track Identifier for which the status is to be fetched.</value>
        [DataMember(Name="track_identifier", EmitDefaultValue=false)]
        public string TrackIdentifier { get; set; }

        /// <summary>
        /// The version of build for which real time status is to be fetched.
        /// </summary>
        /// <value>The version of build for which real time status is to be fetched.</value>
        [DataMember(Name="build_version", EmitDefaultValue=false)]
        public string BuildVersion { get; set; }

        /// <summary>
        /// Identifier of the team to use when logged in.
        /// </summary>
        /// <value>Identifier of the team to use when logged in.</value>
        [DataMember(Name="team_identifier", EmitDefaultValue=false)]
        public string TeamIdentifier { get; set; }

        /// <summary>
        /// The Train version for which the status is to be fetched.
        /// </summary>
        /// <value>The Train version for which the status is to be fetched.</value>
        [DataMember(Name="train_version", EmitDefaultValue=false)]
        public string TrainVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationStatusRequest {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  BundleIdentifier: ").Append(BundleIdentifier).Append("\n");
            sb.Append("  TrackIdentifier: ").Append(TrackIdentifier).Append("\n");
            sb.Append("  BuildVersion: ").Append(BuildVersion).Append("\n");
            sb.Append("  TeamIdentifier: ").Append(TeamIdentifier).Append("\n");
            sb.Append("  TrainVersion: ").Append(TrainVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationStatusRequest);
        }

        /// <summary>
        /// Returns true if ApplicationStatusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationStatusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationStatusRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.BundleIdentifier == input.BundleIdentifier ||
                    (this.BundleIdentifier != null &&
                    this.BundleIdentifier.Equals(input.BundleIdentifier))
                ) && 
                (
                    this.TrackIdentifier == input.TrackIdentifier ||
                    (this.TrackIdentifier != null &&
                    this.TrackIdentifier.Equals(input.TrackIdentifier))
                ) && 
                (
                    this.BuildVersion == input.BuildVersion ||
                    (this.BuildVersion != null &&
                    this.BuildVersion.Equals(input.BuildVersion))
                ) && 
                (
                    this.TeamIdentifier == input.TeamIdentifier ||
                    (this.TeamIdentifier != null &&
                    this.TeamIdentifier.Equals(input.TeamIdentifier))
                ) && 
                (
                    this.TrainVersion == input.TrainVersion ||
                    (this.TrainVersion != null &&
                    this.TrainVersion.Equals(input.TrainVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.BundleIdentifier != null)
                    hashCode = hashCode * 59 + this.BundleIdentifier.GetHashCode();
                if (this.TrackIdentifier != null)
                    hashCode = hashCode * 59 + this.TrackIdentifier.GetHashCode();
                if (this.BuildVersion != null)
                    hashCode = hashCode * 59 + this.BuildVersion.GetHashCode();
                if (this.TeamIdentifier != null)
                    hashCode = hashCode * 59 + this.TeamIdentifier.GetHashCode();
                if (this.TrainVersion != null)
                    hashCode = hashCode * 59 + this.TrainVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
