/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AppRepoPostRequest
    /// </summary>
    [DataContract]
        public partial class AppRepoPostRequest :  IEquatable<AppRepoPostRequest>, IValidatableObject
    {
        /// <summary>
        /// The provider of the repository
        /// </summary>
        /// <value>The provider of the repository</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum RepoProviderEnum
        {
            /// <summary>
            /// Enum Github for value: github
            /// </summary>
            [EnumMember(Value = "github")]
            Github = 1,
            /// <summary>
            /// Enum Bitbucket for value: bitbucket
            /// </summary>
            [EnumMember(Value = "bitbucket")]
            Bitbucket = 2,
            /// <summary>
            /// Enum Vsts for value: vsts
            /// </summary>
            [EnumMember(Value = "vsts")]
            Vsts = 3,
            /// <summary>
            /// Enum Gitlab for value: gitlab
            /// </summary>
            [EnumMember(Value = "gitlab")]
            Gitlab = 4        }
        /// <summary>
        /// The provider of the repository
        /// </summary>
        /// <value>The provider of the repository</value>
        [DataMember(Name="repo_provider", EmitDefaultValue=false)]
        public RepoProviderEnum? RepoProvider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppRepoPostRequest" /> class.
        /// </summary>
        /// <param name="repoUrl">The absolute URL of the repository (required).</param>
        /// <param name="repoProvider">The provider of the repository.</param>
        /// <param name="userId">The unique id (UUID) of the user who configured the repository (required).</param>
        /// <param name="installationId">Installation id from the provider.</param>
        /// <param name="repoId">Repository id from the provider.</param>
        /// <param name="externalUserId">The external user id from the provider.</param>
        /// <param name="serviceConnectionId">The id of the service connection stored in customer credential store.</param>
        public AppRepoPostRequest(string repoUrl = default(string), RepoProviderEnum? repoProvider = default(RepoProviderEnum?), Guid? userId = default(Guid?), string installationId = default(string), string repoId = default(string), string externalUserId = default(string), Guid? serviceConnectionId = default(Guid?))
        {
            // to ensure "repoUrl" is required (not null)
            if (repoUrl == null)
            {
                throw new InvalidDataException("repoUrl is a required property for AppRepoPostRequest and cannot be null");
            }
            else
            {
                this.RepoUrl = repoUrl;
            }
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for AppRepoPostRequest and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
            this.RepoProvider = repoProvider;
            this.InstallationId = installationId;
            this.RepoId = repoId;
            this.ExternalUserId = externalUserId;
            this.ServiceConnectionId = serviceConnectionId;
        }
        
        /// <summary>
        /// The absolute URL of the repository
        /// </summary>
        /// <value>The absolute URL of the repository</value>
        [DataMember(Name="repo_url", EmitDefaultValue=false)]
        public string RepoUrl { get; set; }


        /// <summary>
        /// The unique id (UUID) of the user who configured the repository
        /// </summary>
        /// <value>The unique id (UUID) of the user who configured the repository</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public Guid? UserId { get; set; }

        /// <summary>
        /// Installation id from the provider
        /// </summary>
        /// <value>Installation id from the provider</value>
        [DataMember(Name="installation_id", EmitDefaultValue=false)]
        public string InstallationId { get; set; }

        /// <summary>
        /// Repository id from the provider
        /// </summary>
        /// <value>Repository id from the provider</value>
        [DataMember(Name="repo_id", EmitDefaultValue=false)]
        public string RepoId { get; set; }

        /// <summary>
        /// The external user id from the provider
        /// </summary>
        /// <value>The external user id from the provider</value>
        [DataMember(Name="external_user_id", EmitDefaultValue=false)]
        public string ExternalUserId { get; set; }

        /// <summary>
        /// The id of the service connection stored in customer credential store
        /// </summary>
        /// <value>The id of the service connection stored in customer credential store</value>
        [DataMember(Name="service_connection_id", EmitDefaultValue=false)]
        public Guid? ServiceConnectionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppRepoPostRequest {\n");
            sb.Append("  RepoUrl: ").Append(RepoUrl).Append("\n");
            sb.Append("  RepoProvider: ").Append(RepoProvider).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  InstallationId: ").Append(InstallationId).Append("\n");
            sb.Append("  RepoId: ").Append(RepoId).Append("\n");
            sb.Append("  ExternalUserId: ").Append(ExternalUserId).Append("\n");
            sb.Append("  ServiceConnectionId: ").Append(ServiceConnectionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppRepoPostRequest);
        }

        /// <summary>
        /// Returns true if AppRepoPostRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AppRepoPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppRepoPostRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RepoUrl == input.RepoUrl ||
                    (this.RepoUrl != null &&
                    this.RepoUrl.Equals(input.RepoUrl))
                ) && 
                (
                    this.RepoProvider == input.RepoProvider ||
                    (this.RepoProvider != null &&
                    this.RepoProvider.Equals(input.RepoProvider))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.InstallationId == input.InstallationId ||
                    (this.InstallationId != null &&
                    this.InstallationId.Equals(input.InstallationId))
                ) && 
                (
                    this.RepoId == input.RepoId ||
                    (this.RepoId != null &&
                    this.RepoId.Equals(input.RepoId))
                ) && 
                (
                    this.ExternalUserId == input.ExternalUserId ||
                    (this.ExternalUserId != null &&
                    this.ExternalUserId.Equals(input.ExternalUserId))
                ) && 
                (
                    this.ServiceConnectionId == input.ServiceConnectionId ||
                    (this.ServiceConnectionId != null &&
                    this.ServiceConnectionId.Equals(input.ServiceConnectionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RepoUrl != null)
                    hashCode = hashCode * 59 + this.RepoUrl.GetHashCode();
                if (this.RepoProvider != null)
                    hashCode = hashCode * 59 + this.RepoProvider.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.InstallationId != null)
                    hashCode = hashCode * 59 + this.InstallationId.GetHashCode();
                if (this.RepoId != null)
                    hashCode = hashCode * 59 + this.RepoId.GetHashCode();
                if (this.ExternalUserId != null)
                    hashCode = hashCode * 59 + this.ExternalUserId.GetHashCode();
                if (this.ServiceConnectionId != null)
                    hashCode = hashCode * 59 + this.ServiceConnectionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
