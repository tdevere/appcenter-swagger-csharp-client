/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Response for retrieving user interaction metrics.
    /// </summary>
    [DataContract]
        public partial class UserInteractionMetricsResponse :  IEquatable<UserInteractionMetricsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInteractionMetricsResponse" /> class.
        /// </summary>
        /// <param name="lessThan100Apps">check if the user has less than 100 apps..</param>
        /// <param name="hasMoreThan1Release">check if the user&#x27;s whole apps has more than 1 releases..</param>
        public UserInteractionMetricsResponse(bool? lessThan100Apps = default(bool?), bool? hasMoreThan1Release = default(bool?))
        {
            this.LessThan100Apps = lessThan100Apps;
            this.HasMoreThan1Release = hasMoreThan1Release;
        }
        
        /// <summary>
        /// check if the user has less than 100 apps.
        /// </summary>
        /// <value>check if the user has less than 100 apps.</value>
        [DataMember(Name="less_than_100_apps", EmitDefaultValue=false)]
        public bool? LessThan100Apps { get; set; }

        /// <summary>
        /// check if the user&#x27;s whole apps has more than 1 releases.
        /// </summary>
        /// <value>check if the user&#x27;s whole apps has more than 1 releases.</value>
        [DataMember(Name="has_more_than_1_release", EmitDefaultValue=false)]
        public bool? HasMoreThan1Release { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserInteractionMetricsResponse {\n");
            sb.Append("  LessThan100Apps: ").Append(LessThan100Apps).Append("\n");
            sb.Append("  HasMoreThan1Release: ").Append(HasMoreThan1Release).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserInteractionMetricsResponse);
        }

        /// <summary>
        /// Returns true if UserInteractionMetricsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UserInteractionMetricsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserInteractionMetricsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LessThan100Apps == input.LessThan100Apps ||
                    (this.LessThan100Apps != null &&
                    this.LessThan100Apps.Equals(input.LessThan100Apps))
                ) && 
                (
                    this.HasMoreThan1Release == input.HasMoreThan1Release ||
                    (this.HasMoreThan1Release != null &&
                    this.HasMoreThan1Release.Equals(input.HasMoreThan1Release))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LessThan100Apps != null)
                    hashCode = hashCode * 59 + this.LessThan100Apps.GetHashCode();
                if (this.HasMoreThan1Release != null)
                    hashCode = hashCode * 59 + this.HasMoreThan1Release.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
