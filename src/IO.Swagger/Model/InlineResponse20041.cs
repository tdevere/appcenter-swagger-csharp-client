/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20041
    /// </summary>
    [DataContract]
        public partial class InlineResponse20041 :  IEquatable<InlineResponse20041>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20041" /> class.
        /// </summary>
        /// <param name="appId">appId.</param>
        /// <param name="attachmentId">attachmentId.</param>
        /// <param name="crashId">crashId.</param>
        /// <param name="blobLocation">blobLocation.</param>
        /// <param name="contentType">contentType.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="createdTime">createdTime.</param>
        /// <param name="size">size.</param>
        public InlineResponse20041(string appId = default(string), string attachmentId = default(string), string crashId = default(string), string blobLocation = default(string), string contentType = default(string), string fileName = default(string), DateTime? createdTime = default(DateTime?), long? size = default(long?))
        {
            this.AppId = appId;
            this.AttachmentId = attachmentId;
            this.CrashId = crashId;
            this.BlobLocation = blobLocation;
            this.ContentType = contentType;
            this.FileName = fileName;
            this.CreatedTime = createdTime;
            this.Size = size;
        }
        
        /// <summary>
        /// Gets or Sets AppId
        /// </summary>
        [DataMember(Name="appId", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentId
        /// </summary>
        [DataMember(Name="attachmentId", EmitDefaultValue=false)]
        public string AttachmentId { get; set; }

        /// <summary>
        /// Gets or Sets CrashId
        /// </summary>
        [DataMember(Name="crashId", EmitDefaultValue=false)]
        public string CrashId { get; set; }

        /// <summary>
        /// Gets or Sets BlobLocation
        /// </summary>
        [DataMember(Name="blobLocation", EmitDefaultValue=false)]
        public string BlobLocation { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedTime
        /// </summary>
        [DataMember(Name="createdTime", EmitDefaultValue=false)]
        public DateTime? CreatedTime { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public long? Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20041 {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  CrashId: ").Append(CrashId).Append("\n");
            sb.Append("  BlobLocation: ").Append(BlobLocation).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20041);
        }

        /// <summary>
        /// Returns true if InlineResponse20041 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20041 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20041 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.AttachmentId == input.AttachmentId ||
                    (this.AttachmentId != null &&
                    this.AttachmentId.Equals(input.AttachmentId))
                ) && 
                (
                    this.CrashId == input.CrashId ||
                    (this.CrashId != null &&
                    this.CrashId.Equals(input.CrashId))
                ) && 
                (
                    this.BlobLocation == input.BlobLocation ||
                    (this.BlobLocation != null &&
                    this.BlobLocation.Equals(input.BlobLocation))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.AttachmentId != null)
                    hashCode = hashCode * 59 + this.AttachmentId.GetHashCode();
                if (this.CrashId != null)
                    hashCode = hashCode * 59 + this.CrashId.GetHashCode();
                if (this.BlobLocation != null)
                    hashCode = hashCode * 59 + this.BlobLocation.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
