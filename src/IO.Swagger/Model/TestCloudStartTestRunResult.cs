/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Result of starting a test run
    /// </summary>
    [DataContract]
        public partial class TestCloudStartTestRunResult :  IEquatable<TestCloudStartTestRunResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestCloudStartTestRunResult" /> class.
        /// </summary>
        /// <param name="acceptedDevices">List with names of accepted devices.</param>
        /// <param name="rejectedDevices">List with names and descriptions of rejected devices.</param>
        public TestCloudStartTestRunResult(List<string> acceptedDevices = default(List<string>), List<string> rejectedDevices = default(List<string>))
        {
            this.AcceptedDevices = acceptedDevices;
            this.RejectedDevices = rejectedDevices;
        }
        
        /// <summary>
        /// List with names of accepted devices
        /// </summary>
        /// <value>List with names of accepted devices</value>
        [DataMember(Name="accepted_devices", EmitDefaultValue=false)]
        public List<string> AcceptedDevices { get; set; }

        /// <summary>
        /// List with names and descriptions of rejected devices
        /// </summary>
        /// <value>List with names and descriptions of rejected devices</value>
        [DataMember(Name="rejected_devices", EmitDefaultValue=false)]
        public List<string> RejectedDevices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestCloudStartTestRunResult {\n");
            sb.Append("  AcceptedDevices: ").Append(AcceptedDevices).Append("\n");
            sb.Append("  RejectedDevices: ").Append(RejectedDevices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestCloudStartTestRunResult);
        }

        /// <summary>
        /// Returns true if TestCloudStartTestRunResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TestCloudStartTestRunResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestCloudStartTestRunResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptedDevices == input.AcceptedDevices ||
                    this.AcceptedDevices != null &&
                    input.AcceptedDevices != null &&
                    this.AcceptedDevices.SequenceEqual(input.AcceptedDevices)
                ) && 
                (
                    this.RejectedDevices == input.RejectedDevices ||
                    this.RejectedDevices != null &&
                    input.RejectedDevices != null &&
                    this.RejectedDevices.SequenceEqual(input.RejectedDevices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptedDevices != null)
                    hashCode = hashCode * 59 + this.AcceptedDevices.GetHashCode();
                if (this.RejectedDevices != null)
                    hashCode = hashCode * 59 + this.RejectedDevices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
