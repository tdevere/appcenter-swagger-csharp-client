/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GeneralDistributionGroupDetailsResponse
    /// </summary>
    [DataContract]
        public partial class GeneralDistributionGroupDetailsResponse :  IEquatable<GeneralDistributionGroupDetailsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralDistributionGroupDetailsResponse" /> class.
        /// </summary>
        /// <param name="isShared">Whether the distribution group is shared group or not.</param>
        /// <param name="ownerAppId">If distribution group is owned by an app, this is the unique app ID.</param>
        /// <param name="ownerOrgId">If distribution group is owned by an org, this is the unique org ID.</param>
        public GeneralDistributionGroupDetailsResponse(bool? isShared = default(bool?), Guid? ownerAppId = default(Guid?), Guid? ownerOrgId = default(Guid?))
        {
            this.IsShared = isShared;
            this.OwnerAppId = ownerAppId;
            this.OwnerOrgId = ownerOrgId;
        }
        
        /// <summary>
        /// Whether the distribution group is shared group or not
        /// </summary>
        /// <value>Whether the distribution group is shared group or not</value>
        [DataMember(Name="is_shared", EmitDefaultValue=false)]
        public bool? IsShared { get; set; }

        /// <summary>
        /// If distribution group is owned by an app, this is the unique app ID
        /// </summary>
        /// <value>If distribution group is owned by an app, this is the unique app ID</value>
        [DataMember(Name="owner_app_id", EmitDefaultValue=false)]
        public Guid? OwnerAppId { get; set; }

        /// <summary>
        /// If distribution group is owned by an org, this is the unique org ID
        /// </summary>
        /// <value>If distribution group is owned by an org, this is the unique org ID</value>
        [DataMember(Name="owner_org_id", EmitDefaultValue=false)]
        public Guid? OwnerOrgId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeneralDistributionGroupDetailsResponse {\n");
            sb.Append("  IsShared: ").Append(IsShared).Append("\n");
            sb.Append("  OwnerAppId: ").Append(OwnerAppId).Append("\n");
            sb.Append("  OwnerOrgId: ").Append(OwnerOrgId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeneralDistributionGroupDetailsResponse);
        }

        /// <summary>
        /// Returns true if GeneralDistributionGroupDetailsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GeneralDistributionGroupDetailsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneralDistributionGroupDetailsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsShared == input.IsShared ||
                    (this.IsShared != null &&
                    this.IsShared.Equals(input.IsShared))
                ) && 
                (
                    this.OwnerAppId == input.OwnerAppId ||
                    (this.OwnerAppId != null &&
                    this.OwnerAppId.Equals(input.OwnerAppId))
                ) && 
                (
                    this.OwnerOrgId == input.OwnerOrgId ||
                    (this.OwnerOrgId != null &&
                    this.OwnerOrgId.Equals(input.OwnerOrgId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsShared != null)
                    hashCode = hashCode * 59 + this.IsShared.GetHashCode();
                if (this.OwnerAppId != null)
                    hashCode = hashCode * 59 + this.OwnerAppId.GetHashCode();
                if (this.OwnerOrgId != null)
                    hashCode = hashCode * 59 + this.OwnerOrgId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
