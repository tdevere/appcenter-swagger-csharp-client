/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Apple credentials needed to log into the Apple Developer Portal
    /// </summary>
    [DataContract]
        public partial class AppleMutifactorLoginRequest :  IEquatable<AppleMutifactorLoginRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppleMutifactorLoginRequest" /> class.
        /// </summary>
        /// <param name="username">The username for the Apple Developer account. (required).</param>
        /// <param name="authcode">This is the six digit OTP used for completing the multi-factor authentication (required).</param>
        public AppleMutifactorLoginRequest(string username = default(string), string authcode = default(string))
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for AppleMutifactorLoginRequest and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            // to ensure "authcode" is required (not null)
            if (authcode == null)
            {
                throw new InvalidDataException("authcode is a required property for AppleMutifactorLoginRequest and cannot be null");
            }
            else
            {
                this.Authcode = authcode;
            }
        }
        
        /// <summary>
        /// The username for the Apple Developer account.
        /// </summary>
        /// <value>The username for the Apple Developer account.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// This is the six digit OTP used for completing the multi-factor authentication
        /// </summary>
        /// <value>This is the six digit OTP used for completing the multi-factor authentication</value>
        [DataMember(Name="authcode", EmitDefaultValue=false)]
        public string Authcode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppleMutifactorLoginRequest {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Authcode: ").Append(Authcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppleMutifactorLoginRequest);
        }

        /// <summary>
        /// Returns true if AppleMutifactorLoginRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AppleMutifactorLoginRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppleMutifactorLoginRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Authcode == input.Authcode ||
                    (this.Authcode != null &&
                    this.Authcode.Equals(input.Authcode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Authcode != null)
                    hashCode = hashCode * 59 + this.Authcode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
