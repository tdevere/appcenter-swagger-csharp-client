/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserUpdateRequestInternal
    /// </summary>
    [DataContract]
        public partial class UserUpdateRequestInternal :  IEquatable<UserUpdateRequestInternal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserUpdateRequestInternal" /> class.
        /// </summary>
        /// <param name="displayName">The full name of the user. Might for example be first and last name.</param>
        /// <param name="name">The new, unique name that is used to identify..</param>
        /// <param name="nextNpsSurveyDate">The date in the future when the user should be checked again for NPS eligibility.</param>
        /// <param name="email">The email address for this user.</param>
        public UserUpdateRequestInternal(string displayName = default(string), string name = default(string), string nextNpsSurveyDate = default(string), string email = default(string))
        {
            this.DisplayName = displayName;
            this.Name = name;
            this.NextNpsSurveyDate = nextNpsSurveyDate;
            this.Email = email;
        }
        
        /// <summary>
        /// The full name of the user. Might for example be first and last name
        /// </summary>
        /// <value>The full name of the user. Might for example be first and last name</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The new, unique name that is used to identify.
        /// </summary>
        /// <value>The new, unique name that is used to identify.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The date in the future when the user should be checked again for NPS eligibility
        /// </summary>
        /// <value>The date in the future when the user should be checked again for NPS eligibility</value>
        [DataMember(Name="next_nps_survey_date", EmitDefaultValue=false)]
        public string NextNpsSurveyDate { get; set; }

        /// <summary>
        /// The email address for this user
        /// </summary>
        /// <value>The email address for this user</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserUpdateRequestInternal {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NextNpsSurveyDate: ").Append(NextNpsSurveyDate).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserUpdateRequestInternal);
        }

        /// <summary>
        /// Returns true if UserUpdateRequestInternal instances are equal
        /// </summary>
        /// <param name="input">Instance of UserUpdateRequestInternal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserUpdateRequestInternal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NextNpsSurveyDate == input.NextNpsSurveyDate ||
                    (this.NextNpsSurveyDate != null &&
                    this.NextNpsSurveyDate.Equals(input.NextNpsSurveyDate))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NextNpsSurveyDate != null)
                    hashCode = hashCode * 59 + this.NextNpsSurveyDate.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
