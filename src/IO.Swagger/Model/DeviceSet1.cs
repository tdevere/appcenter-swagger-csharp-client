/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The name and devices of the device set
    /// </summary>
    [DataContract]
        public partial class DeviceSet1 :  IEquatable<DeviceSet1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceSet1" /> class.
        /// </summary>
        /// <param name="id">Identifier of the device set (required).</param>
        /// <param name="manufacturerCount">The number of manufacturers in the device set&#x27;s device selection.</param>
        /// <param name="name">Name of the device set (required).</param>
        /// <param name="slug">Slug of the device set.</param>
        /// <param name="owner">owner (required).</param>
        /// <param name="osVersionCount">The number of os versions in the device set&#x27;s device selection.</param>
        /// <param name="deviceConfigurations">deviceConfigurations (required).</param>
        public DeviceSet1(string id = default(string), decimal? manufacturerCount = default(decimal?), string name = default(string), string slug = default(string), DeviceSetOwner owner = default(DeviceSetOwner), decimal? osVersionCount = default(decimal?), List<V01appsownerNameappNameuserdeviceSetsDeviceConfigurations> deviceConfigurations = default(List<V01appsownerNameappNameuserdeviceSetsDeviceConfigurations>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for DeviceSet1 and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for DeviceSet1 and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new InvalidDataException("owner is a required property for DeviceSet1 and cannot be null");
            }
            else
            {
                this.Owner = owner;
            }
            // to ensure "deviceConfigurations" is required (not null)
            if (deviceConfigurations == null)
            {
                throw new InvalidDataException("deviceConfigurations is a required property for DeviceSet1 and cannot be null");
            }
            else
            {
                this.DeviceConfigurations = deviceConfigurations;
            }
            this.ManufacturerCount = manufacturerCount;
            this.Slug = slug;
            this.OsVersionCount = osVersionCount;
        }
        
        /// <summary>
        /// Identifier of the device set
        /// </summary>
        /// <value>Identifier of the device set</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The number of manufacturers in the device set&#x27;s device selection
        /// </summary>
        /// <value>The number of manufacturers in the device set&#x27;s device selection</value>
        [DataMember(Name="manufacturerCount", EmitDefaultValue=false)]
        public decimal? ManufacturerCount { get; set; }

        /// <summary>
        /// Name of the device set
        /// </summary>
        /// <value>Name of the device set</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Slug of the device set
        /// </summary>
        /// <value>Slug of the device set</value>
        [DataMember(Name="slug", EmitDefaultValue=false)]
        public string Slug { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public DeviceSetOwner Owner { get; set; }

        /// <summary>
        /// The number of os versions in the device set&#x27;s device selection
        /// </summary>
        /// <value>The number of os versions in the device set&#x27;s device selection</value>
        [DataMember(Name="osVersionCount", EmitDefaultValue=false)]
        public decimal? OsVersionCount { get; set; }

        /// <summary>
        /// Gets or Sets DeviceConfigurations
        /// </summary>
        [DataMember(Name="deviceConfigurations", EmitDefaultValue=false)]
        public List<V01appsownerNameappNameuserdeviceSetsDeviceConfigurations> DeviceConfigurations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceSet1 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ManufacturerCount: ").Append(ManufacturerCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  OsVersionCount: ").Append(OsVersionCount).Append("\n");
            sb.Append("  DeviceConfigurations: ").Append(DeviceConfigurations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceSet1);
        }

        /// <summary>
        /// Returns true if DeviceSet1 instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceSet1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceSet1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ManufacturerCount == input.ManufacturerCount ||
                    (this.ManufacturerCount != null &&
                    this.ManufacturerCount.Equals(input.ManufacturerCount))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.OsVersionCount == input.OsVersionCount ||
                    (this.OsVersionCount != null &&
                    this.OsVersionCount.Equals(input.OsVersionCount))
                ) && 
                (
                    this.DeviceConfigurations == input.DeviceConfigurations ||
                    this.DeviceConfigurations != null &&
                    input.DeviceConfigurations != null &&
                    this.DeviceConfigurations.SequenceEqual(input.DeviceConfigurations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ManufacturerCount != null)
                    hashCode = hashCode * 59 + this.ManufacturerCount.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Slug != null)
                    hashCode = hashCode * 59 + this.Slug.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.OsVersionCount != null)
                    hashCode = hashCode * 59 + this.OsVersionCount.GetHashCode();
                if (this.DeviceConfigurations != null)
                    hashCode = hashCode * 59 + this.DeviceConfigurations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
