/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PatchReleaseRequest
    /// </summary>
    [DataContract]
        public partial class PatchReleaseRequest :  IEquatable<PatchReleaseRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchReleaseRequest" /> class.
        /// </summary>
        /// <param name="status">updated status of release.</param>
        /// <param name="destPublishId">Destination Publish Id.</param>
        /// <param name="errorDetails">failure error details from store.</param>
        /// <param name="errorContextId">contextId for failed error message.</param>
        /// <param name="wrapPackageUrl">package url for wrapping request.</param>
        /// <param name="isWrapperRequest">request is for wrapping or not.</param>
        public PatchReleaseRequest(string status = default(string), string destPublishId = default(string), string errorDetails = default(string), string errorContextId = default(string), string wrapPackageUrl = default(string), bool? isWrapperRequest = default(bool?))
        {
            this.Status = status;
            this.DestPublishId = destPublishId;
            this.ErrorDetails = errorDetails;
            this.ErrorContextId = errorContextId;
            this.WrapPackageUrl = wrapPackageUrl;
            this.IsWrapperRequest = isWrapperRequest;
        }
        
        /// <summary>
        /// updated status of release
        /// </summary>
        /// <value>updated status of release</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Destination Publish Id
        /// </summary>
        /// <value>Destination Publish Id</value>
        [DataMember(Name="dest_publish_id", EmitDefaultValue=false)]
        public string DestPublishId { get; set; }

        /// <summary>
        /// failure error details from store
        /// </summary>
        /// <value>failure error details from store</value>
        [DataMember(Name="error_details", EmitDefaultValue=false)]
        public string ErrorDetails { get; set; }

        /// <summary>
        /// contextId for failed error message
        /// </summary>
        /// <value>contextId for failed error message</value>
        [DataMember(Name="error_contextId", EmitDefaultValue=false)]
        public string ErrorContextId { get; set; }

        /// <summary>
        /// package url for wrapping request
        /// </summary>
        /// <value>package url for wrapping request</value>
        [DataMember(Name="wrap_package_url", EmitDefaultValue=false)]
        public string WrapPackageUrl { get; set; }

        /// <summary>
        /// request is for wrapping or not
        /// </summary>
        /// <value>request is for wrapping or not</value>
        [DataMember(Name="is_wrapper_request", EmitDefaultValue=false)]
        public bool? IsWrapperRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatchReleaseRequest {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DestPublishId: ").Append(DestPublishId).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  ErrorContextId: ").Append(ErrorContextId).Append("\n");
            sb.Append("  WrapPackageUrl: ").Append(WrapPackageUrl).Append("\n");
            sb.Append("  IsWrapperRequest: ").Append(IsWrapperRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatchReleaseRequest);
        }

        /// <summary>
        /// Returns true if PatchReleaseRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PatchReleaseRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatchReleaseRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.DestPublishId == input.DestPublishId ||
                    (this.DestPublishId != null &&
                    this.DestPublishId.Equals(input.DestPublishId))
                ) && 
                (
                    this.ErrorDetails == input.ErrorDetails ||
                    (this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(input.ErrorDetails))
                ) && 
                (
                    this.ErrorContextId == input.ErrorContextId ||
                    (this.ErrorContextId != null &&
                    this.ErrorContextId.Equals(input.ErrorContextId))
                ) && 
                (
                    this.WrapPackageUrl == input.WrapPackageUrl ||
                    (this.WrapPackageUrl != null &&
                    this.WrapPackageUrl.Equals(input.WrapPackageUrl))
                ) && 
                (
                    this.IsWrapperRequest == input.IsWrapperRequest ||
                    (this.IsWrapperRequest != null &&
                    this.IsWrapperRequest.Equals(input.IsWrapperRequest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.DestPublishId != null)
                    hashCode = hashCode * 59 + this.DestPublishId.GetHashCode();
                if (this.ErrorDetails != null)
                    hashCode = hashCode * 59 + this.ErrorDetails.GetHashCode();
                if (this.ErrorContextId != null)
                    hashCode = hashCode * 59 + this.ErrorContextId.GetHashCode();
                if (this.WrapPackageUrl != null)
                    hashCode = hashCode * 59 + this.WrapPackageUrl.GetHashCode();
                if (this.IsWrapperRequest != null)
                    hashCode = hashCode * 59 + this.IsWrapperRequest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
