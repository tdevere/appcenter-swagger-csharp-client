/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FileAsset
    /// </summary>
    [DataContract]
        public partial class FileAsset :  IEquatable<FileAsset>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileAsset" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="location">location.</param>
        /// <param name="token">token.</param>
        /// <param name="uploadDomain">uploadDomain.</param>
        /// <param name="uploadWindowLocation">uploadWindowLocation.</param>
        /// <param name="urlEncodedToken">urlEncodedToken.</param>
        public FileAsset(string id = default(string), string location = default(string), string token = default(string), string uploadDomain = default(string), string uploadWindowLocation = default(string), string urlEncodedToken = default(string))
        {
            this.Id = id;
            this.Location = location;
            this.Token = token;
            this.UploadDomain = uploadDomain;
            this.UploadWindowLocation = uploadWindowLocation;
            this.UrlEncodedToken = urlEncodedToken;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets UploadDomain
        /// </summary>
        [DataMember(Name="uploadDomain", EmitDefaultValue=false)]
        public string UploadDomain { get; set; }

        /// <summary>
        /// Gets or Sets UploadWindowLocation
        /// </summary>
        [DataMember(Name="uploadWindowLocation", EmitDefaultValue=false)]
        public string UploadWindowLocation { get; set; }

        /// <summary>
        /// Gets or Sets UrlEncodedToken
        /// </summary>
        [DataMember(Name="urlEncodedToken", EmitDefaultValue=false)]
        public string UrlEncodedToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileAsset {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UploadDomain: ").Append(UploadDomain).Append("\n");
            sb.Append("  UploadWindowLocation: ").Append(UploadWindowLocation).Append("\n");
            sb.Append("  UrlEncodedToken: ").Append(UrlEncodedToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileAsset);
        }

        /// <summary>
        /// Returns true if FileAsset instances are equal
        /// </summary>
        /// <param name="input">Instance of FileAsset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileAsset input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UploadDomain == input.UploadDomain ||
                    (this.UploadDomain != null &&
                    this.UploadDomain.Equals(input.UploadDomain))
                ) && 
                (
                    this.UploadWindowLocation == input.UploadWindowLocation ||
                    (this.UploadWindowLocation != null &&
                    this.UploadWindowLocation.Equals(input.UploadWindowLocation))
                ) && 
                (
                    this.UrlEncodedToken == input.UrlEncodedToken ||
                    (this.UrlEncodedToken != null &&
                    this.UrlEncodedToken.Equals(input.UrlEncodedToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UploadDomain != null)
                    hashCode = hashCode * 59 + this.UploadDomain.GetHashCode();
                if (this.UploadWindowLocation != null)
                    hashCode = hashCode * 59 + this.UploadWindowLocation.GetHashCode();
                if (this.UrlEncodedToken != null)
                    hashCode = hashCode * 59 + this.UrlEncodedToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
