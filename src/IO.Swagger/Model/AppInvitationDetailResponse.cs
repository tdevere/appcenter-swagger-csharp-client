/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AppInvitationDetailResponse
    /// </summary>
    [DataContract]
        public partial class AppInvitationDetailResponse :  IEquatable<AppInvitationDetailResponse>, IValidatableObject
    {
        /// <summary>
        /// The invitation type
        /// </summary>
        /// <value>The invitation type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum InviteTypeEnum
        {
            /// <summary>
            /// Enum Developer for value: developer
            /// </summary>
            [EnumMember(Value = "developer")]
            Developer = 1,
            /// <summary>
            /// Enum Tester for value: tester
            /// </summary>
            [EnumMember(Value = "tester")]
            Tester = 2        }
        /// <summary>
        /// The invitation type
        /// </summary>
        /// <value>The invitation type</value>
        [DataMember(Name="invite_type", EmitDefaultValue=false)]
        public InviteTypeEnum InviteType { get; set; }
        /// <summary>
        /// Defines Permissions
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PermissionsEnum
        {
            /// <summary>
            /// Enum Manager for value: manager
            /// </summary>
            [EnumMember(Value = "manager")]
            Manager = 1,
            /// <summary>
            /// Enum Developer for value: developer
            /// </summary>
            [EnumMember(Value = "developer")]
            Developer = 2,
            /// <summary>
            /// Enum Viewer for value: viewer
            /// </summary>
            [EnumMember(Value = "viewer")]
            Viewer = 3,
            /// <summary>
            /// Enum Tester for value: tester
            /// </summary>
            [EnumMember(Value = "tester")]
            Tester = 4        }
        /// <summary>
        /// The permissions the user has for the app
        /// </summary>
        /// <value>The permissions the user has for the app</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<PermissionsEnum> Permissions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppInvitationDetailResponse" /> class.
        /// </summary>
        /// <param name="id">The unique ID (UUID) of the invitation (required).</param>
        /// <param name="app">app (required).</param>
        /// <param name="email">The email address of the invited user (required).</param>
        /// <param name="inviteType">The invitation type (required).</param>
        /// <param name="invitedBy">invitedBy (required).</param>
        /// <param name="isExistingUser">Indicates whether the invited user already exists (required).</param>
        /// <param name="permissions">The permissions the user has for the app.</param>
        /// <param name="appCount">The number of apps in the group.</param>
        /// <param name="distributionGroup">distributionGroup.</param>
        public AppInvitationDetailResponse(Guid? id = default(Guid?), AllOfAppInvitationDetailResponseApp app = default(AllOfAppInvitationDetailResponseApp), string email = default(string), InviteTypeEnum inviteType = default(InviteTypeEnum), InlineResponse20019 invitedBy = default(InlineResponse20019), bool? isExistingUser = default(bool?), List<PermissionsEnum> permissions = default(List<PermissionsEnum>), decimal? appCount = default(decimal?), AppInvitationDetailResponseDistributionGroup distributionGroup = default(AppInvitationDetailResponseDistributionGroup))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for AppInvitationDetailResponse and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "app" is required (not null)
            if (app == null)
            {
                throw new InvalidDataException("app is a required property for AppInvitationDetailResponse and cannot be null");
            }
            else
            {
                this.App = app;
            }
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for AppInvitationDetailResponse and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "inviteType" is required (not null)
            if (inviteType == null)
            {
                throw new InvalidDataException("inviteType is a required property for AppInvitationDetailResponse and cannot be null");
            }
            else
            {
                this.InviteType = inviteType;
            }
            // to ensure "invitedBy" is required (not null)
            if (invitedBy == null)
            {
                throw new InvalidDataException("invitedBy is a required property for AppInvitationDetailResponse and cannot be null");
            }
            else
            {
                this.InvitedBy = invitedBy;
            }
            // to ensure "isExistingUser" is required (not null)
            if (isExistingUser == null)
            {
                throw new InvalidDataException("isExistingUser is a required property for AppInvitationDetailResponse and cannot be null");
            }
            else
            {
                this.IsExistingUser = isExistingUser;
            }
            this.Permissions = permissions;
            this.AppCount = appCount;
            this.DistributionGroup = distributionGroup;
        }
        
        /// <summary>
        /// The unique ID (UUID) of the invitation
        /// </summary>
        /// <value>The unique ID (UUID) of the invitation</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets App
        /// </summary>
        [DataMember(Name="app", EmitDefaultValue=false)]
        public AllOfAppInvitationDetailResponseApp App { get; set; }

        /// <summary>
        /// The email address of the invited user
        /// </summary>
        /// <value>The email address of the invited user</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }


        /// <summary>
        /// Gets or Sets InvitedBy
        /// </summary>
        [DataMember(Name="invited_by", EmitDefaultValue=false)]
        public InlineResponse20019 InvitedBy { get; set; }

        /// <summary>
        /// Indicates whether the invited user already exists
        /// </summary>
        /// <value>Indicates whether the invited user already exists</value>
        [DataMember(Name="is_existing_user", EmitDefaultValue=false)]
        public bool? IsExistingUser { get; set; }


        /// <summary>
        /// The number of apps in the group
        /// </summary>
        /// <value>The number of apps in the group</value>
        [DataMember(Name="app_count", EmitDefaultValue=false)]
        public decimal? AppCount { get; set; }

        /// <summary>
        /// Gets or Sets DistributionGroup
        /// </summary>
        [DataMember(Name="distribution_group", EmitDefaultValue=false)]
        public AppInvitationDetailResponseDistributionGroup DistributionGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppInvitationDetailResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  InviteType: ").Append(InviteType).Append("\n");
            sb.Append("  InvitedBy: ").Append(InvitedBy).Append("\n");
            sb.Append("  IsExistingUser: ").Append(IsExistingUser).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  AppCount: ").Append(AppCount).Append("\n");
            sb.Append("  DistributionGroup: ").Append(DistributionGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppInvitationDetailResponse);
        }

        /// <summary>
        /// Returns true if AppInvitationDetailResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AppInvitationDetailResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppInvitationDetailResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.App == input.App ||
                    (this.App != null &&
                    this.App.Equals(input.App))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.InviteType == input.InviteType ||
                    (this.InviteType != null &&
                    this.InviteType.Equals(input.InviteType))
                ) && 
                (
                    this.InvitedBy == input.InvitedBy ||
                    (this.InvitedBy != null &&
                    this.InvitedBy.Equals(input.InvitedBy))
                ) && 
                (
                    this.IsExistingUser == input.IsExistingUser ||
                    (this.IsExistingUser != null &&
                    this.IsExistingUser.Equals(input.IsExistingUser))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    input.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.AppCount == input.AppCount ||
                    (this.AppCount != null &&
                    this.AppCount.Equals(input.AppCount))
                ) && 
                (
                    this.DistributionGroup == input.DistributionGroup ||
                    (this.DistributionGroup != null &&
                    this.DistributionGroup.Equals(input.DistributionGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.App != null)
                    hashCode = hashCode * 59 + this.App.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.InviteType != null)
                    hashCode = hashCode * 59 + this.InviteType.GetHashCode();
                if (this.InvitedBy != null)
                    hashCode = hashCode * 59 + this.InvitedBy.GetHashCode();
                if (this.IsExistingUser != null)
                    hashCode = hashCode * 59 + this.IsExistingUser.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.AppCount != null)
                    hashCode = hashCode * 59 + this.AppCount.GetHashCode();
                if (this.DistributionGroup != null)
                    hashCode = hashCode * 59 + this.DistributionGroup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
