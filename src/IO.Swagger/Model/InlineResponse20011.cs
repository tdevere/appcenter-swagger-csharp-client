/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20011
    /// </summary>
    [DataContract]
        public partial class InlineResponse20011 :  IEquatable<InlineResponse20011>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20011" /> class.
        /// </summary>
        /// <param name="subscriptionId">The azure subscription id (required).</param>
        /// <param name="tenantId">The tenant id of the azure subscription belongs to (required).</param>
        /// <param name="subscriptionName">The name of the azure subscription (required).</param>
        /// <param name="isBilling">If the subscription is used for billing.</param>
        /// <param name="isBillable">If the subscription can be used for billing.</param>
        /// <param name="isMicrosoftInternal">If the subscription is internal Microsoft subscription.</param>
        public InlineResponse20011(Guid? subscriptionId = default(Guid?), Guid? tenantId = default(Guid?), string subscriptionName = default(string), bool? isBilling = default(bool?), bool? isBillable = default(bool?), bool? isMicrosoftInternal = default(bool?))
        {
            // to ensure "subscriptionId" is required (not null)
            if (subscriptionId == null)
            {
                throw new InvalidDataException("subscriptionId is a required property for InlineResponse20011 and cannot be null");
            }
            else
            {
                this.SubscriptionId = subscriptionId;
            }
            // to ensure "tenantId" is required (not null)
            if (tenantId == null)
            {
                throw new InvalidDataException("tenantId is a required property for InlineResponse20011 and cannot be null");
            }
            else
            {
                this.TenantId = tenantId;
            }
            // to ensure "subscriptionName" is required (not null)
            if (subscriptionName == null)
            {
                throw new InvalidDataException("subscriptionName is a required property for InlineResponse20011 and cannot be null");
            }
            else
            {
                this.SubscriptionName = subscriptionName;
            }
            this.IsBilling = isBilling;
            this.IsBillable = isBillable;
            this.IsMicrosoftInternal = isMicrosoftInternal;
        }
        
        /// <summary>
        /// The azure subscription id
        /// </summary>
        /// <value>The azure subscription id</value>
        [DataMember(Name="subscription_id", EmitDefaultValue=false)]
        public Guid? SubscriptionId { get; set; }

        /// <summary>
        /// The tenant id of the azure subscription belongs to
        /// </summary>
        /// <value>The tenant id of the azure subscription belongs to</value>
        [DataMember(Name="tenant_id", EmitDefaultValue=false)]
        public Guid? TenantId { get; set; }

        /// <summary>
        /// The name of the azure subscription
        /// </summary>
        /// <value>The name of the azure subscription</value>
        [DataMember(Name="subscription_name", EmitDefaultValue=false)]
        public string SubscriptionName { get; set; }

        /// <summary>
        /// If the subscription is used for billing
        /// </summary>
        /// <value>If the subscription is used for billing</value>
        [DataMember(Name="is_billing", EmitDefaultValue=false)]
        public bool? IsBilling { get; set; }

        /// <summary>
        /// If the subscription can be used for billing
        /// </summary>
        /// <value>If the subscription can be used for billing</value>
        [DataMember(Name="is_billable", EmitDefaultValue=false)]
        public bool? IsBillable { get; set; }

        /// <summary>
        /// If the subscription is internal Microsoft subscription
        /// </summary>
        /// <value>If the subscription is internal Microsoft subscription</value>
        [DataMember(Name="is_microsoft_internal", EmitDefaultValue=false)]
        public bool? IsMicrosoftInternal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20011 {\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  SubscriptionName: ").Append(SubscriptionName).Append("\n");
            sb.Append("  IsBilling: ").Append(IsBilling).Append("\n");
            sb.Append("  IsBillable: ").Append(IsBillable).Append("\n");
            sb.Append("  IsMicrosoftInternal: ").Append(IsMicrosoftInternal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20011);
        }

        /// <summary>
        /// Returns true if InlineResponse20011 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20011 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20011 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SubscriptionId == input.SubscriptionId ||
                    (this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(input.SubscriptionId))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.SubscriptionName == input.SubscriptionName ||
                    (this.SubscriptionName != null &&
                    this.SubscriptionName.Equals(input.SubscriptionName))
                ) && 
                (
                    this.IsBilling == input.IsBilling ||
                    (this.IsBilling != null &&
                    this.IsBilling.Equals(input.IsBilling))
                ) && 
                (
                    this.IsBillable == input.IsBillable ||
                    (this.IsBillable != null &&
                    this.IsBillable.Equals(input.IsBillable))
                ) && 
                (
                    this.IsMicrosoftInternal == input.IsMicrosoftInternal ||
                    (this.IsMicrosoftInternal != null &&
                    this.IsMicrosoftInternal.Equals(input.IsMicrosoftInternal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubscriptionId != null)
                    hashCode = hashCode * 59 + this.SubscriptionId.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.SubscriptionName != null)
                    hashCode = hashCode * 59 + this.SubscriptionName.GetHashCode();
                if (this.IsBilling != null)
                    hashCode = hashCode * 59 + this.IsBilling.GetHashCode();
                if (this.IsBillable != null)
                    hashCode = hashCode * 59 + this.IsBillable.GetHashCode();
                if (this.IsMicrosoftInternal != null)
                    hashCode = hashCode * 59 + this.IsMicrosoftInternal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
