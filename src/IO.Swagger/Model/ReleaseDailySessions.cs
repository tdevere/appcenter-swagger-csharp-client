/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReleaseDailySessions
    /// </summary>
    [DataContract]
        public partial class ReleaseDailySessions :  IEquatable<ReleaseDailySessions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseDailySessions" /> class.
        /// </summary>
        /// <param name="totalSessionCounts">totalSessionCounts.</param>
        /// <param name="avgSessionsPerDay">avgSessionsPerDay.</param>
        /// <param name="sessions">Sessions per day..</param>
        public ReleaseDailySessions(long? totalSessionCounts = default(long?), double? avgSessionsPerDay = default(double?), List<ReleaseDailySessionsSessions> sessions = default(List<ReleaseDailySessionsSessions>))
        {
            this.TotalSessionCounts = totalSessionCounts;
            this.AvgSessionsPerDay = avgSessionsPerDay;
            this.Sessions = sessions;
        }
        
        /// <summary>
        /// Gets or Sets TotalSessionCounts
        /// </summary>
        [DataMember(Name="totalSessionCounts", EmitDefaultValue=false)]
        public long? TotalSessionCounts { get; set; }

        /// <summary>
        /// Gets or Sets AvgSessionsPerDay
        /// </summary>
        [DataMember(Name="avgSessionsPerDay", EmitDefaultValue=false)]
        public double? AvgSessionsPerDay { get; set; }

        /// <summary>
        /// Sessions per day.
        /// </summary>
        /// <value>Sessions per day.</value>
        [DataMember(Name="sessions", EmitDefaultValue=false)]
        public List<ReleaseDailySessionsSessions> Sessions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReleaseDailySessions {\n");
            sb.Append("  TotalSessionCounts: ").Append(TotalSessionCounts).Append("\n");
            sb.Append("  AvgSessionsPerDay: ").Append(AvgSessionsPerDay).Append("\n");
            sb.Append("  Sessions: ").Append(Sessions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseDailySessions);
        }

        /// <summary>
        /// Returns true if ReleaseDailySessions instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseDailySessions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseDailySessions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalSessionCounts == input.TotalSessionCounts ||
                    (this.TotalSessionCounts != null &&
                    this.TotalSessionCounts.Equals(input.TotalSessionCounts))
                ) && 
                (
                    this.AvgSessionsPerDay == input.AvgSessionsPerDay ||
                    (this.AvgSessionsPerDay != null &&
                    this.AvgSessionsPerDay.Equals(input.AvgSessionsPerDay))
                ) && 
                (
                    this.Sessions == input.Sessions ||
                    this.Sessions != null &&
                    input.Sessions != null &&
                    this.Sessions.SequenceEqual(input.Sessions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalSessionCounts != null)
                    hashCode = hashCode * 59 + this.TotalSessionCounts.GetHashCode();
                if (this.AvgSessionsPerDay != null)
                    hashCode = hashCode * 59 + this.AvgSessionsPerDay.GetHashCode();
                if (this.Sessions != null)
                    hashCode = hashCode * 59 + this.Sessions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
