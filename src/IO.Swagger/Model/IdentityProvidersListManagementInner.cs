/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IdentityProvidersListManagementInner
    /// </summary>
    [DataContract]
        public partial class IdentityProvidersListManagementInner :  IEquatable<IdentityProvidersListManagementInner>, IValidatableObject
    {
        /// <summary>
        /// The name of the identity provider type
        /// </summary>
        /// <value>The name of the identity provider type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ProviderNameEnum
        {
            /// <summary>
            /// Enum Github for value: github
            /// </summary>
            [EnumMember(Value = "github")]
            Github = 1,
            /// <summary>
            /// Enum Aad for value: aad
            /// </summary>
            [EnumMember(Value = "aad")]
            Aad = 2,
            /// <summary>
            /// Enum Facebook for value: facebook
            /// </summary>
            [EnumMember(Value = "facebook")]
            Facebook = 3,
            /// <summary>
            /// Enum Google for value: google
            /// </summary>
            [EnumMember(Value = "google")]
            Google = 4        }
        /// <summary>
        /// The name of the identity provider type
        /// </summary>
        /// <value>The name of the identity provider type</value>
        [DataMember(Name="provider_name", EmitDefaultValue=false)]
        public ProviderNameEnum? ProviderName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProvidersListManagementInner" /> class.
        /// </summary>
        /// <param name="createdAt">Creation date-time.</param>
        /// <param name="updatedAt">Last update date-time.</param>
        /// <param name="userId">The account id (UUID).</param>
        /// <param name="providerName">The name of the identity provider type.</param>
        /// <param name="providerUserId">The external user id.</param>
        public IdentityProvidersListManagementInner(string createdAt = default(string), string updatedAt = default(string), string userId = default(string), ProviderNameEnum? providerName = default(ProviderNameEnum?), string providerUserId = default(string))
        {
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.UserId = userId;
            this.ProviderName = providerName;
            this.ProviderUserId = providerUserId;
        }
        
        /// <summary>
        /// Creation date-time
        /// </summary>
        /// <value>Creation date-time</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Last update date-time
        /// </summary>
        /// <value>Last update date-time</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// The account id (UUID)
        /// </summary>
        /// <value>The account id (UUID)</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }


        /// <summary>
        /// The external user id
        /// </summary>
        /// <value>The external user id</value>
        [DataMember(Name="provider_user_id", EmitDefaultValue=false)]
        public string ProviderUserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentityProvidersListManagementInner {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  ProviderUserId: ").Append(ProviderUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityProvidersListManagementInner);
        }

        /// <summary>
        /// Returns true if IdentityProvidersListManagementInner instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityProvidersListManagementInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityProvidersListManagementInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ProviderName == input.ProviderName ||
                    (this.ProviderName != null &&
                    this.ProviderName.Equals(input.ProviderName))
                ) && 
                (
                    this.ProviderUserId == input.ProviderUserId ||
                    (this.ProviderUserId != null &&
                    this.ProviderUserId.Equals(input.ProviderUserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.ProviderName != null)
                    hashCode = hashCode * 59 + this.ProviderName.GetHashCode();
                if (this.ProviderUserId != null)
                    hashCode = hashCode * 59 + this.ProviderUserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
