/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReleaseDestinationResponse
    /// </summary>
    [DataContract]
        public partial class ReleaseDestinationResponse :  IEquatable<ReleaseDestinationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseDestinationResponse" /> class.
        /// </summary>
        /// <param name="mandatoryUpdate">Flag to mark the release for the provided destinations as mandatory (required).</param>
        /// <param name="provisioningStatusUrl">The url to check provisioning status..</param>
        public ReleaseDestinationResponse(bool? mandatoryUpdate = default(bool?), string provisioningStatusUrl = default(string))
        {
            // to ensure "mandatoryUpdate" is required (not null)
            if (mandatoryUpdate == null)
            {
                throw new InvalidDataException("mandatoryUpdate is a required property for ReleaseDestinationResponse and cannot be null");
            }
            else
            {
                this.MandatoryUpdate = mandatoryUpdate;
            }
            this.ProvisioningStatusUrl = provisioningStatusUrl;
        }
        
        /// <summary>
        /// Flag to mark the release for the provided destinations as mandatory
        /// </summary>
        /// <value>Flag to mark the release for the provided destinations as mandatory</value>
        [DataMember(Name="mandatory_update", EmitDefaultValue=false)]
        public bool? MandatoryUpdate { get; set; }

        /// <summary>
        /// The url to check provisioning status.
        /// </summary>
        /// <value>The url to check provisioning status.</value>
        [DataMember(Name="provisioning_status_url", EmitDefaultValue=false)]
        public string ProvisioningStatusUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReleaseDestinationResponse {\n");
            sb.Append("  MandatoryUpdate: ").Append(MandatoryUpdate).Append("\n");
            sb.Append("  ProvisioningStatusUrl: ").Append(ProvisioningStatusUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseDestinationResponse);
        }

        /// <summary>
        /// Returns true if ReleaseDestinationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseDestinationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseDestinationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MandatoryUpdate == input.MandatoryUpdate ||
                    (this.MandatoryUpdate != null &&
                    this.MandatoryUpdate.Equals(input.MandatoryUpdate))
                ) && 
                (
                    this.ProvisioningStatusUrl == input.ProvisioningStatusUrl ||
                    (this.ProvisioningStatusUrl != null &&
                    this.ProvisioningStatusUrl.Equals(input.ProvisioningStatusUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MandatoryUpdate != null)
                    hashCode = hashCode * 59 + this.MandatoryUpdate.GetHashCode();
                if (this.ProvisioningStatusUrl != null)
                    hashCode = hashCode * 59 + this.ProvisioningStatusUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
