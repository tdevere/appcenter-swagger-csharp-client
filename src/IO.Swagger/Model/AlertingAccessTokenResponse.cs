/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Access token details
    /// </summary>
    [DataContract]
        public partial class AlertingAccessTokenResponse :  IEquatable<AlertingAccessTokenResponse>, IValidatableObject
    {
        /// <summary>
        /// External provider name
        /// </summary>
        /// <value>External provider name</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ExternalProviderNameEnum
        {
            /// <summary>
            /// Enum Github for value: github
            /// </summary>
            [EnumMember(Value = "github")]
            Github = 1,
            /// <summary>
            /// Enum Vsts for value: vsts
            /// </summary>
            [EnumMember(Value = "vsts")]
            Vsts = 2,
            /// <summary>
            /// Enum Jira for value: jira
            /// </summary>
            [EnumMember(Value = "jira")]
            Jira = 3        }
        /// <summary>
        /// External provider name
        /// </summary>
        /// <value>External provider name</value>
        [DataMember(Name="external_provider_name", EmitDefaultValue=false)]
        public ExternalProviderNameEnum ExternalProviderName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertingAccessTokenResponse" /> class.
        /// </summary>
        /// <param name="accessTokenId">ID of the access token (required).</param>
        /// <param name="externalProviderName">External provider name (required).</param>
        /// <param name="externalUserEmail">The email of external user that used to authenticate aginst the external oauth provider (required).</param>
        /// <param name="externalAccountName">The account name of external user that used to authenticate against the external oauth provider or basic auth (required).</param>
        public AlertingAccessTokenResponse(string accessTokenId = default(string), ExternalProviderNameEnum externalProviderName = default(ExternalProviderNameEnum), string externalUserEmail = default(string), string externalAccountName = default(string))
        {
            // to ensure "accessTokenId" is required (not null)
            if (accessTokenId == null)
            {
                throw new InvalidDataException("accessTokenId is a required property for AlertingAccessTokenResponse and cannot be null");
            }
            else
            {
                this.AccessTokenId = accessTokenId;
            }
            // to ensure "externalProviderName" is required (not null)
            if (externalProviderName == null)
            {
                throw new InvalidDataException("externalProviderName is a required property for AlertingAccessTokenResponse and cannot be null");
            }
            else
            {
                this.ExternalProviderName = externalProviderName;
            }
            // to ensure "externalUserEmail" is required (not null)
            if (externalUserEmail == null)
            {
                throw new InvalidDataException("externalUserEmail is a required property for AlertingAccessTokenResponse and cannot be null");
            }
            else
            {
                this.ExternalUserEmail = externalUserEmail;
            }
            // to ensure "externalAccountName" is required (not null)
            if (externalAccountName == null)
            {
                throw new InvalidDataException("externalAccountName is a required property for AlertingAccessTokenResponse and cannot be null");
            }
            else
            {
                this.ExternalAccountName = externalAccountName;
            }
        }
        
        /// <summary>
        /// ID of the access token
        /// </summary>
        /// <value>ID of the access token</value>
        [DataMember(Name="access_token_id", EmitDefaultValue=false)]
        public string AccessTokenId { get; set; }


        /// <summary>
        /// The email of external user that used to authenticate aginst the external oauth provider
        /// </summary>
        /// <value>The email of external user that used to authenticate aginst the external oauth provider</value>
        [DataMember(Name="external_user_email", EmitDefaultValue=false)]
        public string ExternalUserEmail { get; set; }

        /// <summary>
        /// The account name of external user that used to authenticate against the external oauth provider or basic auth
        /// </summary>
        /// <value>The account name of external user that used to authenticate against the external oauth provider or basic auth</value>
        [DataMember(Name="external_account_name", EmitDefaultValue=false)]
        public string ExternalAccountName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertingAccessTokenResponse {\n");
            sb.Append("  AccessTokenId: ").Append(AccessTokenId).Append("\n");
            sb.Append("  ExternalProviderName: ").Append(ExternalProviderName).Append("\n");
            sb.Append("  ExternalUserEmail: ").Append(ExternalUserEmail).Append("\n");
            sb.Append("  ExternalAccountName: ").Append(ExternalAccountName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertingAccessTokenResponse);
        }

        /// <summary>
        /// Returns true if AlertingAccessTokenResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertingAccessTokenResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertingAccessTokenResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessTokenId == input.AccessTokenId ||
                    (this.AccessTokenId != null &&
                    this.AccessTokenId.Equals(input.AccessTokenId))
                ) && 
                (
                    this.ExternalProviderName == input.ExternalProviderName ||
                    (this.ExternalProviderName != null &&
                    this.ExternalProviderName.Equals(input.ExternalProviderName))
                ) && 
                (
                    this.ExternalUserEmail == input.ExternalUserEmail ||
                    (this.ExternalUserEmail != null &&
                    this.ExternalUserEmail.Equals(input.ExternalUserEmail))
                ) && 
                (
                    this.ExternalAccountName == input.ExternalAccountName ||
                    (this.ExternalAccountName != null &&
                    this.ExternalAccountName.Equals(input.ExternalAccountName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessTokenId != null)
                    hashCode = hashCode * 59 + this.AccessTokenId.GetHashCode();
                if (this.ExternalProviderName != null)
                    hashCode = hashCode * 59 + this.ExternalProviderName.GetHashCode();
                if (this.ExternalUserEmail != null)
                    hashCode = hashCode * 59 + this.ExternalUserEmail.GetHashCode();
                if (this.ExternalAccountName != null)
                    hashCode = hashCode * 59 + this.ExternalAccountName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
