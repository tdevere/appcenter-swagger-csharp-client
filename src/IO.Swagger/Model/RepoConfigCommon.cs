/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RepoConfigCommon
    /// </summary>
    [DataContract]
        public partial class RepoConfigCommon :  IEquatable<RepoConfigCommon>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RepoConfigCommon" /> class.
        /// </summary>
        /// <param name="repoUrl">The repository&#x27;s git url, must be a HTTPS URL.</param>
        /// <param name="repoId">The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com.</param>
        /// <param name="externalUserId">The external user id from the repository provider. Required for GitLab.com repositories.</param>
        /// <param name="serviceConnectionId">The id of the service connection (private). Required for GitLab self-hosted repositories.</param>
        public RepoConfigCommon(string repoUrl = default(string), string repoId = default(string), string externalUserId = default(string), string serviceConnectionId = default(string))
        {
            this.RepoUrl = repoUrl;
            this.RepoId = repoId;
            this.ExternalUserId = externalUserId;
            this.ServiceConnectionId = serviceConnectionId;
        }
        
        /// <summary>
        /// The repository&#x27;s git url, must be a HTTPS URL
        /// </summary>
        /// <value>The repository&#x27;s git url, must be a HTTPS URL</value>
        [DataMember(Name="repo_url", EmitDefaultValue=false)]
        public string RepoUrl { get; set; }

        /// <summary>
        /// The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com
        /// </summary>
        /// <value>The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com</value>
        [DataMember(Name="repo_id", EmitDefaultValue=false)]
        public string RepoId { get; set; }

        /// <summary>
        /// The external user id from the repository provider. Required for GitLab.com repositories
        /// </summary>
        /// <value>The external user id from the repository provider. Required for GitLab.com repositories</value>
        [DataMember(Name="external_user_id", EmitDefaultValue=false)]
        public string ExternalUserId { get; set; }

        /// <summary>
        /// The id of the service connection (private). Required for GitLab self-hosted repositories
        /// </summary>
        /// <value>The id of the service connection (private). Required for GitLab self-hosted repositories</value>
        [DataMember(Name="service_connection_id", EmitDefaultValue=false)]
        public string ServiceConnectionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RepoConfigCommon {\n");
            sb.Append("  RepoUrl: ").Append(RepoUrl).Append("\n");
            sb.Append("  RepoId: ").Append(RepoId).Append("\n");
            sb.Append("  ExternalUserId: ").Append(ExternalUserId).Append("\n");
            sb.Append("  ServiceConnectionId: ").Append(ServiceConnectionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RepoConfigCommon);
        }

        /// <summary>
        /// Returns true if RepoConfigCommon instances are equal
        /// </summary>
        /// <param name="input">Instance of RepoConfigCommon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RepoConfigCommon input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RepoUrl == input.RepoUrl ||
                    (this.RepoUrl != null &&
                    this.RepoUrl.Equals(input.RepoUrl))
                ) && 
                (
                    this.RepoId == input.RepoId ||
                    (this.RepoId != null &&
                    this.RepoId.Equals(input.RepoId))
                ) && 
                (
                    this.ExternalUserId == input.ExternalUserId ||
                    (this.ExternalUserId != null &&
                    this.ExternalUserId.Equals(input.ExternalUserId))
                ) && 
                (
                    this.ServiceConnectionId == input.ServiceConnectionId ||
                    (this.ServiceConnectionId != null &&
                    this.ServiceConnectionId.Equals(input.ServiceConnectionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RepoUrl != null)
                    hashCode = hashCode * 59 + this.RepoUrl.GetHashCode();
                if (this.RepoId != null)
                    hashCode = hashCode * 59 + this.RepoId.GetHashCode();
                if (this.ExternalUserId != null)
                    hashCode = hashCode * 59 + this.ExternalUserId.GetHashCode();
                if (this.ServiceConnectionId != null)
                    hashCode = hashCode * 59 + this.ServiceConnectionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
