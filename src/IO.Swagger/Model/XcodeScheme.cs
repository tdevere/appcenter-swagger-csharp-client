/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// XcodeScheme
    /// </summary>
    [DataContract]
        public partial class XcodeScheme :  IEquatable<XcodeScheme>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XcodeScheme" /> class.
        /// </summary>
        /// <param name="name">Scheme name (required).</param>
        /// <param name="hasTestAction">Does scheme have a test action? (required).</param>
        /// <param name="archiveConfiguration">Build configuration set in Archive action.</param>
        /// <param name="archiveProject">archiveProject.</param>
        public XcodeScheme(string name = default(string), bool? hasTestAction = default(bool?), string archiveConfiguration = default(string), XcodeSchemeArchiveProject archiveProject = default(XcodeSchemeArchiveProject))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for XcodeScheme and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "hasTestAction" is required (not null)
            if (hasTestAction == null)
            {
                throw new InvalidDataException("hasTestAction is a required property for XcodeScheme and cannot be null");
            }
            else
            {
                this.HasTestAction = hasTestAction;
            }
            this.ArchiveConfiguration = archiveConfiguration;
            this.ArchiveProject = archiveProject;
        }
        
        /// <summary>
        /// Scheme name
        /// </summary>
        /// <value>Scheme name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Does scheme have a test action?
        /// </summary>
        /// <value>Does scheme have a test action?</value>
        [DataMember(Name="hasTestAction", EmitDefaultValue=false)]
        public bool? HasTestAction { get; set; }

        /// <summary>
        /// Build configuration set in Archive action
        /// </summary>
        /// <value>Build configuration set in Archive action</value>
        [DataMember(Name="archiveConfiguration", EmitDefaultValue=false)]
        public string ArchiveConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets ArchiveProject
        /// </summary>
        [DataMember(Name="archiveProject", EmitDefaultValue=false)]
        public XcodeSchemeArchiveProject ArchiveProject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XcodeScheme {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HasTestAction: ").Append(HasTestAction).Append("\n");
            sb.Append("  ArchiveConfiguration: ").Append(ArchiveConfiguration).Append("\n");
            sb.Append("  ArchiveProject: ").Append(ArchiveProject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XcodeScheme);
        }

        /// <summary>
        /// Returns true if XcodeScheme instances are equal
        /// </summary>
        /// <param name="input">Instance of XcodeScheme to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XcodeScheme input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.HasTestAction == input.HasTestAction ||
                    (this.HasTestAction != null &&
                    this.HasTestAction.Equals(input.HasTestAction))
                ) && 
                (
                    this.ArchiveConfiguration == input.ArchiveConfiguration ||
                    (this.ArchiveConfiguration != null &&
                    this.ArchiveConfiguration.Equals(input.ArchiveConfiguration))
                ) && 
                (
                    this.ArchiveProject == input.ArchiveProject ||
                    (this.ArchiveProject != null &&
                    this.ArchiveProject.Equals(input.ArchiveProject))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.HasTestAction != null)
                    hashCode = hashCode * 59 + this.HasTestAction.GetHashCode();
                if (this.ArchiveConfiguration != null)
                    hashCode = hashCode * 59 + this.ArchiveConfiguration.GetHashCode();
                if (this.ArchiveProject != null)
                    hashCode = hashCode * 59 + this.ArchiveProject.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
