/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AppPatchRequest
    /// </summary>
    [DataContract]
        public partial class AppPatchRequest :  IEquatable<AppPatchRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppPatchRequest" /> class.
        /// </summary>
        /// <param name="description">A short text describing the app.</param>
        /// <param name="displayName">The display name of the app.</param>
        /// <param name="releaseType">A one-word descriptive release type value that starts with a capital letter but is otherwise lowercase.</param>
        /// <param name="name">The name of the app used in URLs.</param>
        /// <param name="iconUrl">The string representation of the URL pointing to the app&#x27;s icon.</param>
        /// <param name="iconAssetId">The uuid for the icon&#x27;s asset id from ACFUS.</param>
        public AppPatchRequest(string description = default(string), string displayName = default(string), string releaseType = default(string), string name = default(string), string iconUrl = default(string), Guid? iconAssetId = default(Guid?))
        {
            this.Description = description;
            this.DisplayName = displayName;
            this.ReleaseType = releaseType;
            this.Name = name;
            this.IconUrl = iconUrl;
            this.IconAssetId = iconAssetId;
        }
        
        /// <summary>
        /// A short text describing the app
        /// </summary>
        /// <value>A short text describing the app</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The display name of the app
        /// </summary>
        /// <value>The display name of the app</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A one-word descriptive release type value that starts with a capital letter but is otherwise lowercase
        /// </summary>
        /// <value>A one-word descriptive release type value that starts with a capital letter but is otherwise lowercase</value>
        [DataMember(Name="release_type", EmitDefaultValue=false)]
        public string ReleaseType { get; set; }

        /// <summary>
        /// The name of the app used in URLs
        /// </summary>
        /// <value>The name of the app used in URLs</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The string representation of the URL pointing to the app&#x27;s icon
        /// </summary>
        /// <value>The string representation of the URL pointing to the app&#x27;s icon</value>
        [DataMember(Name="icon_url", EmitDefaultValue=false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// The uuid for the icon&#x27;s asset id from ACFUS
        /// </summary>
        /// <value>The uuid for the icon&#x27;s asset id from ACFUS</value>
        [DataMember(Name="icon_asset_id", EmitDefaultValue=false)]
        public Guid? IconAssetId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppPatchRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ReleaseType: ").Append(ReleaseType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  IconAssetId: ").Append(IconAssetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppPatchRequest);
        }

        /// <summary>
        /// Returns true if AppPatchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AppPatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppPatchRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.ReleaseType == input.ReleaseType ||
                    (this.ReleaseType != null &&
                    this.ReleaseType.Equals(input.ReleaseType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                ) && 
                (
                    this.IconAssetId == input.IconAssetId ||
                    (this.IconAssetId != null &&
                    this.IconAssetId.Equals(input.IconAssetId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.ReleaseType != null)
                    hashCode = hashCode * 59 + this.ReleaseType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.IconUrl != null)
                    hashCode = hashCode * 59 + this.IconUrl.GetHashCode();
                if (this.IconAssetId != null)
                    hashCode = hashCode * 59 + this.IconAssetId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
