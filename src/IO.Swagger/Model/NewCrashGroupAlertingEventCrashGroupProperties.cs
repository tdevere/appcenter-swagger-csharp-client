/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Properties of new crash group
    /// </summary>
    [DataContract]
        public partial class NewCrashGroupAlertingEventCrashGroupProperties :  IEquatable<NewCrashGroupAlertingEventCrashGroupProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewCrashGroupAlertingEventCrashGroupProperties" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="reason">reason (required).</param>
        /// <param name="url">url (required).</param>
        /// <param name="appDisplayName">appDisplayName (required).</param>
        /// <param name="appPlatform">appPlatform (required).</param>
        /// <param name="appVersion">appVersion (required).</param>
        /// <param name="stackTrace">stackTrace (required).</param>
        public NewCrashGroupAlertingEventCrashGroupProperties(string id = default(string), string name = default(string), string reason = default(string), string url = default(string), string appDisplayName = default(string), string appPlatform = default(string), string appVersion = default(string), List<string> stackTrace = default(List<string>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for NewCrashGroupAlertingEventCrashGroupProperties and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for NewCrashGroupAlertingEventCrashGroupProperties and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new InvalidDataException("reason is a required property for NewCrashGroupAlertingEventCrashGroupProperties and cannot be null");
            }
            else
            {
                this.Reason = reason;
            }
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for NewCrashGroupAlertingEventCrashGroupProperties and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            // to ensure "appDisplayName" is required (not null)
            if (appDisplayName == null)
            {
                throw new InvalidDataException("appDisplayName is a required property for NewCrashGroupAlertingEventCrashGroupProperties and cannot be null");
            }
            else
            {
                this.AppDisplayName = appDisplayName;
            }
            // to ensure "appPlatform" is required (not null)
            if (appPlatform == null)
            {
                throw new InvalidDataException("appPlatform is a required property for NewCrashGroupAlertingEventCrashGroupProperties and cannot be null");
            }
            else
            {
                this.AppPlatform = appPlatform;
            }
            // to ensure "appVersion" is required (not null)
            if (appVersion == null)
            {
                throw new InvalidDataException("appVersion is a required property for NewCrashGroupAlertingEventCrashGroupProperties and cannot be null");
            }
            else
            {
                this.AppVersion = appVersion;
            }
            // to ensure "stackTrace" is required (not null)
            if (stackTrace == null)
            {
                throw new InvalidDataException("stackTrace is a required property for NewCrashGroupAlertingEventCrashGroupProperties and cannot be null");
            }
            else
            {
                this.StackTrace = stackTrace;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets AppDisplayName
        /// </summary>
        [DataMember(Name="app_display_name", EmitDefaultValue=false)]
        public string AppDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets AppPlatform
        /// </summary>
        [DataMember(Name="app_platform", EmitDefaultValue=false)]
        public string AppPlatform { get; set; }

        /// <summary>
        /// Gets or Sets AppVersion
        /// </summary>
        [DataMember(Name="app_version", EmitDefaultValue=false)]
        public string AppVersion { get; set; }

        /// <summary>
        /// Gets or Sets StackTrace
        /// </summary>
        [DataMember(Name="stack_trace", EmitDefaultValue=false)]
        public List<string> StackTrace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewCrashGroupAlertingEventCrashGroupProperties {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AppDisplayName: ").Append(AppDisplayName).Append("\n");
            sb.Append("  AppPlatform: ").Append(AppPlatform).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  StackTrace: ").Append(StackTrace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewCrashGroupAlertingEventCrashGroupProperties);
        }

        /// <summary>
        /// Returns true if NewCrashGroupAlertingEventCrashGroupProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of NewCrashGroupAlertingEventCrashGroupProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewCrashGroupAlertingEventCrashGroupProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.AppDisplayName == input.AppDisplayName ||
                    (this.AppDisplayName != null &&
                    this.AppDisplayName.Equals(input.AppDisplayName))
                ) && 
                (
                    this.AppPlatform == input.AppPlatform ||
                    (this.AppPlatform != null &&
                    this.AppPlatform.Equals(input.AppPlatform))
                ) && 
                (
                    this.AppVersion == input.AppVersion ||
                    (this.AppVersion != null &&
                    this.AppVersion.Equals(input.AppVersion))
                ) && 
                (
                    this.StackTrace == input.StackTrace ||
                    this.StackTrace != null &&
                    input.StackTrace != null &&
                    this.StackTrace.SequenceEqual(input.StackTrace)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.AppDisplayName != null)
                    hashCode = hashCode * 59 + this.AppDisplayName.GetHashCode();
                if (this.AppPlatform != null)
                    hashCode = hashCode * 59 + this.AppPlatform.GetHashCode();
                if (this.AppVersion != null)
                    hashCode = hashCode * 59 + this.AppVersion.GetHashCode();
                if (this.StackTrace != null)
                    hashCode = hashCode * 59 + this.StackTrace.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
