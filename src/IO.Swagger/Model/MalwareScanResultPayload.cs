/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Malware scan result from Malware Scan service
    /// </summary>
    [DataContract]
        public partial class MalwareScanResultPayload :  IEquatable<MalwareScanResultPayload>, IValidatableObject
    {
        /// <summary>
        /// Scan result
        /// </summary>
        /// <value>Scan result</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ResultEnum
        {
            /// <summary>
            /// Enum Clean for value: clean
            /// </summary>
            [EnumMember(Value = "clean")]
            Clean = 1,
            /// <summary>
            /// Enum Infected for value: infected
            /// </summary>
            [EnumMember(Value = "infected")]
            Infected = 2,
            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 3        }
        /// <summary>
        /// Scan result
        /// </summary>
        /// <value>Scan result</value>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public ResultEnum Result { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MalwareScanResultPayload" /> class.
        /// </summary>
        /// <param name="requestId">Scan request identifier (required).</param>
        /// <param name="result">Scan result (required).</param>
        public MalwareScanResultPayload(Guid? requestId = default(Guid?), ResultEnum result = default(ResultEnum))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new InvalidDataException("requestId is a required property for MalwareScanResultPayload and cannot be null");
            }
            else
            {
                this.RequestId = requestId;
            }
            // to ensure "result" is required (not null)
            if (result == null)
            {
                throw new InvalidDataException("result is a required property for MalwareScanResultPayload and cannot be null");
            }
            else
            {
                this.Result = result;
            }
        }
        
        /// <summary>
        /// Scan request identifier
        /// </summary>
        /// <value>Scan request identifier</value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public Guid? RequestId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MalwareScanResultPayload {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MalwareScanResultPayload);
        }

        /// <summary>
        /// Returns true if MalwareScanResultPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of MalwareScanResultPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MalwareScanResultPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
