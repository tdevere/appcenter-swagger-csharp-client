/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The publising information.
    /// </summary>
    [DataContract]
        public partial class PublishDevicesRequest :  IEquatable<PublishDevicesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublishDevicesRequest" /> class.
        /// </summary>
        /// <param name="username">The username for the Apple Developer account to publish the devices to..</param>
        /// <param name="password">The password for the Apple Developer account to publish the devices to..</param>
        /// <param name="accountServiceConnectionId">The service_connection_id of the stored Apple credentials instead of username, password..</param>
        /// <param name="publishAllDevices">When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account..</param>
        /// <param name="devices">Array of device UDID&#x27;s to be published to the Apple Developer account..</param>
        public PublishDevicesRequest(string username = default(string), string password = default(string), string accountServiceConnectionId = default(string), bool? publishAllDevices = default(bool?), List<string> devices = default(List<string>))
        {
            this.Username = username;
            this.Password = password;
            this.AccountServiceConnectionId = accountServiceConnectionId;
            this.PublishAllDevices = publishAllDevices;
            this.Devices = devices;
        }
        
        /// <summary>
        /// The username for the Apple Developer account to publish the devices to.
        /// </summary>
        /// <value>The username for the Apple Developer account to publish the devices to.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// The password for the Apple Developer account to publish the devices to.
        /// </summary>
        /// <value>The password for the Apple Developer account to publish the devices to.</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// The service_connection_id of the stored Apple credentials instead of username, password.
        /// </summary>
        /// <value>The service_connection_id of the stored Apple credentials instead of username, password.</value>
        [DataMember(Name="account_service_connection_id", EmitDefaultValue=false)]
        public string AccountServiceConnectionId { get; set; }

        /// <summary>
        /// When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.
        /// </summary>
        /// <value>When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.</value>
        [DataMember(Name="publish_all_devices", EmitDefaultValue=false)]
        public bool? PublishAllDevices { get; set; }

        /// <summary>
        /// Array of device UDID&#x27;s to be published to the Apple Developer account.
        /// </summary>
        /// <value>Array of device UDID&#x27;s to be published to the Apple Developer account.</value>
        [DataMember(Name="devices", EmitDefaultValue=false)]
        public List<string> Devices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublishDevicesRequest {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  AccountServiceConnectionId: ").Append(AccountServiceConnectionId).Append("\n");
            sb.Append("  PublishAllDevices: ").Append(PublishAllDevices).Append("\n");
            sb.Append("  Devices: ").Append(Devices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublishDevicesRequest);
        }

        /// <summary>
        /// Returns true if PublishDevicesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PublishDevicesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublishDevicesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.AccountServiceConnectionId == input.AccountServiceConnectionId ||
                    (this.AccountServiceConnectionId != null &&
                    this.AccountServiceConnectionId.Equals(input.AccountServiceConnectionId))
                ) && 
                (
                    this.PublishAllDevices == input.PublishAllDevices ||
                    (this.PublishAllDevices != null &&
                    this.PublishAllDevices.Equals(input.PublishAllDevices))
                ) && 
                (
                    this.Devices == input.Devices ||
                    this.Devices != null &&
                    input.Devices != null &&
                    this.Devices.SequenceEqual(input.Devices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.AccountServiceConnectionId != null)
                    hashCode = hashCode * 59 + this.AccountServiceConnectionId.GetHashCode();
                if (this.PublishAllDevices != null)
                    hashCode = hashCode * 59 + this.PublishAllDevices.GetHashCode();
                if (this.Devices != null)
                    hashCode = hashCode * 59 + this.Devices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
