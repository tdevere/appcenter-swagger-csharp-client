/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DistributionGroupDetailsResponse
    /// </summary>
    [DataContract]
        public partial class DistributionGroupDetailsResponse :  IEquatable<DistributionGroupDetailsResponse>, IValidatableObject
    {
        /// <summary>
        /// Type of group (Default, HockeyAppDefault or MicrosoftDogfooding)
        /// </summary>
        /// <value>Type of group (Default, HockeyAppDefault or MicrosoftDogfooding)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum GroupTypeEnum
        {
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,
            /// <summary>
            /// Enum HockeyAppDefault for value: HockeyAppDefault
            /// </summary>
            [EnumMember(Value = "HockeyAppDefault")]
            HockeyAppDefault = 2,
            /// <summary>
            /// Enum MicrosoftDogfooding for value: MicrosoftDogfooding
            /// </summary>
            [EnumMember(Value = "MicrosoftDogfooding")]
            MicrosoftDogfooding = 3        }
        /// <summary>
        /// Type of group (Default, HockeyAppDefault or MicrosoftDogfooding)
        /// </summary>
        /// <value>Type of group (Default, HockeyAppDefault or MicrosoftDogfooding)</value>
        [DataMember(Name="group_type", EmitDefaultValue=false)]
        public GroupTypeEnum? GroupType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DistributionGroupDetailsResponse" /> class.
        /// </summary>
        /// <param name="isShared">Whether the distribution group is shared group or not.</param>
        /// <param name="totalAppsCount">The count of apps associated with this distribution group.</param>
        /// <param name="totalUserCount">The count of users in the distribution group.</param>
        /// <param name="notifiedUserCount">The count of non-pending users in the distribution group who will be notified by new releases.</param>
        /// <param name="groupType">Type of group (Default, HockeyAppDefault or MicrosoftDogfooding).</param>
        /// <param name="users">The distribution group users.</param>
        public DistributionGroupDetailsResponse(bool? isShared = default(bool?), decimal? totalAppsCount = default(decimal?), decimal? totalUserCount = default(decimal?), decimal? notifiedUserCount = default(decimal?), GroupTypeEnum? groupType = default(GroupTypeEnum?), List<InlineResponse2009> users = default(List<InlineResponse2009>))
        {
            this.IsShared = isShared;
            this.TotalAppsCount = totalAppsCount;
            this.TotalUserCount = totalUserCount;
            this.NotifiedUserCount = notifiedUserCount;
            this.GroupType = groupType;
            this.Users = users;
        }
        
        /// <summary>
        /// Whether the distribution group is shared group or not
        /// </summary>
        /// <value>Whether the distribution group is shared group or not</value>
        [DataMember(Name="is_shared", EmitDefaultValue=false)]
        public bool? IsShared { get; set; }

        /// <summary>
        /// The count of apps associated with this distribution group
        /// </summary>
        /// <value>The count of apps associated with this distribution group</value>
        [DataMember(Name="total_apps_count", EmitDefaultValue=false)]
        public decimal? TotalAppsCount { get; set; }

        /// <summary>
        /// The count of users in the distribution group
        /// </summary>
        /// <value>The count of users in the distribution group</value>
        [DataMember(Name="total_user_count", EmitDefaultValue=false)]
        public decimal? TotalUserCount { get; set; }

        /// <summary>
        /// The count of non-pending users in the distribution group who will be notified by new releases
        /// </summary>
        /// <value>The count of non-pending users in the distribution group who will be notified by new releases</value>
        [DataMember(Name="notified_user_count", EmitDefaultValue=false)]
        public decimal? NotifiedUserCount { get; set; }


        /// <summary>
        /// The distribution group users
        /// </summary>
        /// <value>The distribution group users</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<InlineResponse2009> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DistributionGroupDetailsResponse {\n");
            sb.Append("  IsShared: ").Append(IsShared).Append("\n");
            sb.Append("  TotalAppsCount: ").Append(TotalAppsCount).Append("\n");
            sb.Append("  TotalUserCount: ").Append(TotalUserCount).Append("\n");
            sb.Append("  NotifiedUserCount: ").Append(NotifiedUserCount).Append("\n");
            sb.Append("  GroupType: ").Append(GroupType).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DistributionGroupDetailsResponse);
        }

        /// <summary>
        /// Returns true if DistributionGroupDetailsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DistributionGroupDetailsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DistributionGroupDetailsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsShared == input.IsShared ||
                    (this.IsShared != null &&
                    this.IsShared.Equals(input.IsShared))
                ) && 
                (
                    this.TotalAppsCount == input.TotalAppsCount ||
                    (this.TotalAppsCount != null &&
                    this.TotalAppsCount.Equals(input.TotalAppsCount))
                ) && 
                (
                    this.TotalUserCount == input.TotalUserCount ||
                    (this.TotalUserCount != null &&
                    this.TotalUserCount.Equals(input.TotalUserCount))
                ) && 
                (
                    this.NotifiedUserCount == input.NotifiedUserCount ||
                    (this.NotifiedUserCount != null &&
                    this.NotifiedUserCount.Equals(input.NotifiedUserCount))
                ) && 
                (
                    this.GroupType == input.GroupType ||
                    (this.GroupType != null &&
                    this.GroupType.Equals(input.GroupType))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsShared != null)
                    hashCode = hashCode * 59 + this.IsShared.GetHashCode();
                if (this.TotalAppsCount != null)
                    hashCode = hashCode * 59 + this.TotalAppsCount.GetHashCode();
                if (this.TotalUserCount != null)
                    hashCode = hashCode * 59 + this.TotalUserCount.GetHashCode();
                if (this.NotifiedUserCount != null)
                    hashCode = hashCode * 59 + this.NotifiedUserCount.GetHashCode();
                if (this.GroupType != null)
                    hashCode = hashCode * 59 + this.GroupType.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
