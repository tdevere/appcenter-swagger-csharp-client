/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Details of an uploaded release
    /// </summary>
    [DataContract]
        public partial class InlineResponse20056 :  IEquatable<InlineResponse20056>, IValidatableObject
    {
        /// <summary>
        /// OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#x27;available&#x27; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; 
        /// </summary>
        /// <value>OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#x27;available&#x27; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Available for value: available
            /// </summary>
            [EnumMember(Value = "available")]
            Available = 1,
            /// <summary>
            /// Enum Unavailable for value: unavailable
            /// </summary>
            [EnumMember(Value = "unavailable")]
            Unavailable = 2        }
        /// <summary>
        /// OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#x27;available&#x27; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; 
        /// </summary>
        /// <value>OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#x27;available&#x27; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;
        /// </summary>
        /// <value>The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum InstallUrlEnum
        {
            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            [EnumMember(Value = "group")]
            Group = 1,
            /// <summary>
            /// Enum Store for value: store
            /// </summary>
            [EnumMember(Value = "store")]
            Store = 2        }
        /// <summary>
        /// The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;
        /// </summary>
        /// <value>The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;</value>
        [DataMember(Name="install_url", EmitDefaultValue=false)]
        public InstallUrlEnum? InstallUrl { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20056" /> class.
        /// </summary>
        /// <param name="id">ID identifying this unique release..</param>
        /// <param name="status">OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#x27;available&#x27; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; .</param>
        /// <param name="appName">The app&#x27;s name (extracted from the uploaded release)..</param>
        /// <param name="appDisplayName">The app&#x27;s display name..</param>
        /// <param name="version">The release&#x27;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. .</param>
        /// <param name="shortVersion">The release&#x27;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. .</param>
        /// <param name="releaseNotes">The release&#x27;s release notes..</param>
        /// <param name="size">The release&#x27;s size in bytes..</param>
        /// <param name="minOs">The release&#x27;s minimum required operating system..</param>
        /// <param name="androidMinApiLevel">The release&#x27;s minimum required Android API level..</param>
        /// <param name="bundleIdentifier">The identifier of the apps bundle..</param>
        /// <param name="fingerprint">MD5 checksum of the release binary..</param>
        /// <param name="uploadedAt">UTC time in ISO 8601 format of the uploaded time..</param>
        /// <param name="downloadUrl">The URL that hosts the binary for this release..</param>
        /// <param name="installUrl">The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;.</param>
        /// <param name="distributionStores">a list of distribution stores that are associated with this release..</param>
        public InlineResponse20056(decimal? id = default(decimal?), StatusEnum? status = default(StatusEnum?), string appName = default(string), string appDisplayName = default(string), string version = default(string), string shortVersion = default(string), string releaseNotes = default(string), decimal? size = default(decimal?), string minOs = default(string), string androidMinApiLevel = default(string), string bundleIdentifier = default(string), string fingerprint = default(string), string uploadedAt = default(string), string downloadUrl = default(string), InstallUrlEnum? installUrl = default(InstallUrlEnum?), List<V01appsownerNameappNamedistributionStoresstoreNamereleasesreleaseIdDistributionStores> distributionStores = default(List<V01appsownerNameappNamedistributionStoresstoreNamereleasesreleaseIdDistributionStores>))
        {
            this.Id = id;
            this.Status = status;
            this.AppName = appName;
            this.AppDisplayName = appDisplayName;
            this.Version = version;
            this.ShortVersion = shortVersion;
            this.ReleaseNotes = releaseNotes;
            this.Size = size;
            this.MinOs = minOs;
            this.AndroidMinApiLevel = androidMinApiLevel;
            this.BundleIdentifier = bundleIdentifier;
            this.Fingerprint = fingerprint;
            this.UploadedAt = uploadedAt;
            this.DownloadUrl = downloadUrl;
            this.InstallUrl = installUrl;
            this.DistributionStores = distributionStores;
        }
        
        /// <summary>
        /// ID identifying this unique release.
        /// </summary>
        /// <value>ID identifying this unique release.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }


        /// <summary>
        /// The app&#x27;s name (extracted from the uploaded release).
        /// </summary>
        /// <value>The app&#x27;s name (extracted from the uploaded release).</value>
        [DataMember(Name="app_name", EmitDefaultValue=false)]
        public string AppName { get; set; }

        /// <summary>
        /// The app&#x27;s display name.
        /// </summary>
        /// <value>The app&#x27;s display name.</value>
        [DataMember(Name="app_display_name", EmitDefaultValue=false)]
        public string AppDisplayName { get; set; }

        /// <summary>
        /// The release&#x27;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 
        /// </summary>
        /// <value>The release&#x27;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. </value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// The release&#x27;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 
        /// </summary>
        /// <value>The release&#x27;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. </value>
        [DataMember(Name="short_version", EmitDefaultValue=false)]
        public string ShortVersion { get; set; }

        /// <summary>
        /// The release&#x27;s release notes.
        /// </summary>
        /// <value>The release&#x27;s release notes.</value>
        [DataMember(Name="release_notes", EmitDefaultValue=false)]
        public string ReleaseNotes { get; set; }

        /// <summary>
        /// The release&#x27;s size in bytes.
        /// </summary>
        /// <value>The release&#x27;s size in bytes.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public decimal? Size { get; set; }

        /// <summary>
        /// The release&#x27;s minimum required operating system.
        /// </summary>
        /// <value>The release&#x27;s minimum required operating system.</value>
        [DataMember(Name="min_os", EmitDefaultValue=false)]
        public string MinOs { get; set; }

        /// <summary>
        /// The release&#x27;s minimum required Android API level.
        /// </summary>
        /// <value>The release&#x27;s minimum required Android API level.</value>
        [DataMember(Name="android_min_api_level", EmitDefaultValue=false)]
        public string AndroidMinApiLevel { get; set; }

        /// <summary>
        /// The identifier of the apps bundle.
        /// </summary>
        /// <value>The identifier of the apps bundle.</value>
        [DataMember(Name="bundle_identifier", EmitDefaultValue=false)]
        public string BundleIdentifier { get; set; }

        /// <summary>
        /// MD5 checksum of the release binary.
        /// </summary>
        /// <value>MD5 checksum of the release binary.</value>
        [DataMember(Name="fingerprint", EmitDefaultValue=false)]
        public string Fingerprint { get; set; }

        /// <summary>
        /// UTC time in ISO 8601 format of the uploaded time.
        /// </summary>
        /// <value>UTC time in ISO 8601 format of the uploaded time.</value>
        [DataMember(Name="uploaded_at", EmitDefaultValue=false)]
        public string UploadedAt { get; set; }

        /// <summary>
        /// The URL that hosts the binary for this release.
        /// </summary>
        /// <value>The URL that hosts the binary for this release.</value>
        [DataMember(Name="download_url", EmitDefaultValue=false)]
        public string DownloadUrl { get; set; }


        /// <summary>
        /// a list of distribution stores that are associated with this release.
        /// </summary>
        /// <value>a list of distribution stores that are associated with this release.</value>
        [DataMember(Name="distribution_stores", EmitDefaultValue=false)]
        public List<V01appsownerNameappNamedistributionStoresstoreNamereleasesreleaseIdDistributionStores> DistributionStores { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20056 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppDisplayName: ").Append(AppDisplayName).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  ShortVersion: ").Append(ShortVersion).Append("\n");
            sb.Append("  ReleaseNotes: ").Append(ReleaseNotes).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  MinOs: ").Append(MinOs).Append("\n");
            sb.Append("  AndroidMinApiLevel: ").Append(AndroidMinApiLevel).Append("\n");
            sb.Append("  BundleIdentifier: ").Append(BundleIdentifier).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  UploadedAt: ").Append(UploadedAt).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  InstallUrl: ").Append(InstallUrl).Append("\n");
            sb.Append("  DistributionStores: ").Append(DistributionStores).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20056);
        }

        /// <summary>
        /// Returns true if InlineResponse20056 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20056 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20056 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.AppDisplayName == input.AppDisplayName ||
                    (this.AppDisplayName != null &&
                    this.AppDisplayName.Equals(input.AppDisplayName))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.ShortVersion == input.ShortVersion ||
                    (this.ShortVersion != null &&
                    this.ShortVersion.Equals(input.ShortVersion))
                ) && 
                (
                    this.ReleaseNotes == input.ReleaseNotes ||
                    (this.ReleaseNotes != null &&
                    this.ReleaseNotes.Equals(input.ReleaseNotes))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.MinOs == input.MinOs ||
                    (this.MinOs != null &&
                    this.MinOs.Equals(input.MinOs))
                ) && 
                (
                    this.AndroidMinApiLevel == input.AndroidMinApiLevel ||
                    (this.AndroidMinApiLevel != null &&
                    this.AndroidMinApiLevel.Equals(input.AndroidMinApiLevel))
                ) && 
                (
                    this.BundleIdentifier == input.BundleIdentifier ||
                    (this.BundleIdentifier != null &&
                    this.BundleIdentifier.Equals(input.BundleIdentifier))
                ) && 
                (
                    this.Fingerprint == input.Fingerprint ||
                    (this.Fingerprint != null &&
                    this.Fingerprint.Equals(input.Fingerprint))
                ) && 
                (
                    this.UploadedAt == input.UploadedAt ||
                    (this.UploadedAt != null &&
                    this.UploadedAt.Equals(input.UploadedAt))
                ) && 
                (
                    this.DownloadUrl == input.DownloadUrl ||
                    (this.DownloadUrl != null &&
                    this.DownloadUrl.Equals(input.DownloadUrl))
                ) && 
                (
                    this.InstallUrl == input.InstallUrl ||
                    (this.InstallUrl != null &&
                    this.InstallUrl.Equals(input.InstallUrl))
                ) && 
                (
                    this.DistributionStores == input.DistributionStores ||
                    this.DistributionStores != null &&
                    input.DistributionStores != null &&
                    this.DistributionStores.SequenceEqual(input.DistributionStores)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.AppName != null)
                    hashCode = hashCode * 59 + this.AppName.GetHashCode();
                if (this.AppDisplayName != null)
                    hashCode = hashCode * 59 + this.AppDisplayName.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.ShortVersion != null)
                    hashCode = hashCode * 59 + this.ShortVersion.GetHashCode();
                if (this.ReleaseNotes != null)
                    hashCode = hashCode * 59 + this.ReleaseNotes.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.MinOs != null)
                    hashCode = hashCode * 59 + this.MinOs.GetHashCode();
                if (this.AndroidMinApiLevel != null)
                    hashCode = hashCode * 59 + this.AndroidMinApiLevel.GetHashCode();
                if (this.BundleIdentifier != null)
                    hashCode = hashCode * 59 + this.BundleIdentifier.GetHashCode();
                if (this.Fingerprint != null)
                    hashCode = hashCode * 59 + this.Fingerprint.GetHashCode();
                if (this.UploadedAt != null)
                    hashCode = hashCode * 59 + this.UploadedAt.GetHashCode();
                if (this.DownloadUrl != null)
                    hashCode = hashCode * 59 + this.DownloadUrl.GetHashCode();
                if (this.InstallUrl != null)
                    hashCode = hashCode * 59 + this.InstallUrl.GetHashCode();
                if (this.DistributionStores != null)
                    hashCode = hashCode * 59 + this.DistributionStores.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
