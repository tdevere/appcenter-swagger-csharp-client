/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// XcodeToolset
    /// </summary>
    [DataContract]
        public partial class XcodeToolset :  IEquatable<XcodeToolset>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XcodeToolset" /> class.
        /// </summary>
        /// <param name="xcodeSchemeContainers">The Xcode scheme containers (required).</param>
        public XcodeToolset(List<XcodeToolsetXcodeSchemeContainers> xcodeSchemeContainers = default(List<XcodeToolsetXcodeSchemeContainers>))
        {
            // to ensure "xcodeSchemeContainers" is required (not null)
            if (xcodeSchemeContainers == null)
            {
                throw new InvalidDataException("xcodeSchemeContainers is a required property for XcodeToolset and cannot be null");
            }
            else
            {
                this.XcodeSchemeContainers = xcodeSchemeContainers;
            }
        }
        
        /// <summary>
        /// The Xcode scheme containers
        /// </summary>
        /// <value>The Xcode scheme containers</value>
        [DataMember(Name="xcodeSchemeContainers", EmitDefaultValue=false)]
        public List<XcodeToolsetXcodeSchemeContainers> XcodeSchemeContainers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XcodeToolset {\n");
            sb.Append("  XcodeSchemeContainers: ").Append(XcodeSchemeContainers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XcodeToolset);
        }

        /// <summary>
        /// Returns true if XcodeToolset instances are equal
        /// </summary>
        /// <param name="input">Instance of XcodeToolset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XcodeToolset input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.XcodeSchemeContainers == input.XcodeSchemeContainers ||
                    this.XcodeSchemeContainers != null &&
                    input.XcodeSchemeContainers != null &&
                    this.XcodeSchemeContainers.SequenceEqual(input.XcodeSchemeContainers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.XcodeSchemeContainers != null)
                    hashCode = hashCode * 59 + this.XcodeSchemeContainers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
