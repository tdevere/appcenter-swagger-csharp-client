/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Audience definition.
    /// </summary>
    [DataContract]
        public partial class AudienceListResultValues :  IEquatable<AudienceListResultValues>, IValidatableObject
    {
        /// <summary>
        /// Audience state.
        /// </summary>
        /// <value>Audience state.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StateEnum
        {
            /// <summary>
            /// Enum Calculating for value: Calculating
            /// </summary>
            [EnumMember(Value = "Calculating")]
            Calculating = 1,
            /// <summary>
            /// Enum Ready for value: Ready
            /// </summary>
            [EnumMember(Value = "Ready")]
            Ready = 2,
            /// <summary>
            /// Enum Disabled for value: Disabled
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled = 3        }
        /// <summary>
        /// Audience state.
        /// </summary>
        /// <value>Audience state.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceListResultValues" /> class.
        /// </summary>
        /// <param name="name">Audience name..</param>
        /// <param name="description">Audience description..</param>
        /// <param name="estimatedCount">Estimated audience size..</param>
        /// <param name="definition">Audience definition in OData format..</param>
        /// <param name="state">Audience state..</param>
        public AudienceListResultValues(string name = default(string), string description = default(string), long? estimatedCount = default(long?), string definition = default(string), StateEnum? state = default(StateEnum?))
        {
            this.Name = name;
            this.Description = description;
            this.EstimatedCount = estimatedCount;
            this.Definition = definition;
            this.State = state;
        }
        
        /// <summary>
        /// Audience name.
        /// </summary>
        /// <value>Audience name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Audience description.
        /// </summary>
        /// <value>Audience description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Estimated audience size.
        /// </summary>
        /// <value>Estimated audience size.</value>
        [DataMember(Name="estimated_count", EmitDefaultValue=false)]
        public long? EstimatedCount { get; set; }

        /// <summary>
        /// Audience definition in OData format.
        /// </summary>
        /// <value>Audience definition in OData format.</value>
        [DataMember(Name="definition", EmitDefaultValue=false)]
        public string Definition { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudienceListResultValues {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EstimatedCount: ").Append(EstimatedCount).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudienceListResultValues);
        }

        /// <summary>
        /// Returns true if AudienceListResultValues instances are equal
        /// </summary>
        /// <param name="input">Instance of AudienceListResultValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceListResultValues input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EstimatedCount == input.EstimatedCount ||
                    (this.EstimatedCount != null &&
                    this.EstimatedCount.Equals(input.EstimatedCount))
                ) && 
                (
                    this.Definition == input.Definition ||
                    (this.Definition != null &&
                    this.Definition.Equals(input.Definition))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EstimatedCount != null)
                    hashCode = hashCode * 59 + this.EstimatedCount.GetHashCode();
                if (this.Definition != null)
                    hashCode = hashCode * 59 + this.Definition.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
