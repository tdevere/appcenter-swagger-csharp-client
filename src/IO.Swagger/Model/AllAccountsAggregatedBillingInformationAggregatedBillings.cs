/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Aggregated Billing Information for a user or an organization
    /// </summary>
    [DataContract]
        public partial class AllAccountsAggregatedBillingInformationAggregatedBillings :  IEquatable<AllAccountsAggregatedBillingInformationAggregatedBillings>, IValidatableObject
    {
        /// <summary>
        /// State of the Azure subscription used for billing
        /// </summary>
        /// <value>State of the Azure subscription used for billing</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AzureSubscriptionStateEnum
        {
            /// <summary>
            /// Enum Enabled for value: Enabled
            /// </summary>
            [EnumMember(Value = "Enabled")]
            Enabled = 1,
            /// <summary>
            /// Enum Disabled for value: Disabled
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled = 2,
            /// <summary>
            /// Enum NotSet for value: NotSet
            /// </summary>
            [EnumMember(Value = "NotSet")]
            NotSet = 3        }
        /// <summary>
        /// State of the Azure subscription used for billing
        /// </summary>
        /// <value>State of the Azure subscription used for billing</value>
        [DataMember(Name="azureSubscriptionState", EmitDefaultValue=false)]
        public AzureSubscriptionStateEnum? AzureSubscriptionState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AllAccountsAggregatedBillingInformationAggregatedBillings" /> class.
        /// </summary>
        /// <param name="version">Version of the Billing Information schema.</param>
        /// <param name="timestamp">The ISO 8601 datetime of last modification.</param>
        /// <param name="id">ID of the user or organization.</param>
        /// <param name="billingPlans">billingPlans.</param>
        /// <param name="usage">usage.</param>
        /// <param name="azureSubscriptionId">Unique identifier for the Azure subscription used for billing.</param>
        /// <param name="azureSubscriptionState">State of the Azure subscription used for billing.</param>
        public AllAccountsAggregatedBillingInformationAggregatedBillings(string version = default(string), string timestamp = default(string), string id = default(string), AggregatedBillingInformationBillingPlans billingPlans = default(AggregatedBillingInformationBillingPlans), AggregatedBillingInformationUsage usage = default(AggregatedBillingInformationUsage), string azureSubscriptionId = default(string), AzureSubscriptionStateEnum? azureSubscriptionState = default(AzureSubscriptionStateEnum?))
        {
            this.Version = version;
            this.Timestamp = timestamp;
            this.Id = id;
            this.BillingPlans = billingPlans;
            this.Usage = usage;
            this.AzureSubscriptionId = azureSubscriptionId;
            this.AzureSubscriptionState = azureSubscriptionState;
        }
        
        /// <summary>
        /// Version of the Billing Information schema
        /// </summary>
        /// <value>Version of the Billing Information schema</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// The ISO 8601 datetime of last modification
        /// </summary>
        /// <value>The ISO 8601 datetime of last modification</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// ID of the user or organization
        /// </summary>
        /// <value>ID of the user or organization</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets BillingPlans
        /// </summary>
        [DataMember(Name="billingPlans", EmitDefaultValue=false)]
        public AggregatedBillingInformationBillingPlans BillingPlans { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name="usage", EmitDefaultValue=false)]
        public AggregatedBillingInformationUsage Usage { get; set; }

        /// <summary>
        /// Unique identifier for the Azure subscription used for billing
        /// </summary>
        /// <value>Unique identifier for the Azure subscription used for billing</value>
        [DataMember(Name="azureSubscriptionId", EmitDefaultValue=false)]
        public string AzureSubscriptionId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AllAccountsAggregatedBillingInformationAggregatedBillings {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BillingPlans: ").Append(BillingPlans).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  AzureSubscriptionId: ").Append(AzureSubscriptionId).Append("\n");
            sb.Append("  AzureSubscriptionState: ").Append(AzureSubscriptionState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllAccountsAggregatedBillingInformationAggregatedBillings);
        }

        /// <summary>
        /// Returns true if AllAccountsAggregatedBillingInformationAggregatedBillings instances are equal
        /// </summary>
        /// <param name="input">Instance of AllAccountsAggregatedBillingInformationAggregatedBillings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllAccountsAggregatedBillingInformationAggregatedBillings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BillingPlans == input.BillingPlans ||
                    (this.BillingPlans != null &&
                    this.BillingPlans.Equals(input.BillingPlans))
                ) && 
                (
                    this.Usage == input.Usage ||
                    (this.Usage != null &&
                    this.Usage.Equals(input.Usage))
                ) && 
                (
                    this.AzureSubscriptionId == input.AzureSubscriptionId ||
                    (this.AzureSubscriptionId != null &&
                    this.AzureSubscriptionId.Equals(input.AzureSubscriptionId))
                ) && 
                (
                    this.AzureSubscriptionState == input.AzureSubscriptionState ||
                    (this.AzureSubscriptionState != null &&
                    this.AzureSubscriptionState.Equals(input.AzureSubscriptionState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BillingPlans != null)
                    hashCode = hashCode * 59 + this.BillingPlans.GetHashCode();
                if (this.Usage != null)
                    hashCode = hashCode * 59 + this.Usage.GetHashCode();
                if (this.AzureSubscriptionId != null)
                    hashCode = hashCode * 59 + this.AzureSubscriptionId.GetHashCode();
                if (this.AzureSubscriptionState != null)
                    hashCode = hashCode * 59 + this.AzureSubscriptionState.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
