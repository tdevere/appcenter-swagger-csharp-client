/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Details of an uploaded release
    /// </summary>
    [DataContract]
        public partial class ReleaseDetailsResponse :  IEquatable<ReleaseDetailsResponse>, IValidatableObject
    {
        /// <summary>
        /// The release&#x27;s origin
        /// </summary>
        /// <value>The release&#x27;s origin</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OriginEnum
        {
            /// <summary>
            /// Enum Hockeyapp for value: hockeyapp
            /// </summary>
            [EnumMember(Value = "hockeyapp")]
            Hockeyapp = 1,
            /// <summary>
            /// Enum Appcenter for value: appcenter
            /// </summary>
            [EnumMember(Value = "appcenter")]
            Appcenter = 2        }
        /// <summary>
        /// The release&#x27;s origin
        /// </summary>
        /// <value>The release&#x27;s origin</value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public OriginEnum? Origin { get; set; }
        /// <summary>
        /// The type of the provisioning profile for the requested app version.
        /// </summary>
        /// <value>The type of the provisioning profile for the requested app version.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ProvisioningProfileTypeEnum
        {
            /// <summary>
            /// Enum Adhoc for value: adhoc
            /// </summary>
            [EnumMember(Value = "adhoc")]
            Adhoc = 1,
            /// <summary>
            /// Enum Enterprise for value: enterprise
            /// </summary>
            [EnumMember(Value = "enterprise")]
            Enterprise = 2,
            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 3        }
        /// <summary>
        /// The type of the provisioning profile for the requested app version.
        /// </summary>
        /// <value>The type of the provisioning profile for the requested app version.</value>
        [DataMember(Name="provisioning_profile_type", EmitDefaultValue=false)]
        public ProvisioningProfileTypeEnum? ProvisioningProfileType { get; set; }
        /// <summary>
        /// OBSOLETE. Will be removed in next version. The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned.&lt;br&gt; &lt;b&gt;tester&lt;/b&gt;: The release distributed testers details will be returned.&lt;br&gt; 
        /// </summary>
        /// <value>OBSOLETE. Will be removed in next version. The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned.&lt;br&gt; &lt;b&gt;tester&lt;/b&gt;: The release distributed testers details will be returned.&lt;br&gt; </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DestinationTypeEnum
        {
            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            [EnumMember(Value = "group")]
            Group = 1,
            /// <summary>
            /// Enum Store for value: store
            /// </summary>
            [EnumMember(Value = "store")]
            Store = 2,
            /// <summary>
            /// Enum Tester for value: tester
            /// </summary>
            [EnumMember(Value = "tester")]
            Tester = 3        }
        /// <summary>
        /// OBSOLETE. Will be removed in next version. The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned.&lt;br&gt; &lt;b&gt;tester&lt;/b&gt;: The release distributed testers details will be returned.&lt;br&gt; 
        /// </summary>
        /// <value>OBSOLETE. Will be removed in next version. The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned.&lt;br&gt; &lt;b&gt;tester&lt;/b&gt;: The release distributed testers details will be returned.&lt;br&gt; </value>
        [DataMember(Name="destination_type", EmitDefaultValue=false)]
        public DestinationTypeEnum? DestinationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseDetailsResponse" /> class.
        /// </summary>
        /// <param name="id">ID identifying this unique release. (required).</param>
        /// <param name="appName">The app&#x27;s name (extracted from the uploaded release). (required).</param>
        /// <param name="appDisplayName">The app&#x27;s display name. (required).</param>
        /// <param name="appOs">The app&#x27;s OS..</param>
        /// <param name="version">The release&#x27;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml.  (required).</param>
        /// <param name="origin">The release&#x27;s origin.</param>
        /// <param name="shortVersion">The release&#x27;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml.  (required).</param>
        /// <param name="releaseNotes">The release&#x27;s release notes..</param>
        /// <param name="provisioningProfileName">The release&#x27;s provisioning profile name..</param>
        /// <param name="provisioningProfileType">The type of the provisioning profile for the requested app version..</param>
        /// <param name="provisioningProfileExpiryDate">expiration date of provisioning profile in UTC format..</param>
        /// <param name="isProvisioningProfileSyncing">A flag that determines whether the release&#x27;s provisioning profile is still extracted or not..</param>
        /// <param name="size">The release&#x27;s size in bytes..</param>
        /// <param name="minOs">The release&#x27;s minimum required operating system..</param>
        /// <param name="deviceFamily">The release&#x27;s device family..</param>
        /// <param name="androidMinApiLevel">The release&#x27;s minimum required Android API level..</param>
        /// <param name="bundleIdentifier">The identifier of the apps bundle..</param>
        /// <param name="packageHashes">Hashes for the packages..</param>
        /// <param name="fingerprint">MD5 checksum of the release binary..</param>
        /// <param name="uploadedAt">UTC time in ISO 8601 format of the uploaded time. (required).</param>
        /// <param name="downloadUrl">The URL that hosts the binary for this release..</param>
        /// <param name="secondaryDownloadUrl">The URL that hosts the secondary binary for this release, such as the apk file for aab releases..</param>
        /// <param name="appIconUrl">A URL to the app&#x27;s icon. (required).</param>
        /// <param name="installUrl">The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;.</param>
        /// <param name="destinationType">OBSOLETE. Will be removed in next version. The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned.&lt;br&gt; &lt;b&gt;tester&lt;/b&gt;: The release distributed testers details will be returned.&lt;br&gt; .</param>
        /// <param name="distributionGroups">OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release..</param>
        /// <param name="distributionStores">OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release..</param>
        /// <param name="destinations">A list of distribution groups or stores..</param>
        /// <param name="isUdidProvisioned">In calls that allow passing &#x60;udid&#x60; in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms..</param>
        /// <param name="canResign">In calls that allow passing &#x60;udid&#x60; in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms..</param>
        /// <param name="build">build.</param>
        /// <param name="enabled">This value determines the whether a release currently is enabled or disabled. (required).</param>
        /// <param name="status">Status of the release..</param>
        /// <param name="isExternalBuild">This value determines if a release is external or not..</param>
        public ReleaseDetailsResponse(int? id = default(int?), string appName = default(string), string appDisplayName = default(string), string appOs = default(string), string version = default(string), OriginEnum? origin = default(OriginEnum?), string shortVersion = default(string), string releaseNotes = default(string), string provisioningProfileName = default(string), ProvisioningProfileTypeEnum? provisioningProfileType = default(ProvisioningProfileTypeEnum?), string provisioningProfileExpiryDate = default(string), bool? isProvisioningProfileSyncing = default(bool?), int? size = default(int?), string minOs = default(string), string deviceFamily = default(string), string androidMinApiLevel = default(string), string bundleIdentifier = default(string), List<string> packageHashes = default(List<string>), string fingerprint = default(string), string uploadedAt = default(string), string downloadUrl = default(string), string secondaryDownloadUrl = default(string), string appIconUrl = default(string), string installUrl = default(string), DestinationTypeEnum? destinationType = default(DestinationTypeEnum?), List<ReleaseDetailsResponseDistributionGroups> distributionGroups = default(List<ReleaseDetailsResponseDistributionGroups>), List<ReleaseDetailsResponseDistributionStores> distributionStores = default(List<ReleaseDetailsResponseDistributionStores>), List<AllOfReleaseDetailsResponseDestinationsItems> destinations = default(List<AllOfReleaseDetailsResponseDestinationsItems>), bool? isUdidProvisioned = default(bool?), bool? canResign = default(bool?), V01appsownerNameappNamereleasesreleaseIdBuild build = default(V01appsownerNameappNamereleasesreleaseIdBuild), bool? enabled = default(bool?), string status = default(string), bool? isExternalBuild = default(bool?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ReleaseDetailsResponse and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "appName" is required (not null)
            if (appName == null)
            {
                throw new InvalidDataException("appName is a required property for ReleaseDetailsResponse and cannot be null");
            }
            else
            {
                this.AppName = appName;
            }
            // to ensure "appDisplayName" is required (not null)
            if (appDisplayName == null)
            {
                throw new InvalidDataException("appDisplayName is a required property for ReleaseDetailsResponse and cannot be null");
            }
            else
            {
                this.AppDisplayName = appDisplayName;
            }
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for ReleaseDetailsResponse and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            // to ensure "shortVersion" is required (not null)
            if (shortVersion == null)
            {
                throw new InvalidDataException("shortVersion is a required property for ReleaseDetailsResponse and cannot be null");
            }
            else
            {
                this.ShortVersion = shortVersion;
            }
            // to ensure "uploadedAt" is required (not null)
            if (uploadedAt == null)
            {
                throw new InvalidDataException("uploadedAt is a required property for ReleaseDetailsResponse and cannot be null");
            }
            else
            {
                this.UploadedAt = uploadedAt;
            }
            // to ensure "appIconUrl" is required (not null)
            if (appIconUrl == null)
            {
                throw new InvalidDataException("appIconUrl is a required property for ReleaseDetailsResponse and cannot be null");
            }
            else
            {
                this.AppIconUrl = appIconUrl;
            }
            // to ensure "enabled" is required (not null)
            if (enabled == null)
            {
                throw new InvalidDataException("enabled is a required property for ReleaseDetailsResponse and cannot be null");
            }
            else
            {
                this.Enabled = enabled;
            }
            this.AppOs = appOs;
            this.Origin = origin;
            this.ReleaseNotes = releaseNotes;
            this.ProvisioningProfileName = provisioningProfileName;
            this.ProvisioningProfileType = provisioningProfileType;
            this.ProvisioningProfileExpiryDate = provisioningProfileExpiryDate;
            this.IsProvisioningProfileSyncing = isProvisioningProfileSyncing;
            this.Size = size;
            this.MinOs = minOs;
            this.DeviceFamily = deviceFamily;
            this.AndroidMinApiLevel = androidMinApiLevel;
            this.BundleIdentifier = bundleIdentifier;
            this.PackageHashes = packageHashes;
            this.Fingerprint = fingerprint;
            this.DownloadUrl = downloadUrl;
            this.SecondaryDownloadUrl = secondaryDownloadUrl;
            this.InstallUrl = installUrl;
            this.DestinationType = destinationType;
            this.DistributionGroups = distributionGroups;
            this.DistributionStores = distributionStores;
            this.Destinations = destinations;
            this.IsUdidProvisioned = isUdidProvisioned;
            this.CanResign = canResign;
            this.Build = build;
            this.Status = status;
            this.IsExternalBuild = isExternalBuild;
        }
        
        /// <summary>
        /// ID identifying this unique release.
        /// </summary>
        /// <value>ID identifying this unique release.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The app&#x27;s name (extracted from the uploaded release).
        /// </summary>
        /// <value>The app&#x27;s name (extracted from the uploaded release).</value>
        [DataMember(Name="app_name", EmitDefaultValue=false)]
        public string AppName { get; set; }

        /// <summary>
        /// The app&#x27;s display name.
        /// </summary>
        /// <value>The app&#x27;s display name.</value>
        [DataMember(Name="app_display_name", EmitDefaultValue=false)]
        public string AppDisplayName { get; set; }

        /// <summary>
        /// The app&#x27;s OS.
        /// </summary>
        /// <value>The app&#x27;s OS.</value>
        [DataMember(Name="app_os", EmitDefaultValue=false)]
        public string AppOs { get; set; }

        /// <summary>
        /// The release&#x27;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 
        /// </summary>
        /// <value>The release&#x27;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. </value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }


        /// <summary>
        /// The release&#x27;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 
        /// </summary>
        /// <value>The release&#x27;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. </value>
        [DataMember(Name="short_version", EmitDefaultValue=false)]
        public string ShortVersion { get; set; }

        /// <summary>
        /// The release&#x27;s release notes.
        /// </summary>
        /// <value>The release&#x27;s release notes.</value>
        [DataMember(Name="release_notes", EmitDefaultValue=false)]
        public string ReleaseNotes { get; set; }

        /// <summary>
        /// The release&#x27;s provisioning profile name.
        /// </summary>
        /// <value>The release&#x27;s provisioning profile name.</value>
        [DataMember(Name="provisioning_profile_name", EmitDefaultValue=false)]
        public string ProvisioningProfileName { get; set; }


        /// <summary>
        /// expiration date of provisioning profile in UTC format.
        /// </summary>
        /// <value>expiration date of provisioning profile in UTC format.</value>
        [DataMember(Name="provisioning_profile_expiry_date", EmitDefaultValue=false)]
        public string ProvisioningProfileExpiryDate { get; set; }

        /// <summary>
        /// A flag that determines whether the release&#x27;s provisioning profile is still extracted or not.
        /// </summary>
        /// <value>A flag that determines whether the release&#x27;s provisioning profile is still extracted or not.</value>
        [DataMember(Name="is_provisioning_profile_syncing", EmitDefaultValue=false)]
        public bool? IsProvisioningProfileSyncing { get; set; }

        /// <summary>
        /// The release&#x27;s size in bytes.
        /// </summary>
        /// <value>The release&#x27;s size in bytes.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// The release&#x27;s minimum required operating system.
        /// </summary>
        /// <value>The release&#x27;s minimum required operating system.</value>
        [DataMember(Name="min_os", EmitDefaultValue=false)]
        public string MinOs { get; set; }

        /// <summary>
        /// The release&#x27;s device family.
        /// </summary>
        /// <value>The release&#x27;s device family.</value>
        [DataMember(Name="device_family", EmitDefaultValue=false)]
        public string DeviceFamily { get; set; }

        /// <summary>
        /// The release&#x27;s minimum required Android API level.
        /// </summary>
        /// <value>The release&#x27;s minimum required Android API level.</value>
        [DataMember(Name="android_min_api_level", EmitDefaultValue=false)]
        public string AndroidMinApiLevel { get; set; }

        /// <summary>
        /// The identifier of the apps bundle.
        /// </summary>
        /// <value>The identifier of the apps bundle.</value>
        [DataMember(Name="bundle_identifier", EmitDefaultValue=false)]
        public string BundleIdentifier { get; set; }

        /// <summary>
        /// Hashes for the packages.
        /// </summary>
        /// <value>Hashes for the packages.</value>
        [DataMember(Name="package_hashes", EmitDefaultValue=false)]
        public List<string> PackageHashes { get; set; }

        /// <summary>
        /// MD5 checksum of the release binary.
        /// </summary>
        /// <value>MD5 checksum of the release binary.</value>
        [DataMember(Name="fingerprint", EmitDefaultValue=false)]
        public string Fingerprint { get; set; }

        /// <summary>
        /// UTC time in ISO 8601 format of the uploaded time.
        /// </summary>
        /// <value>UTC time in ISO 8601 format of the uploaded time.</value>
        [DataMember(Name="uploaded_at", EmitDefaultValue=false)]
        public string UploadedAt { get; set; }

        /// <summary>
        /// The URL that hosts the binary for this release.
        /// </summary>
        /// <value>The URL that hosts the binary for this release.</value>
        [DataMember(Name="download_url", EmitDefaultValue=false)]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// The URL that hosts the secondary binary for this release, such as the apk file for aab releases.
        /// </summary>
        /// <value>The URL that hosts the secondary binary for this release, such as the apk file for aab releases.</value>
        [DataMember(Name="secondary_download_url", EmitDefaultValue=false)]
        public string SecondaryDownloadUrl { get; set; }

        /// <summary>
        /// A URL to the app&#x27;s icon.
        /// </summary>
        /// <value>A URL to the app&#x27;s icon.</value>
        [DataMember(Name="app_icon_url", EmitDefaultValue=false)]
        public string AppIconUrl { get; set; }

        /// <summary>
        /// The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;
        /// </summary>
        /// <value>The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;</value>
        [DataMember(Name="install_url", EmitDefaultValue=false)]
        public string InstallUrl { get; set; }


        /// <summary>
        /// OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.
        /// </summary>
        /// <value>OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.</value>
        [DataMember(Name="distribution_groups", EmitDefaultValue=false)]
        public List<ReleaseDetailsResponseDistributionGroups> DistributionGroups { get; set; }

        /// <summary>
        /// OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.
        /// </summary>
        /// <value>OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.</value>
        [DataMember(Name="distribution_stores", EmitDefaultValue=false)]
        public List<ReleaseDetailsResponseDistributionStores> DistributionStores { get; set; }

        /// <summary>
        /// A list of distribution groups or stores.
        /// </summary>
        /// <value>A list of distribution groups or stores.</value>
        [DataMember(Name="destinations", EmitDefaultValue=false)]
        public List<AllOfReleaseDetailsResponseDestinationsItems> Destinations { get; set; }

        /// <summary>
        /// In calls that allow passing &#x60;udid&#x60; in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.
        /// </summary>
        /// <value>In calls that allow passing &#x60;udid&#x60; in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.</value>
        [DataMember(Name="is_udid_provisioned", EmitDefaultValue=false)]
        public bool? IsUdidProvisioned { get; set; }

        /// <summary>
        /// In calls that allow passing &#x60;udid&#x60; in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.
        /// </summary>
        /// <value>In calls that allow passing &#x60;udid&#x60; in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.</value>
        [DataMember(Name="can_resign", EmitDefaultValue=false)]
        public bool? CanResign { get; set; }

        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name="build", EmitDefaultValue=false)]
        public V01appsownerNameappNamereleasesreleaseIdBuild Build { get; set; }

        /// <summary>
        /// This value determines the whether a release currently is enabled or disabled.
        /// </summary>
        /// <value>This value determines the whether a release currently is enabled or disabled.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Status of the release.
        /// </summary>
        /// <value>Status of the release.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// This value determines if a release is external or not.
        /// </summary>
        /// <value>This value determines if a release is external or not.</value>
        [DataMember(Name="is_external_build", EmitDefaultValue=false)]
        public bool? IsExternalBuild { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReleaseDetailsResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppDisplayName: ").Append(AppDisplayName).Append("\n");
            sb.Append("  AppOs: ").Append(AppOs).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  ShortVersion: ").Append(ShortVersion).Append("\n");
            sb.Append("  ReleaseNotes: ").Append(ReleaseNotes).Append("\n");
            sb.Append("  ProvisioningProfileName: ").Append(ProvisioningProfileName).Append("\n");
            sb.Append("  ProvisioningProfileType: ").Append(ProvisioningProfileType).Append("\n");
            sb.Append("  ProvisioningProfileExpiryDate: ").Append(ProvisioningProfileExpiryDate).Append("\n");
            sb.Append("  IsProvisioningProfileSyncing: ").Append(IsProvisioningProfileSyncing).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  MinOs: ").Append(MinOs).Append("\n");
            sb.Append("  DeviceFamily: ").Append(DeviceFamily).Append("\n");
            sb.Append("  AndroidMinApiLevel: ").Append(AndroidMinApiLevel).Append("\n");
            sb.Append("  BundleIdentifier: ").Append(BundleIdentifier).Append("\n");
            sb.Append("  PackageHashes: ").Append(PackageHashes).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  UploadedAt: ").Append(UploadedAt).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  SecondaryDownloadUrl: ").Append(SecondaryDownloadUrl).Append("\n");
            sb.Append("  AppIconUrl: ").Append(AppIconUrl).Append("\n");
            sb.Append("  InstallUrl: ").Append(InstallUrl).Append("\n");
            sb.Append("  DestinationType: ").Append(DestinationType).Append("\n");
            sb.Append("  DistributionGroups: ").Append(DistributionGroups).Append("\n");
            sb.Append("  DistributionStores: ").Append(DistributionStores).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  IsUdidProvisioned: ").Append(IsUdidProvisioned).Append("\n");
            sb.Append("  CanResign: ").Append(CanResign).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IsExternalBuild: ").Append(IsExternalBuild).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseDetailsResponse);
        }

        /// <summary>
        /// Returns true if ReleaseDetailsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseDetailsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseDetailsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.AppDisplayName == input.AppDisplayName ||
                    (this.AppDisplayName != null &&
                    this.AppDisplayName.Equals(input.AppDisplayName))
                ) && 
                (
                    this.AppOs == input.AppOs ||
                    (this.AppOs != null &&
                    this.AppOs.Equals(input.AppOs))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.ShortVersion == input.ShortVersion ||
                    (this.ShortVersion != null &&
                    this.ShortVersion.Equals(input.ShortVersion))
                ) && 
                (
                    this.ReleaseNotes == input.ReleaseNotes ||
                    (this.ReleaseNotes != null &&
                    this.ReleaseNotes.Equals(input.ReleaseNotes))
                ) && 
                (
                    this.ProvisioningProfileName == input.ProvisioningProfileName ||
                    (this.ProvisioningProfileName != null &&
                    this.ProvisioningProfileName.Equals(input.ProvisioningProfileName))
                ) && 
                (
                    this.ProvisioningProfileType == input.ProvisioningProfileType ||
                    (this.ProvisioningProfileType != null &&
                    this.ProvisioningProfileType.Equals(input.ProvisioningProfileType))
                ) && 
                (
                    this.ProvisioningProfileExpiryDate == input.ProvisioningProfileExpiryDate ||
                    (this.ProvisioningProfileExpiryDate != null &&
                    this.ProvisioningProfileExpiryDate.Equals(input.ProvisioningProfileExpiryDate))
                ) && 
                (
                    this.IsProvisioningProfileSyncing == input.IsProvisioningProfileSyncing ||
                    (this.IsProvisioningProfileSyncing != null &&
                    this.IsProvisioningProfileSyncing.Equals(input.IsProvisioningProfileSyncing))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.MinOs == input.MinOs ||
                    (this.MinOs != null &&
                    this.MinOs.Equals(input.MinOs))
                ) && 
                (
                    this.DeviceFamily == input.DeviceFamily ||
                    (this.DeviceFamily != null &&
                    this.DeviceFamily.Equals(input.DeviceFamily))
                ) && 
                (
                    this.AndroidMinApiLevel == input.AndroidMinApiLevel ||
                    (this.AndroidMinApiLevel != null &&
                    this.AndroidMinApiLevel.Equals(input.AndroidMinApiLevel))
                ) && 
                (
                    this.BundleIdentifier == input.BundleIdentifier ||
                    (this.BundleIdentifier != null &&
                    this.BundleIdentifier.Equals(input.BundleIdentifier))
                ) && 
                (
                    this.PackageHashes == input.PackageHashes ||
                    this.PackageHashes != null &&
                    input.PackageHashes != null &&
                    this.PackageHashes.SequenceEqual(input.PackageHashes)
                ) && 
                (
                    this.Fingerprint == input.Fingerprint ||
                    (this.Fingerprint != null &&
                    this.Fingerprint.Equals(input.Fingerprint))
                ) && 
                (
                    this.UploadedAt == input.UploadedAt ||
                    (this.UploadedAt != null &&
                    this.UploadedAt.Equals(input.UploadedAt))
                ) && 
                (
                    this.DownloadUrl == input.DownloadUrl ||
                    (this.DownloadUrl != null &&
                    this.DownloadUrl.Equals(input.DownloadUrl))
                ) && 
                (
                    this.SecondaryDownloadUrl == input.SecondaryDownloadUrl ||
                    (this.SecondaryDownloadUrl != null &&
                    this.SecondaryDownloadUrl.Equals(input.SecondaryDownloadUrl))
                ) && 
                (
                    this.AppIconUrl == input.AppIconUrl ||
                    (this.AppIconUrl != null &&
                    this.AppIconUrl.Equals(input.AppIconUrl))
                ) && 
                (
                    this.InstallUrl == input.InstallUrl ||
                    (this.InstallUrl != null &&
                    this.InstallUrl.Equals(input.InstallUrl))
                ) && 
                (
                    this.DestinationType == input.DestinationType ||
                    (this.DestinationType != null &&
                    this.DestinationType.Equals(input.DestinationType))
                ) && 
                (
                    this.DistributionGroups == input.DistributionGroups ||
                    this.DistributionGroups != null &&
                    input.DistributionGroups != null &&
                    this.DistributionGroups.SequenceEqual(input.DistributionGroups)
                ) && 
                (
                    this.DistributionStores == input.DistributionStores ||
                    this.DistributionStores != null &&
                    input.DistributionStores != null &&
                    this.DistributionStores.SequenceEqual(input.DistributionStores)
                ) && 
                (
                    this.Destinations == input.Destinations ||
                    this.Destinations != null &&
                    input.Destinations != null &&
                    this.Destinations.SequenceEqual(input.Destinations)
                ) && 
                (
                    this.IsUdidProvisioned == input.IsUdidProvisioned ||
                    (this.IsUdidProvisioned != null &&
                    this.IsUdidProvisioned.Equals(input.IsUdidProvisioned))
                ) && 
                (
                    this.CanResign == input.CanResign ||
                    (this.CanResign != null &&
                    this.CanResign.Equals(input.CanResign))
                ) && 
                (
                    this.Build == input.Build ||
                    (this.Build != null &&
                    this.Build.Equals(input.Build))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.IsExternalBuild == input.IsExternalBuild ||
                    (this.IsExternalBuild != null &&
                    this.IsExternalBuild.Equals(input.IsExternalBuild))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AppName != null)
                    hashCode = hashCode * 59 + this.AppName.GetHashCode();
                if (this.AppDisplayName != null)
                    hashCode = hashCode * 59 + this.AppDisplayName.GetHashCode();
                if (this.AppOs != null)
                    hashCode = hashCode * 59 + this.AppOs.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.ShortVersion != null)
                    hashCode = hashCode * 59 + this.ShortVersion.GetHashCode();
                if (this.ReleaseNotes != null)
                    hashCode = hashCode * 59 + this.ReleaseNotes.GetHashCode();
                if (this.ProvisioningProfileName != null)
                    hashCode = hashCode * 59 + this.ProvisioningProfileName.GetHashCode();
                if (this.ProvisioningProfileType != null)
                    hashCode = hashCode * 59 + this.ProvisioningProfileType.GetHashCode();
                if (this.ProvisioningProfileExpiryDate != null)
                    hashCode = hashCode * 59 + this.ProvisioningProfileExpiryDate.GetHashCode();
                if (this.IsProvisioningProfileSyncing != null)
                    hashCode = hashCode * 59 + this.IsProvisioningProfileSyncing.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.MinOs != null)
                    hashCode = hashCode * 59 + this.MinOs.GetHashCode();
                if (this.DeviceFamily != null)
                    hashCode = hashCode * 59 + this.DeviceFamily.GetHashCode();
                if (this.AndroidMinApiLevel != null)
                    hashCode = hashCode * 59 + this.AndroidMinApiLevel.GetHashCode();
                if (this.BundleIdentifier != null)
                    hashCode = hashCode * 59 + this.BundleIdentifier.GetHashCode();
                if (this.PackageHashes != null)
                    hashCode = hashCode * 59 + this.PackageHashes.GetHashCode();
                if (this.Fingerprint != null)
                    hashCode = hashCode * 59 + this.Fingerprint.GetHashCode();
                if (this.UploadedAt != null)
                    hashCode = hashCode * 59 + this.UploadedAt.GetHashCode();
                if (this.DownloadUrl != null)
                    hashCode = hashCode * 59 + this.DownloadUrl.GetHashCode();
                if (this.SecondaryDownloadUrl != null)
                    hashCode = hashCode * 59 + this.SecondaryDownloadUrl.GetHashCode();
                if (this.AppIconUrl != null)
                    hashCode = hashCode * 59 + this.AppIconUrl.GetHashCode();
                if (this.InstallUrl != null)
                    hashCode = hashCode * 59 + this.InstallUrl.GetHashCode();
                if (this.DestinationType != null)
                    hashCode = hashCode * 59 + this.DestinationType.GetHashCode();
                if (this.DistributionGroups != null)
                    hashCode = hashCode * 59 + this.DistributionGroups.GetHashCode();
                if (this.DistributionStores != null)
                    hashCode = hashCode * 59 + this.DistributionStores.GetHashCode();
                if (this.Destinations != null)
                    hashCode = hashCode * 59 + this.Destinations.GetHashCode();
                if (this.IsUdidProvisioned != null)
                    hashCode = hashCode * 59 + this.IsUdidProvisioned.GetHashCode();
                if (this.CanResign != null)
                    hashCode = hashCode * 59 + this.CanResign.GetHashCode();
                if (this.Build != null)
                    hashCode = hashCode * 59 + this.Build.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.IsExternalBuild != null)
                    hashCode = hashCode * 59 + this.IsExternalBuild.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
