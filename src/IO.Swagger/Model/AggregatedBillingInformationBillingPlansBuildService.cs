/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Billing Plans for a single service
    /// </summary>
    [DataContract]
        public partial class AggregatedBillingInformationBillingPlansBuildService :  IEquatable<AggregatedBillingInformationBillingPlansBuildService>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedBillingInformationBillingPlansBuildService" /> class.
        /// </summary>
        /// <param name="canSelectTrialPlan">Can customer select trial plan for that service (if it exists)?.</param>
        /// <param name="lastTrialPlanExpirationTime">Expiration time of the last selected trial plan. Will be null if trial plan was not used..</param>
        /// <param name="currentBillingPeriod">currentBillingPeriod.</param>
        public AggregatedBillingInformationBillingPlansBuildService(bool? canSelectTrialPlan = default(bool?), string lastTrialPlanExpirationTime = default(string), AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriod currentBillingPeriod = default(AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriod))
        {
            this.CanSelectTrialPlan = canSelectTrialPlan;
            this.LastTrialPlanExpirationTime = lastTrialPlanExpirationTime;
            this.CurrentBillingPeriod = currentBillingPeriod;
        }
        
        /// <summary>
        /// Can customer select trial plan for that service (if it exists)?
        /// </summary>
        /// <value>Can customer select trial plan for that service (if it exists)?</value>
        [DataMember(Name="canSelectTrialPlan", EmitDefaultValue=false)]
        public bool? CanSelectTrialPlan { get; set; }

        /// <summary>
        /// Expiration time of the last selected trial plan. Will be null if trial plan was not used.
        /// </summary>
        /// <value>Expiration time of the last selected trial plan. Will be null if trial plan was not used.</value>
        [DataMember(Name="lastTrialPlanExpirationTime", EmitDefaultValue=false)]
        public string LastTrialPlanExpirationTime { get; set; }

        /// <summary>
        /// Gets or Sets CurrentBillingPeriod
        /// </summary>
        [DataMember(Name="currentBillingPeriod", EmitDefaultValue=false)]
        public AggregatedBillingInformationBillingPlansBuildServiceCurrentBillingPeriod CurrentBillingPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AggregatedBillingInformationBillingPlansBuildService {\n");
            sb.Append("  CanSelectTrialPlan: ").Append(CanSelectTrialPlan).Append("\n");
            sb.Append("  LastTrialPlanExpirationTime: ").Append(LastTrialPlanExpirationTime).Append("\n");
            sb.Append("  CurrentBillingPeriod: ").Append(CurrentBillingPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregatedBillingInformationBillingPlansBuildService);
        }

        /// <summary>
        /// Returns true if AggregatedBillingInformationBillingPlansBuildService instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregatedBillingInformationBillingPlansBuildService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregatedBillingInformationBillingPlansBuildService input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanSelectTrialPlan == input.CanSelectTrialPlan ||
                    (this.CanSelectTrialPlan != null &&
                    this.CanSelectTrialPlan.Equals(input.CanSelectTrialPlan))
                ) && 
                (
                    this.LastTrialPlanExpirationTime == input.LastTrialPlanExpirationTime ||
                    (this.LastTrialPlanExpirationTime != null &&
                    this.LastTrialPlanExpirationTime.Equals(input.LastTrialPlanExpirationTime))
                ) && 
                (
                    this.CurrentBillingPeriod == input.CurrentBillingPeriod ||
                    (this.CurrentBillingPeriod != null &&
                    this.CurrentBillingPeriod.Equals(input.CurrentBillingPeriod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanSelectTrialPlan != null)
                    hashCode = hashCode * 59 + this.CanSelectTrialPlan.GetHashCode();
                if (this.LastTrialPlanExpirationTime != null)
                    hashCode = hashCode * 59 + this.LastTrialPlanExpirationTime.GetHashCode();
                if (this.CurrentBillingPeriod != null)
                    hashCode = hashCode * 59 + this.CurrentBillingPeriod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
