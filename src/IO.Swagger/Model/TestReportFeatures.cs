/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TestReportFeatures
    /// </summary>
    [DataContract]
        public partial class TestReportFeatures :  IEquatable<TestReportFeatures>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestReportFeatures" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="tests">tests.</param>
        /// <param name="failed">failed.</param>
        /// <param name="skipped">skipped.</param>
        /// <param name="peakMemory">peakMemory.</param>
        /// <param name="peakDuration">peakDuration.</param>
        public TestReportFeatures(string name = default(string), List<TestReportTests> tests = default(List<TestReportTests>), decimal? failed = default(decimal?), decimal? skipped = default(decimal?), decimal? peakMemory = default(decimal?), decimal? peakDuration = default(decimal?))
        {
            this.Name = name;
            this.Tests = tests;
            this.Failed = failed;
            this.Skipped = skipped;
            this.PeakMemory = peakMemory;
            this.PeakDuration = peakDuration;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Tests
        /// </summary>
        [DataMember(Name="tests", EmitDefaultValue=false)]
        public List<TestReportTests> Tests { get; set; }

        /// <summary>
        /// Gets or Sets Failed
        /// </summary>
        [DataMember(Name="failed", EmitDefaultValue=false)]
        public decimal? Failed { get; set; }

        /// <summary>
        /// Gets or Sets Skipped
        /// </summary>
        [DataMember(Name="skipped", EmitDefaultValue=false)]
        public decimal? Skipped { get; set; }

        /// <summary>
        /// Gets or Sets PeakMemory
        /// </summary>
        [DataMember(Name="peakMemory", EmitDefaultValue=false)]
        public decimal? PeakMemory { get; set; }

        /// <summary>
        /// Gets or Sets PeakDuration
        /// </summary>
        [DataMember(Name="peakDuration", EmitDefaultValue=false)]
        public decimal? PeakDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestReportFeatures {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tests: ").Append(Tests).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Skipped: ").Append(Skipped).Append("\n");
            sb.Append("  PeakMemory: ").Append(PeakMemory).Append("\n");
            sb.Append("  PeakDuration: ").Append(PeakDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestReportFeatures);
        }

        /// <summary>
        /// Returns true if TestReportFeatures instances are equal
        /// </summary>
        /// <param name="input">Instance of TestReportFeatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestReportFeatures input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Tests == input.Tests ||
                    this.Tests != null &&
                    input.Tests != null &&
                    this.Tests.SequenceEqual(input.Tests)
                ) && 
                (
                    this.Failed == input.Failed ||
                    (this.Failed != null &&
                    this.Failed.Equals(input.Failed))
                ) && 
                (
                    this.Skipped == input.Skipped ||
                    (this.Skipped != null &&
                    this.Skipped.Equals(input.Skipped))
                ) && 
                (
                    this.PeakMemory == input.PeakMemory ||
                    (this.PeakMemory != null &&
                    this.PeakMemory.Equals(input.PeakMemory))
                ) && 
                (
                    this.PeakDuration == input.PeakDuration ||
                    (this.PeakDuration != null &&
                    this.PeakDuration.Equals(input.PeakDuration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Tests != null)
                    hashCode = hashCode * 59 + this.Tests.GetHashCode();
                if (this.Failed != null)
                    hashCode = hashCode * 59 + this.Failed.GetHashCode();
                if (this.Skipped != null)
                    hashCode = hashCode * 59 + this.Skipped.GetHashCode();
                if (this.PeakMemory != null)
                    hashCode = hashCode * 59 + this.PeakMemory.GetHashCode();
                if (this.PeakDuration != null)
                    hashCode = hashCode * 59 + this.PeakDuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
