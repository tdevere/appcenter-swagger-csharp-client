/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LegacyAccountResponseAccount
    /// </summary>
    [DataContract]
        public partial class LegacyAccountResponseAccount :  IEquatable<LegacyAccountResponseAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegacyAccountResponseAccount" /> class.
        /// </summary>
        /// <param name="name">The account name of the calling user..</param>
        /// <param name="email">The calling user&#x27;s email..</param>
        /// <param name="linkedProviders">Array of linked authentication providers associated with the account..</param>
        public LegacyAccountResponseAccount(string name = default(string), string email = default(string), List<string> linkedProviders = default(List<string>))
        {
            this.Name = name;
            this.Email = email;
            this.LinkedProviders = linkedProviders;
        }
        
        /// <summary>
        /// The account name of the calling user.
        /// </summary>
        /// <value>The account name of the calling user.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The calling user&#x27;s email.
        /// </summary>
        /// <value>The calling user&#x27;s email.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Array of linked authentication providers associated with the account.
        /// </summary>
        /// <value>Array of linked authentication providers associated with the account.</value>
        [DataMember(Name="linkedProviders", EmitDefaultValue=false)]
        public List<string> LinkedProviders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LegacyAccountResponseAccount {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  LinkedProviders: ").Append(LinkedProviders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LegacyAccountResponseAccount);
        }

        /// <summary>
        /// Returns true if LegacyAccountResponseAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of LegacyAccountResponseAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegacyAccountResponseAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.LinkedProviders == input.LinkedProviders ||
                    this.LinkedProviders != null &&
                    input.LinkedProviders != null &&
                    this.LinkedProviders.SequenceEqual(input.LinkedProviders)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.LinkedProviders != null)
                    hashCode = hashCode * 59 + this.LinkedProviders.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
