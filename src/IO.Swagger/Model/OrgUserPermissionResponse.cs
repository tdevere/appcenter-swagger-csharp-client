/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OrgUserPermissionResponse
    /// </summary>
    [DataContract]
        public partial class OrgUserPermissionResponse :  IEquatable<OrgUserPermissionResponse>, IValidatableObject
    {
        /// <summary>
        /// The user role for the org
        /// </summary>
        /// <value>The user role for the org</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UserRoleEnum
        {
            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            [EnumMember(Value = "admin")]
            Admin = 1,
            /// <summary>
            /// Enum Collaborator for value: collaborator
            /// </summary>
            [EnumMember(Value = "collaborator")]
            Collaborator = 2        }
        /// <summary>
        /// The user role for the org
        /// </summary>
        /// <value>The user role for the org</value>
        [DataMember(Name="userRole", EmitDefaultValue=false)]
        public UserRoleEnum UserRole { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgUserPermissionResponse" /> class.
        /// </summary>
        /// <param name="orgId">The unique id (UUID) of the org (required).</param>
        /// <param name="userRole">The user role for the org (required).</param>
        public OrgUserPermissionResponse(Guid? orgId = default(Guid?), UserRoleEnum userRole = default(UserRoleEnum))
        {
            // to ensure "orgId" is required (not null)
            if (orgId == null)
            {
                throw new InvalidDataException("orgId is a required property for OrgUserPermissionResponse and cannot be null");
            }
            else
            {
                this.OrgId = orgId;
            }
            // to ensure "userRole" is required (not null)
            if (userRole == null)
            {
                throw new InvalidDataException("userRole is a required property for OrgUserPermissionResponse and cannot be null");
            }
            else
            {
                this.UserRole = userRole;
            }
        }
        
        /// <summary>
        /// The unique id (UUID) of the org
        /// </summary>
        /// <value>The unique id (UUID) of the org</value>
        [DataMember(Name="orgId", EmitDefaultValue=false)]
        public Guid? OrgId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgUserPermissionResponse {\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  UserRole: ").Append(UserRole).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgUserPermissionResponse);
        }

        /// <summary>
        /// Returns true if OrgUserPermissionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgUserPermissionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgUserPermissionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrgId == input.OrgId ||
                    (this.OrgId != null &&
                    this.OrgId.Equals(input.OrgId))
                ) && 
                (
                    this.UserRole == input.UserRole ||
                    (this.UserRole != null &&
                    this.UserRole.Equals(input.UserRole))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrgId != null)
                    hashCode = hashCode * 59 + this.OrgId.GetHashCode();
                if (this.UserRole != null)
                    hashCode = hashCode * 59 + this.UserRole.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
