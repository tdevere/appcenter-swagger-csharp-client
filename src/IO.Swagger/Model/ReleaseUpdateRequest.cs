/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A request containing information for updating a release.
    /// </summary>
    [DataContract]
        public partial class ReleaseUpdateRequest :  IEquatable<ReleaseUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseUpdateRequest" /> class.
        /// </summary>
        /// <param name="distributionGroupName">OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn&#x27;t exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence..</param>
        /// <param name="distributionGroupId">OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn&#x27;t exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence..</param>
        /// <param name="destinationName">OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn&#x27;t exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence..</param>
        /// <param name="destinationId">OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn&#x27;t exist a 400 is returned. If both destination name and id are passed, the id is taking precedence..</param>
        /// <param name="destinationType">Not used anymore..</param>
        /// <param name="releaseNotes">Release notes for this release..</param>
        /// <param name="mandatoryUpdate">A boolean which determines whether this version should be a mandatory update or not..</param>
        /// <param name="destinations">Distribute this release under the following list of destinations (store groups or distribution groups)..</param>
        /// <param name="build">build.</param>
        /// <param name="notifyTesters">A boolean which determines whether to notify testers of a new release, default to true. (default to true).</param>
        /// <param name="metadata">metadata.</param>
        public ReleaseUpdateRequest(string distributionGroupName = default(string), string distributionGroupId = default(string), string destinationName = default(string), string destinationId = default(string), string destinationType = default(string), string releaseNotes = default(string), bool? mandatoryUpdate = default(bool?), List<V01appsownerNameappNamereleasesreleaseIdDestinations> destinations = default(List<V01appsownerNameappNamereleasesreleaseIdDestinations>), V01appsownerNameappNamereleasesreleaseIdBuild build = default(V01appsownerNameappNamereleasesreleaseIdBuild), bool? notifyTesters = true, V01appsownerNameappNamereleasesreleaseIdMetadata metadata = default(V01appsownerNameappNamereleasesreleaseIdMetadata))
        {
            this.DistributionGroupName = distributionGroupName;
            this.DistributionGroupId = distributionGroupId;
            this.DestinationName = destinationName;
            this.DestinationId = destinationId;
            this.DestinationType = destinationType;
            this.ReleaseNotes = releaseNotes;
            this.MandatoryUpdate = mandatoryUpdate;
            this.Destinations = destinations;
            this.Build = build;
            // use default value if no "notifyTesters" provided
            if (notifyTesters == null)
            {
                this.NotifyTesters = true;
            }
            else
            {
                this.NotifyTesters = notifyTesters;
            }
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn&#x27;t exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
        /// </summary>
        /// <value>OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn&#x27;t exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.</value>
        [DataMember(Name="distribution_group_name", EmitDefaultValue=false)]
        public string DistributionGroupName { get; set; }

        /// <summary>
        /// OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn&#x27;t exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
        /// </summary>
        /// <value>OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn&#x27;t exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.</value>
        [DataMember(Name="distribution_group_id", EmitDefaultValue=false)]
        public string DistributionGroupId { get; set; }

        /// <summary>
        /// OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn&#x27;t exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
        /// </summary>
        /// <value>OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn&#x27;t exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.</value>
        [DataMember(Name="destination_name", EmitDefaultValue=false)]
        public string DestinationName { get; set; }

        /// <summary>
        /// OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn&#x27;t exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.
        /// </summary>
        /// <value>OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn&#x27;t exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.</value>
        [DataMember(Name="destination_id", EmitDefaultValue=false)]
        public string DestinationId { get; set; }

        /// <summary>
        /// Not used anymore.
        /// </summary>
        /// <value>Not used anymore.</value>
        [DataMember(Name="destination_type", EmitDefaultValue=false)]
        public string DestinationType { get; set; }

        /// <summary>
        /// Release notes for this release.
        /// </summary>
        /// <value>Release notes for this release.</value>
        [DataMember(Name="release_notes", EmitDefaultValue=false)]
        public string ReleaseNotes { get; set; }

        /// <summary>
        /// A boolean which determines whether this version should be a mandatory update or not.
        /// </summary>
        /// <value>A boolean which determines whether this version should be a mandatory update or not.</value>
        [DataMember(Name="mandatory_update", EmitDefaultValue=false)]
        public bool? MandatoryUpdate { get; set; }

        /// <summary>
        /// Distribute this release under the following list of destinations (store groups or distribution groups).
        /// </summary>
        /// <value>Distribute this release under the following list of destinations (store groups or distribution groups).</value>
        [DataMember(Name="destinations", EmitDefaultValue=false)]
        public List<V01appsownerNameappNamereleasesreleaseIdDestinations> Destinations { get; set; }

        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name="build", EmitDefaultValue=false)]
        public V01appsownerNameappNamereleasesreleaseIdBuild Build { get; set; }

        /// <summary>
        /// A boolean which determines whether to notify testers of a new release, default to true.
        /// </summary>
        /// <value>A boolean which determines whether to notify testers of a new release, default to true.</value>
        [DataMember(Name="notify_testers", EmitDefaultValue=false)]
        public bool? NotifyTesters { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public V01appsownerNameappNamereleasesreleaseIdMetadata Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReleaseUpdateRequest {\n");
            sb.Append("  DistributionGroupName: ").Append(DistributionGroupName).Append("\n");
            sb.Append("  DistributionGroupId: ").Append(DistributionGroupId).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  DestinationId: ").Append(DestinationId).Append("\n");
            sb.Append("  DestinationType: ").Append(DestinationType).Append("\n");
            sb.Append("  ReleaseNotes: ").Append(ReleaseNotes).Append("\n");
            sb.Append("  MandatoryUpdate: ").Append(MandatoryUpdate).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  NotifyTesters: ").Append(NotifyTesters).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseUpdateRequest);
        }

        /// <summary>
        /// Returns true if ReleaseUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseUpdateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DistributionGroupName == input.DistributionGroupName ||
                    (this.DistributionGroupName != null &&
                    this.DistributionGroupName.Equals(input.DistributionGroupName))
                ) && 
                (
                    this.DistributionGroupId == input.DistributionGroupId ||
                    (this.DistributionGroupId != null &&
                    this.DistributionGroupId.Equals(input.DistributionGroupId))
                ) && 
                (
                    this.DestinationName == input.DestinationName ||
                    (this.DestinationName != null &&
                    this.DestinationName.Equals(input.DestinationName))
                ) && 
                (
                    this.DestinationId == input.DestinationId ||
                    (this.DestinationId != null &&
                    this.DestinationId.Equals(input.DestinationId))
                ) && 
                (
                    this.DestinationType == input.DestinationType ||
                    (this.DestinationType != null &&
                    this.DestinationType.Equals(input.DestinationType))
                ) && 
                (
                    this.ReleaseNotes == input.ReleaseNotes ||
                    (this.ReleaseNotes != null &&
                    this.ReleaseNotes.Equals(input.ReleaseNotes))
                ) && 
                (
                    this.MandatoryUpdate == input.MandatoryUpdate ||
                    (this.MandatoryUpdate != null &&
                    this.MandatoryUpdate.Equals(input.MandatoryUpdate))
                ) && 
                (
                    this.Destinations == input.Destinations ||
                    this.Destinations != null &&
                    input.Destinations != null &&
                    this.Destinations.SequenceEqual(input.Destinations)
                ) && 
                (
                    this.Build == input.Build ||
                    (this.Build != null &&
                    this.Build.Equals(input.Build))
                ) && 
                (
                    this.NotifyTesters == input.NotifyTesters ||
                    (this.NotifyTesters != null &&
                    this.NotifyTesters.Equals(input.NotifyTesters))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DistributionGroupName != null)
                    hashCode = hashCode * 59 + this.DistributionGroupName.GetHashCode();
                if (this.DistributionGroupId != null)
                    hashCode = hashCode * 59 + this.DistributionGroupId.GetHashCode();
                if (this.DestinationName != null)
                    hashCode = hashCode * 59 + this.DestinationName.GetHashCode();
                if (this.DestinationId != null)
                    hashCode = hashCode * 59 + this.DestinationId.GetHashCode();
                if (this.DestinationType != null)
                    hashCode = hashCode * 59 + this.DestinationType.GetHashCode();
                if (this.ReleaseNotes != null)
                    hashCode = hashCode * 59 + this.ReleaseNotes.GetHashCode();
                if (this.MandatoryUpdate != null)
                    hashCode = hashCode * 59 + this.MandatoryUpdate.GetHashCode();
                if (this.Destinations != null)
                    hashCode = hashCode * 59 + this.Destinations.GetHashCode();
                if (this.Build != null)
                    hashCode = hashCode * 59 + this.Build.GetHashCode();
                if (this.NotifyTesters != null)
                    hashCode = hashCode * 59 + this.NotifyTesters.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
