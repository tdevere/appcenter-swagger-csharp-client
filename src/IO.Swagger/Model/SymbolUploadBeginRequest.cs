/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A request containing information pertaining to starting a symbol upload process
    /// </summary>
    [DataContract]
        public partial class SymbolUploadBeginRequest :  IEquatable<SymbolUploadBeginRequest>, IValidatableObject
    {
        /// <summary>
        /// The type of the symbol for the current symbol upload
        /// </summary>
        /// <value>The type of the symbol for the current symbol upload</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SymbolTypeEnum
        {
            /// <summary>
            /// Enum Apple for value: Apple
            /// </summary>
            [EnumMember(Value = "Apple")]
            Apple = 1,
            /// <summary>
            /// Enum JavaScript for value: JavaScript
            /// </summary>
            [EnumMember(Value = "JavaScript")]
            JavaScript = 2,
            /// <summary>
            /// Enum Breakpad for value: Breakpad
            /// </summary>
            [EnumMember(Value = "Breakpad")]
            Breakpad = 3,
            /// <summary>
            /// Enum AndroidProguard for value: AndroidProguard
            /// </summary>
            [EnumMember(Value = "AndroidProguard")]
            AndroidProguard = 4,
            /// <summary>
            /// Enum UWP for value: UWP
            /// </summary>
            [EnumMember(Value = "UWP")]
            UWP = 5        }
        /// <summary>
        /// The type of the symbol for the current symbol upload
        /// </summary>
        /// <value>The type of the symbol for the current symbol upload</value>
        [DataMember(Name="symbol_type", EmitDefaultValue=false)]
        public SymbolTypeEnum SymbolType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolUploadBeginRequest" /> class.
        /// </summary>
        /// <param name="symbolType">The type of the symbol for the current symbol upload (required).</param>
        /// <param name="clientCallback">The callback URL that the client can optionally provide to get status updates for the current symbol upload.</param>
        /// <param name="fileName">The file name for the symbol upload.</param>
        /// <param name="build">The build number. Optional for Apple. Required for Android..</param>
        /// <param name="version">The version number. Optional for Apple. Required for Android..</param>
        public SymbolUploadBeginRequest(SymbolTypeEnum symbolType = default(SymbolTypeEnum), string clientCallback = default(string), string fileName = default(string), string build = default(string), string version = default(string))
        {
            // to ensure "symbolType" is required (not null)
            if (symbolType == null)
            {
                throw new InvalidDataException("symbolType is a required property for SymbolUploadBeginRequest and cannot be null");
            }
            else
            {
                this.SymbolType = symbolType;
            }
            this.ClientCallback = clientCallback;
            this.FileName = fileName;
            this.Build = build;
            this.Version = version;
        }
        

        /// <summary>
        /// The callback URL that the client can optionally provide to get status updates for the current symbol upload
        /// </summary>
        /// <value>The callback URL that the client can optionally provide to get status updates for the current symbol upload</value>
        [DataMember(Name="client_callback", EmitDefaultValue=false)]
        public string ClientCallback { get; set; }

        /// <summary>
        /// The file name for the symbol upload
        /// </summary>
        /// <value>The file name for the symbol upload</value>
        [DataMember(Name="file_name", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// The build number. Optional for Apple. Required for Android.
        /// </summary>
        /// <value>The build number. Optional for Apple. Required for Android.</value>
        [DataMember(Name="build", EmitDefaultValue=false)]
        public string Build { get; set; }

        /// <summary>
        /// The version number. Optional for Apple. Required for Android.
        /// </summary>
        /// <value>The version number. Optional for Apple. Required for Android.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SymbolUploadBeginRequest {\n");
            sb.Append("  SymbolType: ").Append(SymbolType).Append("\n");
            sb.Append("  ClientCallback: ").Append(ClientCallback).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SymbolUploadBeginRequest);
        }

        /// <summary>
        /// Returns true if SymbolUploadBeginRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SymbolUploadBeginRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SymbolUploadBeginRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SymbolType == input.SymbolType ||
                    (this.SymbolType != null &&
                    this.SymbolType.Equals(input.SymbolType))
                ) && 
                (
                    this.ClientCallback == input.ClientCallback ||
                    (this.ClientCallback != null &&
                    this.ClientCallback.Equals(input.ClientCallback))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.Build == input.Build ||
                    (this.Build != null &&
                    this.Build.Equals(input.Build))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SymbolType != null)
                    hashCode = hashCode * 59 + this.SymbolType.GetHashCode();
                if (this.ClientCallback != null)
                    hashCode = hashCode * 59 + this.ClientCallback.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.Build != null)
                    hashCode = hashCode * 59 + this.Build.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
