/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExternalUserRequest
    /// </summary>
    [DataContract]
        public partial class ExternalUserRequest :  IEquatable<ExternalUserRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalUserRequest" /> class.
        /// </summary>
        /// <param name="appInvitation">The token of the app invitation which lead to signup.</param>
        /// <param name="testerInvitation">The token of the test invitation which lead to signup.</param>
        /// <param name="organizationInvitation">The token of the organization invitation which lead to signup.</param>
        /// <param name="avatarUrl">The avatar URL of the user.</param>
        /// <param name="displayName">The full name of the user. Might for example be first and last name.</param>
        /// <param name="email">The email address of the user (required).</param>
        /// <param name="name">The unique name that is used to identify the user. If no explicit value is given, a default will be auto-generated from the &#x60;display_name&#x60; value.</param>
        public ExternalUserRequest(string appInvitation = default(string), string testerInvitation = default(string), string organizationInvitation = default(string), string avatarUrl = default(string), string displayName = default(string), string email = default(string), string name = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for ExternalUserRequest and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            this.AppInvitation = appInvitation;
            this.TesterInvitation = testerInvitation;
            this.OrganizationInvitation = organizationInvitation;
            this.AvatarUrl = avatarUrl;
            this.DisplayName = displayName;
            this.Name = name;
        }
        
        /// <summary>
        /// The token of the app invitation which lead to signup
        /// </summary>
        /// <value>The token of the app invitation which lead to signup</value>
        [DataMember(Name="app_invitation", EmitDefaultValue=false)]
        public string AppInvitation { get; set; }

        /// <summary>
        /// The token of the test invitation which lead to signup
        /// </summary>
        /// <value>The token of the test invitation which lead to signup</value>
        [DataMember(Name="tester_invitation", EmitDefaultValue=false)]
        public string TesterInvitation { get; set; }

        /// <summary>
        /// The token of the organization invitation which lead to signup
        /// </summary>
        /// <value>The token of the organization invitation which lead to signup</value>
        [DataMember(Name="organization_invitation", EmitDefaultValue=false)]
        public string OrganizationInvitation { get; set; }

        /// <summary>
        /// The avatar URL of the user
        /// </summary>
        /// <value>The avatar URL of the user</value>
        [DataMember(Name="avatar_url", EmitDefaultValue=false)]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// The full name of the user. Might for example be first and last name
        /// </summary>
        /// <value>The full name of the user. Might for example be first and last name</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The email address of the user
        /// </summary>
        /// <value>The email address of the user</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The unique name that is used to identify the user. If no explicit value is given, a default will be auto-generated from the &#x60;display_name&#x60; value
        /// </summary>
        /// <value>The unique name that is used to identify the user. If no explicit value is given, a default will be auto-generated from the &#x60;display_name&#x60; value</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalUserRequest {\n");
            sb.Append("  AppInvitation: ").Append(AppInvitation).Append("\n");
            sb.Append("  TesterInvitation: ").Append(TesterInvitation).Append("\n");
            sb.Append("  OrganizationInvitation: ").Append(OrganizationInvitation).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalUserRequest);
        }

        /// <summary>
        /// Returns true if ExternalUserRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalUserRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalUserRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppInvitation == input.AppInvitation ||
                    (this.AppInvitation != null &&
                    this.AppInvitation.Equals(input.AppInvitation))
                ) && 
                (
                    this.TesterInvitation == input.TesterInvitation ||
                    (this.TesterInvitation != null &&
                    this.TesterInvitation.Equals(input.TesterInvitation))
                ) && 
                (
                    this.OrganizationInvitation == input.OrganizationInvitation ||
                    (this.OrganizationInvitation != null &&
                    this.OrganizationInvitation.Equals(input.OrganizationInvitation))
                ) && 
                (
                    this.AvatarUrl == input.AvatarUrl ||
                    (this.AvatarUrl != null &&
                    this.AvatarUrl.Equals(input.AvatarUrl))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppInvitation != null)
                    hashCode = hashCode * 59 + this.AppInvitation.GetHashCode();
                if (this.TesterInvitation != null)
                    hashCode = hashCode * 59 + this.TesterInvitation.GetHashCode();
                if (this.OrganizationInvitation != null)
                    hashCode = hashCode * 59 + this.OrganizationInvitation.GetHashCode();
                if (this.AvatarUrl != null)
                    hashCode = hashCode * 59 + this.AvatarUrl.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
