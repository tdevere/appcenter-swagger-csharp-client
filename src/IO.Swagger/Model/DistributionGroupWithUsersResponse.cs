/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DistributionGroupWithUsersResponse
    /// </summary>
    [DataContract]
        public partial class DistributionGroupWithUsersResponse :  IEquatable<DistributionGroupWithUsersResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DistributionGroupWithUsersResponse" /> class.
        /// </summary>
        /// <param name="id">The unique ID of the distribution group (required).</param>
        /// <param name="name">The name of the distribution group used in URLs (required).</param>
        /// <param name="totalUserCount">The count of users in the distribution group (required).</param>
        /// <param name="totalGroupsCount">The count of aad groups in the distribution group.</param>
        /// <param name="notifiedUserCount">The count of non-pending users in the distribution group who will be notified by new releases (required).</param>
        /// <param name="isPublic">Whether the distribution group is public.</param>
        /// <param name="users">The distribution group users (required).</param>
        /// <param name="aadGroups">The distribution group aad groups.</param>
        public DistributionGroupWithUsersResponse(Guid? id = default(Guid?), string name = default(string), decimal? totalUserCount = default(decimal?), decimal? totalGroupsCount = default(decimal?), decimal? notifiedUserCount = default(decimal?), bool? isPublic = default(bool?), List<InlineResponse2009> users = default(List<InlineResponse2009>), List<DistributionGroupWithUsersResponseAadGroups> aadGroups = default(List<DistributionGroupWithUsersResponseAadGroups>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for DistributionGroupWithUsersResponse and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for DistributionGroupWithUsersResponse and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "totalUserCount" is required (not null)
            if (totalUserCount == null)
            {
                throw new InvalidDataException("totalUserCount is a required property for DistributionGroupWithUsersResponse and cannot be null");
            }
            else
            {
                this.TotalUserCount = totalUserCount;
            }
            // to ensure "notifiedUserCount" is required (not null)
            if (notifiedUserCount == null)
            {
                throw new InvalidDataException("notifiedUserCount is a required property for DistributionGroupWithUsersResponse and cannot be null");
            }
            else
            {
                this.NotifiedUserCount = notifiedUserCount;
            }
            // to ensure "users" is required (not null)
            if (users == null)
            {
                throw new InvalidDataException("users is a required property for DistributionGroupWithUsersResponse and cannot be null");
            }
            else
            {
                this.Users = users;
            }
            this.TotalGroupsCount = totalGroupsCount;
            this.IsPublic = isPublic;
            this.AadGroups = aadGroups;
        }
        
        /// <summary>
        /// The unique ID of the distribution group
        /// </summary>
        /// <value>The unique ID of the distribution group</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// The name of the distribution group used in URLs
        /// </summary>
        /// <value>The name of the distribution group used in URLs</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The count of users in the distribution group
        /// </summary>
        /// <value>The count of users in the distribution group</value>
        [DataMember(Name="total_user_count", EmitDefaultValue=false)]
        public decimal? TotalUserCount { get; set; }

        /// <summary>
        /// The count of aad groups in the distribution group
        /// </summary>
        /// <value>The count of aad groups in the distribution group</value>
        [DataMember(Name="total_groups_count", EmitDefaultValue=false)]
        public decimal? TotalGroupsCount { get; set; }

        /// <summary>
        /// The count of non-pending users in the distribution group who will be notified by new releases
        /// </summary>
        /// <value>The count of non-pending users in the distribution group who will be notified by new releases</value>
        [DataMember(Name="notified_user_count", EmitDefaultValue=false)]
        public decimal? NotifiedUserCount { get; set; }

        /// <summary>
        /// Whether the distribution group is public
        /// </summary>
        /// <value>Whether the distribution group is public</value>
        [DataMember(Name="is_public", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }

        /// <summary>
        /// The distribution group users
        /// </summary>
        /// <value>The distribution group users</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<InlineResponse2009> Users { get; set; }

        /// <summary>
        /// The distribution group aad groups
        /// </summary>
        /// <value>The distribution group aad groups</value>
        [DataMember(Name="aad_groups", EmitDefaultValue=false)]
        public List<DistributionGroupWithUsersResponseAadGroups> AadGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DistributionGroupWithUsersResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TotalUserCount: ").Append(TotalUserCount).Append("\n");
            sb.Append("  TotalGroupsCount: ").Append(TotalGroupsCount).Append("\n");
            sb.Append("  NotifiedUserCount: ").Append(NotifiedUserCount).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  AadGroups: ").Append(AadGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DistributionGroupWithUsersResponse);
        }

        /// <summary>
        /// Returns true if DistributionGroupWithUsersResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DistributionGroupWithUsersResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DistributionGroupWithUsersResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TotalUserCount == input.TotalUserCount ||
                    (this.TotalUserCount != null &&
                    this.TotalUserCount.Equals(input.TotalUserCount))
                ) && 
                (
                    this.TotalGroupsCount == input.TotalGroupsCount ||
                    (this.TotalGroupsCount != null &&
                    this.TotalGroupsCount.Equals(input.TotalGroupsCount))
                ) && 
                (
                    this.NotifiedUserCount == input.NotifiedUserCount ||
                    (this.NotifiedUserCount != null &&
                    this.NotifiedUserCount.Equals(input.NotifiedUserCount))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.AadGroups == input.AadGroups ||
                    this.AadGroups != null &&
                    input.AadGroups != null &&
                    this.AadGroups.SequenceEqual(input.AadGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TotalUserCount != null)
                    hashCode = hashCode * 59 + this.TotalUserCount.GetHashCode();
                if (this.TotalGroupsCount != null)
                    hashCode = hashCode * 59 + this.TotalGroupsCount.GetHashCode();
                if (this.NotifiedUserCount != null)
                    hashCode = hashCode * 59 + this.NotifiedUserCount.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.AadGroups != null)
                    hashCode = hashCode * 59 + this.AadGroups.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
