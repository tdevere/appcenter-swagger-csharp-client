/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StepReportScreenshotUrls
    /// </summary>
    [DataContract]
        public partial class StepReportScreenshotUrls :  IEquatable<StepReportScreenshotUrls>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StepReportScreenshotUrls" /> class.
        /// </summary>
        /// <param name="original">original (required).</param>
        /// <param name="small">small (required).</param>
        /// <param name="medium">medium (required).</param>
        /// <param name="large">large (required).</param>
        public StepReportScreenshotUrls(string original = default(string), string small = default(string), string medium = default(string), string large = default(string))
        {
            // to ensure "original" is required (not null)
            if (original == null)
            {
                throw new InvalidDataException("original is a required property for StepReportScreenshotUrls and cannot be null");
            }
            else
            {
                this.Original = original;
            }
            // to ensure "small" is required (not null)
            if (small == null)
            {
                throw new InvalidDataException("small is a required property for StepReportScreenshotUrls and cannot be null");
            }
            else
            {
                this.Small = small;
            }
            // to ensure "medium" is required (not null)
            if (medium == null)
            {
                throw new InvalidDataException("medium is a required property for StepReportScreenshotUrls and cannot be null");
            }
            else
            {
                this.Medium = medium;
            }
            // to ensure "large" is required (not null)
            if (large == null)
            {
                throw new InvalidDataException("large is a required property for StepReportScreenshotUrls and cannot be null");
            }
            else
            {
                this.Large = large;
            }
        }
        
        /// <summary>
        /// Gets or Sets Original
        /// </summary>
        [DataMember(Name="original", EmitDefaultValue=false)]
        public string Original { get; set; }

        /// <summary>
        /// Gets or Sets Small
        /// </summary>
        [DataMember(Name="small", EmitDefaultValue=false)]
        public string Small { get; set; }

        /// <summary>
        /// Gets or Sets Medium
        /// </summary>
        [DataMember(Name="medium", EmitDefaultValue=false)]
        public string Medium { get; set; }

        /// <summary>
        /// Gets or Sets Large
        /// </summary>
        [DataMember(Name="large", EmitDefaultValue=false)]
        public string Large { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StepReportScreenshotUrls {\n");
            sb.Append("  Original: ").Append(Original).Append("\n");
            sb.Append("  Small: ").Append(Small).Append("\n");
            sb.Append("  Medium: ").Append(Medium).Append("\n");
            sb.Append("  Large: ").Append(Large).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StepReportScreenshotUrls);
        }

        /// <summary>
        /// Returns true if StepReportScreenshotUrls instances are equal
        /// </summary>
        /// <param name="input">Instance of StepReportScreenshotUrls to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StepReportScreenshotUrls input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Original == input.Original ||
                    (this.Original != null &&
                    this.Original.Equals(input.Original))
                ) && 
                (
                    this.Small == input.Small ||
                    (this.Small != null &&
                    this.Small.Equals(input.Small))
                ) && 
                (
                    this.Medium == input.Medium ||
                    (this.Medium != null &&
                    this.Medium.Equals(input.Medium))
                ) && 
                (
                    this.Large == input.Large ||
                    (this.Large != null &&
                    this.Large.Equals(input.Large))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Original != null)
                    hashCode = hashCode * 59 + this.Original.GetHashCode();
                if (this.Small != null)
                    hashCode = hashCode * 59 + this.Small.GetHashCode();
                if (this.Medium != null)
                    hashCode = hashCode * 59 + this.Medium.GetHashCode();
                if (this.Large != null)
                    hashCode = hashCode * 59 + this.Large.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
