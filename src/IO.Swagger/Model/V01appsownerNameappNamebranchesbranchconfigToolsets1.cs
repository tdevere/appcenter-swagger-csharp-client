/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The branch build configuration for each toolset
    /// </summary>
    [DataContract]
        public partial class V01appsownerNameappNamebranchesbranchconfigToolsets1 :  IEquatable<V01appsownerNameappNamebranchesbranchconfigToolsets1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V01appsownerNameappNamebranchesbranchconfigToolsets1" /> class.
        /// </summary>
        /// <param name="xcode">xcode.</param>
        /// <param name="javascript">javascript.</param>
        /// <param name="xamarin">xamarin.</param>
        /// <param name="android">android.</param>
        public V01appsownerNameappNamebranchesbranchconfigToolsets1(V01appsownerNameappNamebranchesbranchconfigToolsetsXcode xcode = default(V01appsownerNameappNamebranchesbranchconfigToolsetsXcode), V01appsownerNameappNamebranchesbranchconfigToolsetsJavascript javascript = default(V01appsownerNameappNamebranchesbranchconfigToolsetsJavascript), V01appsownerNameappNamebranchesbranchconfigToolsetsXamarin xamarin = default(V01appsownerNameappNamebranchesbranchconfigToolsetsXamarin), V01appsownerNameappNamebranchesbranchconfigToolsetsAndroid android = default(V01appsownerNameappNamebranchesbranchconfigToolsetsAndroid))
        {
            this.Xcode = xcode;
            this.Javascript = javascript;
            this.Xamarin = xamarin;
            this.Android = android;
        }
        
        /// <summary>
        /// Gets or Sets Xcode
        /// </summary>
        [DataMember(Name="xcode", EmitDefaultValue=false)]
        public V01appsownerNameappNamebranchesbranchconfigToolsetsXcode Xcode { get; set; }

        /// <summary>
        /// Gets or Sets Javascript
        /// </summary>
        [DataMember(Name="javascript", EmitDefaultValue=false)]
        public V01appsownerNameappNamebranchesbranchconfigToolsetsJavascript Javascript { get; set; }

        /// <summary>
        /// Gets or Sets Xamarin
        /// </summary>
        [DataMember(Name="xamarin", EmitDefaultValue=false)]
        public V01appsownerNameappNamebranchesbranchconfigToolsetsXamarin Xamarin { get; set; }

        /// <summary>
        /// Gets or Sets Android
        /// </summary>
        [DataMember(Name="android", EmitDefaultValue=false)]
        public V01appsownerNameappNamebranchesbranchconfigToolsetsAndroid Android { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V01appsownerNameappNamebranchesbranchconfigToolsets1 {\n");
            sb.Append("  Xcode: ").Append(Xcode).Append("\n");
            sb.Append("  Javascript: ").Append(Javascript).Append("\n");
            sb.Append("  Xamarin: ").Append(Xamarin).Append("\n");
            sb.Append("  Android: ").Append(Android).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V01appsownerNameappNamebranchesbranchconfigToolsets1);
        }

        /// <summary>
        /// Returns true if V01appsownerNameappNamebranchesbranchconfigToolsets1 instances are equal
        /// </summary>
        /// <param name="input">Instance of V01appsownerNameappNamebranchesbranchconfigToolsets1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V01appsownerNameappNamebranchesbranchconfigToolsets1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Xcode == input.Xcode ||
                    (this.Xcode != null &&
                    this.Xcode.Equals(input.Xcode))
                ) && 
                (
                    this.Javascript == input.Javascript ||
                    (this.Javascript != null &&
                    this.Javascript.Equals(input.Javascript))
                ) && 
                (
                    this.Xamarin == input.Xamarin ||
                    (this.Xamarin != null &&
                    this.Xamarin.Equals(input.Xamarin))
                ) && 
                (
                    this.Android == input.Android ||
                    (this.Android != null &&
                    this.Android.Equals(input.Android))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Xcode != null)
                    hashCode = hashCode * 59 + this.Xcode.GetHashCode();
                if (this.Javascript != null)
                    hashCode = hashCode * 59 + this.Javascript.GetHashCode();
                if (this.Xamarin != null)
                    hashCode = hashCode * 59 + this.Xamarin.GetHashCode();
                if (this.Android != null)
                    hashCode = hashCode * 59 + this.Android.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
