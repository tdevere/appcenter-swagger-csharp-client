/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StoreDestinationDetails
    /// </summary>
    [DataContract]
        public partial class StoreDestinationDetails :  IEquatable<StoreDestinationDetails>, IValidatableObject
    {
        /// <summary>
        /// type of store.
        /// </summary>
        /// <value>type of store.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StoreTypeEnum
        {
            /// <summary>
            /// Enum Intune for value: intune
            /// </summary>
            [EnumMember(Value = "intune")]
            Intune = 1        }
        /// <summary>
        /// type of store.
        /// </summary>
        /// <value>type of store.</value>
        [DataMember(Name="store_type", EmitDefaultValue=false)]
        public StoreTypeEnum? StoreType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreDestinationDetails" /> class.
        /// </summary>
        /// <param name="destPublishId">destination ID identifying a unique id in distribution store..</param>
        /// <param name="storeType">type of store..</param>
        /// <param name="appId">app id of application..</param>
        public StoreDestinationDetails(string destPublishId = default(string), StoreTypeEnum? storeType = default(StoreTypeEnum?), string appId = default(string))
        {
            this.DestPublishId = destPublishId;
            this.StoreType = storeType;
            this.AppId = appId;
        }
        
        /// <summary>
        /// destination ID identifying a unique id in distribution store.
        /// </summary>
        /// <value>destination ID identifying a unique id in distribution store.</value>
        [DataMember(Name="dest_publish_id", EmitDefaultValue=false)]
        public string DestPublishId { get; set; }


        /// <summary>
        /// app id of application.
        /// </summary>
        /// <value>app id of application.</value>
        [DataMember(Name="appId", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreDestinationDetails {\n");
            sb.Append("  DestPublishId: ").Append(DestPublishId).Append("\n");
            sb.Append("  StoreType: ").Append(StoreType).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreDestinationDetails);
        }

        /// <summary>
        /// Returns true if StoreDestinationDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreDestinationDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreDestinationDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DestPublishId == input.DestPublishId ||
                    (this.DestPublishId != null &&
                    this.DestPublishId.Equals(input.DestPublishId))
                ) && 
                (
                    this.StoreType == input.StoreType ||
                    (this.StoreType != null &&
                    this.StoreType.Equals(input.StoreType))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestPublishId != null)
                    hashCode = hashCode * 59 + this.DestPublishId.GetHashCode();
                if (this.StoreType != null)
                    hashCode = hashCode * 59 + this.StoreType.GetHashCode();
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
