/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CrashDeleteCounter
    /// </summary>
    [DataContract]
        public partial class CrashDeleteCounter :  IEquatable<CrashDeleteCounter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrashDeleteCounter" /> class.
        /// </summary>
        /// <param name="appId">appId.</param>
        /// <param name="crashGroupId">crashGroupId.</param>
        /// <param name="crashId">crashId.</param>
        /// <param name="crashesDeleted">crashesDeleted.</param>
        /// <param name="attachmentsDeleted">attachmentsDeleted.</param>
        /// <param name="blobsSucceeded">blobsSucceeded.</param>
        /// <param name="blobsFailed">blobsFailed.</param>
        public CrashDeleteCounter(string appId = default(string), string crashGroupId = default(string), string crashId = default(string), int? crashesDeleted = default(int?), int? attachmentsDeleted = default(int?), int? blobsSucceeded = default(int?), int? blobsFailed = default(int?))
        {
            this.AppId = appId;
            this.CrashGroupId = crashGroupId;
            this.CrashId = crashId;
            this.CrashesDeleted = crashesDeleted;
            this.AttachmentsDeleted = attachmentsDeleted;
            this.BlobsSucceeded = blobsSucceeded;
            this.BlobsFailed = blobsFailed;
        }
        
        /// <summary>
        /// Gets or Sets AppId
        /// </summary>
        [DataMember(Name="app_id", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or Sets CrashGroupId
        /// </summary>
        [DataMember(Name="crash_group_id", EmitDefaultValue=false)]
        public string CrashGroupId { get; set; }

        /// <summary>
        /// Gets or Sets CrashId
        /// </summary>
        [DataMember(Name="crash_id", EmitDefaultValue=false)]
        public string CrashId { get; set; }

        /// <summary>
        /// Gets or Sets CrashesDeleted
        /// </summary>
        [DataMember(Name="crashes_deleted", EmitDefaultValue=false)]
        public int? CrashesDeleted { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentsDeleted
        /// </summary>
        [DataMember(Name="attachments_deleted", EmitDefaultValue=false)]
        public int? AttachmentsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets BlobsSucceeded
        /// </summary>
        [DataMember(Name="blobs_succeeded", EmitDefaultValue=false)]
        public int? BlobsSucceeded { get; set; }

        /// <summary>
        /// Gets or Sets BlobsFailed
        /// </summary>
        [DataMember(Name="blobs_failed", EmitDefaultValue=false)]
        public int? BlobsFailed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrashDeleteCounter {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  CrashGroupId: ").Append(CrashGroupId).Append("\n");
            sb.Append("  CrashId: ").Append(CrashId).Append("\n");
            sb.Append("  CrashesDeleted: ").Append(CrashesDeleted).Append("\n");
            sb.Append("  AttachmentsDeleted: ").Append(AttachmentsDeleted).Append("\n");
            sb.Append("  BlobsSucceeded: ").Append(BlobsSucceeded).Append("\n");
            sb.Append("  BlobsFailed: ").Append(BlobsFailed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrashDeleteCounter);
        }

        /// <summary>
        /// Returns true if CrashDeleteCounter instances are equal
        /// </summary>
        /// <param name="input">Instance of CrashDeleteCounter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrashDeleteCounter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.CrashGroupId == input.CrashGroupId ||
                    (this.CrashGroupId != null &&
                    this.CrashGroupId.Equals(input.CrashGroupId))
                ) && 
                (
                    this.CrashId == input.CrashId ||
                    (this.CrashId != null &&
                    this.CrashId.Equals(input.CrashId))
                ) && 
                (
                    this.CrashesDeleted == input.CrashesDeleted ||
                    (this.CrashesDeleted != null &&
                    this.CrashesDeleted.Equals(input.CrashesDeleted))
                ) && 
                (
                    this.AttachmentsDeleted == input.AttachmentsDeleted ||
                    (this.AttachmentsDeleted != null &&
                    this.AttachmentsDeleted.Equals(input.AttachmentsDeleted))
                ) && 
                (
                    this.BlobsSucceeded == input.BlobsSucceeded ||
                    (this.BlobsSucceeded != null &&
                    this.BlobsSucceeded.Equals(input.BlobsSucceeded))
                ) && 
                (
                    this.BlobsFailed == input.BlobsFailed ||
                    (this.BlobsFailed != null &&
                    this.BlobsFailed.Equals(input.BlobsFailed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.CrashGroupId != null)
                    hashCode = hashCode * 59 + this.CrashGroupId.GetHashCode();
                if (this.CrashId != null)
                    hashCode = hashCode * 59 + this.CrashId.GetHashCode();
                if (this.CrashesDeleted != null)
                    hashCode = hashCode * 59 + this.CrashesDeleted.GetHashCode();
                if (this.AttachmentsDeleted != null)
                    hashCode = hashCode * 59 + this.AttachmentsDeleted.GetHashCode();
                if (this.BlobsSucceeded != null)
                    hashCode = hashCode * 59 + this.BlobsSucceeded.GetHashCode();
                if (this.BlobsFailed != null)
                    hashCode = hashCode * 59 + this.BlobsFailed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
