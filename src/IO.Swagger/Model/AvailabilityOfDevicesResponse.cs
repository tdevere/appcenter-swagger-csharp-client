/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The current device availability (registered, available and maxmimum) for iPhones, iPads, iPods and Watches from Apple Developer Portal
    /// </summary>
    [DataContract]
        public partial class AvailabilityOfDevicesResponse :  IEquatable<AvailabilityOfDevicesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailabilityOfDevicesResponse" /> class.
        /// </summary>
        /// <param name="iphones">iphones (required).</param>
        /// <param name="ipads">ipads (required).</param>
        /// <param name="ipods">ipods (required).</param>
        /// <param name="watches">watches (required).</param>
        public AvailabilityOfDevicesResponse(AvailabilityOfDevicesResponseIphones iphones = default(AvailabilityOfDevicesResponseIphones), AvailabilityOfDevicesResponseIphones ipads = default(AvailabilityOfDevicesResponseIphones), AvailabilityOfDevicesResponseIphones ipods = default(AvailabilityOfDevicesResponseIphones), AvailabilityOfDevicesResponseIphones watches = default(AvailabilityOfDevicesResponseIphones))
        {
            // to ensure "iphones" is required (not null)
            if (iphones == null)
            {
                throw new InvalidDataException("iphones is a required property for AvailabilityOfDevicesResponse and cannot be null");
            }
            else
            {
                this.Iphones = iphones;
            }
            // to ensure "ipads" is required (not null)
            if (ipads == null)
            {
                throw new InvalidDataException("ipads is a required property for AvailabilityOfDevicesResponse and cannot be null");
            }
            else
            {
                this.Ipads = ipads;
            }
            // to ensure "ipods" is required (not null)
            if (ipods == null)
            {
                throw new InvalidDataException("ipods is a required property for AvailabilityOfDevicesResponse and cannot be null");
            }
            else
            {
                this.Ipods = ipods;
            }
            // to ensure "watches" is required (not null)
            if (watches == null)
            {
                throw new InvalidDataException("watches is a required property for AvailabilityOfDevicesResponse and cannot be null");
            }
            else
            {
                this.Watches = watches;
            }
        }
        
        /// <summary>
        /// Gets or Sets Iphones
        /// </summary>
        [DataMember(Name="iphones", EmitDefaultValue=false)]
        public AvailabilityOfDevicesResponseIphones Iphones { get; set; }

        /// <summary>
        /// Gets or Sets Ipads
        /// </summary>
        [DataMember(Name="ipads", EmitDefaultValue=false)]
        public AvailabilityOfDevicesResponseIphones Ipads { get; set; }

        /// <summary>
        /// Gets or Sets Ipods
        /// </summary>
        [DataMember(Name="ipods", EmitDefaultValue=false)]
        public AvailabilityOfDevicesResponseIphones Ipods { get; set; }

        /// <summary>
        /// Gets or Sets Watches
        /// </summary>
        [DataMember(Name="watches", EmitDefaultValue=false)]
        public AvailabilityOfDevicesResponseIphones Watches { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailabilityOfDevicesResponse {\n");
            sb.Append("  Iphones: ").Append(Iphones).Append("\n");
            sb.Append("  Ipads: ").Append(Ipads).Append("\n");
            sb.Append("  Ipods: ").Append(Ipods).Append("\n");
            sb.Append("  Watches: ").Append(Watches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailabilityOfDevicesResponse);
        }

        /// <summary>
        /// Returns true if AvailabilityOfDevicesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailabilityOfDevicesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailabilityOfDevicesResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Iphones == input.Iphones ||
                    (this.Iphones != null &&
                    this.Iphones.Equals(input.Iphones))
                ) && 
                (
                    this.Ipads == input.Ipads ||
                    (this.Ipads != null &&
                    this.Ipads.Equals(input.Ipads))
                ) && 
                (
                    this.Ipods == input.Ipods ||
                    (this.Ipods != null &&
                    this.Ipods.Equals(input.Ipods))
                ) && 
                (
                    this.Watches == input.Watches ||
                    (this.Watches != null &&
                    this.Watches.Equals(input.Watches))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Iphones != null)
                    hashCode = hashCode * 59 + this.Iphones.GetHashCode();
                if (this.Ipads != null)
                    hashCode = hashCode * 59 + this.Ipads.GetHashCode();
                if (this.Ipods != null)
                    hashCode = hashCode * 59 + this.Ipods.GetHashCode();
                if (this.Watches != null)
                    hashCode = hashCode * 59 + this.Watches.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
