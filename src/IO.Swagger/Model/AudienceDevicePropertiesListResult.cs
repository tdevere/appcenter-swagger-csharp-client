/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// List of device properties.
    /// </summary>
    [DataContract]
        public partial class AudienceDevicePropertiesListResult :  IEquatable<AudienceDevicePropertiesListResult>, IValidatableObject
    {
        /// <summary>
        /// Type of the property.
        /// </summary>
        /// <value>Type of the property.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum InnerEnum
        {
            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 1,
            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 2,
            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean = 3,
            /// <summary>
            /// Enum Datetime for value: date_time
            /// </summary>
            [EnumMember(Value = "date_time")]
            Datetime = 4        }
        /// <summary>
        /// List of device properties.
        /// </summary>
        /// <value>List of device properties.</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public Dictionary<string, InnerEnum> Values { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceDevicePropertiesListResult" /> class.
        /// </summary>
        /// <param name="values">List of device properties. (required).</param>
        public AudienceDevicePropertiesListResult(Dictionary<string, InnerEnum> values = default(Dictionary<string, InnerEnum>))
        {
            // to ensure "values" is required (not null)
            if (values == null)
            {
                throw new InvalidDataException("values is a required property for AudienceDevicePropertiesListResult and cannot be null");
            }
            else
            {
                this.Values = values;
            }
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudienceDevicePropertiesListResult {\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudienceDevicePropertiesListResult);
        }

        /// <summary>
        /// Returns true if AudienceDevicePropertiesListResult instances are equal
        /// </summary>
        /// <param name="input">Instance of AudienceDevicePropertiesListResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceDevicePropertiesListResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
