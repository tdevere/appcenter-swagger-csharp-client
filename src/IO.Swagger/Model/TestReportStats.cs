/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TestReportStats
    /// </summary>
    [DataContract]
        public partial class TestReportStats :  IEquatable<TestReportStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestReportStats" /> class.
        /// </summary>
        /// <param name="os">os (required).</param>
        /// <param name="devices">devices (required).</param>
        /// <param name="filesize">filesize (required).</param>
        /// <param name="totalDeviceMinutes">totalDeviceMinutes (required).</param>
        /// <param name="devicesNotRunned">devicesNotRunned (required).</param>
        /// <param name="failed">failed (required).</param>
        /// <param name="skipped">skipped (required).</param>
        /// <param name="passed">passed (required).</param>
        /// <param name="total">total (required).</param>
        /// <param name="devicesFinished">devicesFinished (required).</param>
        /// <param name="devicesFailed">devicesFailed (required).</param>
        /// <param name="devicesSkipped">devicesSkipped (required).</param>
        /// <param name="stepCount">stepCount (required).</param>
        /// <param name="artifacts">artifacts.</param>
        public TestReportStats(decimal? os = default(decimal?), decimal? devices = default(decimal?), decimal? filesize = default(decimal?), decimal? totalDeviceMinutes = default(decimal?), decimal? devicesNotRunned = default(decimal?), decimal? failed = default(decimal?), decimal? skipped = default(decimal?), decimal? passed = default(decimal?), decimal? total = default(decimal?), decimal? devicesFinished = default(decimal?), decimal? devicesFailed = default(decimal?), decimal? devicesSkipped = default(decimal?), decimal? stepCount = default(decimal?), Dictionary<string, string> artifacts = default(Dictionary<string, string>))
        {
            // to ensure "os" is required (not null)
            if (os == null)
            {
                throw new InvalidDataException("os is a required property for TestReportStats and cannot be null");
            }
            else
            {
                this.Os = os;
            }
            // to ensure "devices" is required (not null)
            if (devices == null)
            {
                throw new InvalidDataException("devices is a required property for TestReportStats and cannot be null");
            }
            else
            {
                this.Devices = devices;
            }
            // to ensure "filesize" is required (not null)
            if (filesize == null)
            {
                throw new InvalidDataException("filesize is a required property for TestReportStats and cannot be null");
            }
            else
            {
                this.Filesize = filesize;
            }
            // to ensure "totalDeviceMinutes" is required (not null)
            if (totalDeviceMinutes == null)
            {
                throw new InvalidDataException("totalDeviceMinutes is a required property for TestReportStats and cannot be null");
            }
            else
            {
                this.TotalDeviceMinutes = totalDeviceMinutes;
            }
            // to ensure "devicesNotRunned" is required (not null)
            if (devicesNotRunned == null)
            {
                throw new InvalidDataException("devicesNotRunned is a required property for TestReportStats and cannot be null");
            }
            else
            {
                this.DevicesNotRunned = devicesNotRunned;
            }
            // to ensure "failed" is required (not null)
            if (failed == null)
            {
                throw new InvalidDataException("failed is a required property for TestReportStats and cannot be null");
            }
            else
            {
                this.Failed = failed;
            }
            // to ensure "skipped" is required (not null)
            if (skipped == null)
            {
                throw new InvalidDataException("skipped is a required property for TestReportStats and cannot be null");
            }
            else
            {
                this.Skipped = skipped;
            }
            // to ensure "passed" is required (not null)
            if (passed == null)
            {
                throw new InvalidDataException("passed is a required property for TestReportStats and cannot be null");
            }
            else
            {
                this.Passed = passed;
            }
            // to ensure "total" is required (not null)
            if (total == null)
            {
                throw new InvalidDataException("total is a required property for TestReportStats and cannot be null");
            }
            else
            {
                this.Total = total;
            }
            // to ensure "devicesFinished" is required (not null)
            if (devicesFinished == null)
            {
                throw new InvalidDataException("devicesFinished is a required property for TestReportStats and cannot be null");
            }
            else
            {
                this.DevicesFinished = devicesFinished;
            }
            // to ensure "devicesFailed" is required (not null)
            if (devicesFailed == null)
            {
                throw new InvalidDataException("devicesFailed is a required property for TestReportStats and cannot be null");
            }
            else
            {
                this.DevicesFailed = devicesFailed;
            }
            // to ensure "devicesSkipped" is required (not null)
            if (devicesSkipped == null)
            {
                throw new InvalidDataException("devicesSkipped is a required property for TestReportStats and cannot be null");
            }
            else
            {
                this.DevicesSkipped = devicesSkipped;
            }
            // to ensure "stepCount" is required (not null)
            if (stepCount == null)
            {
                throw new InvalidDataException("stepCount is a required property for TestReportStats and cannot be null");
            }
            else
            {
                this.StepCount = stepCount;
            }
            this.Artifacts = artifacts;
        }
        
        /// <summary>
        /// Gets or Sets Os
        /// </summary>
        [DataMember(Name="os", EmitDefaultValue=false)]
        public decimal? Os { get; set; }

        /// <summary>
        /// Gets or Sets Devices
        /// </summary>
        [DataMember(Name="devices", EmitDefaultValue=false)]
        public decimal? Devices { get; set; }

        /// <summary>
        /// Gets or Sets Filesize
        /// </summary>
        [DataMember(Name="filesize", EmitDefaultValue=false)]
        public decimal? Filesize { get; set; }

        /// <summary>
        /// Gets or Sets TotalDeviceMinutes
        /// </summary>
        [DataMember(Name="totalDeviceMinutes", EmitDefaultValue=false)]
        public decimal? TotalDeviceMinutes { get; set; }

        /// <summary>
        /// Gets or Sets DevicesNotRunned
        /// </summary>
        [DataMember(Name="devices_not_runned", EmitDefaultValue=false)]
        public decimal? DevicesNotRunned { get; set; }

        /// <summary>
        /// Gets or Sets Failed
        /// </summary>
        [DataMember(Name="failed", EmitDefaultValue=false)]
        public decimal? Failed { get; set; }

        /// <summary>
        /// Gets or Sets Skipped
        /// </summary>
        [DataMember(Name="skipped", EmitDefaultValue=false)]
        public decimal? Skipped { get; set; }

        /// <summary>
        /// Gets or Sets Passed
        /// </summary>
        [DataMember(Name="passed", EmitDefaultValue=false)]
        public decimal? Passed { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal? Total { get; set; }

        /// <summary>
        /// Gets or Sets DevicesFinished
        /// </summary>
        [DataMember(Name="devices_finished", EmitDefaultValue=false)]
        public decimal? DevicesFinished { get; set; }

        /// <summary>
        /// Gets or Sets DevicesFailed
        /// </summary>
        [DataMember(Name="devices_failed", EmitDefaultValue=false)]
        public decimal? DevicesFailed { get; set; }

        /// <summary>
        /// Gets or Sets DevicesSkipped
        /// </summary>
        [DataMember(Name="devices_skipped", EmitDefaultValue=false)]
        public decimal? DevicesSkipped { get; set; }

        /// <summary>
        /// Gets or Sets StepCount
        /// </summary>
        [DataMember(Name="step_count", EmitDefaultValue=false)]
        public decimal? StepCount { get; set; }

        /// <summary>
        /// Gets or Sets Artifacts
        /// </summary>
        [DataMember(Name="artifacts", EmitDefaultValue=false)]
        public Dictionary<string, string> Artifacts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestReportStats {\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  Devices: ").Append(Devices).Append("\n");
            sb.Append("  Filesize: ").Append(Filesize).Append("\n");
            sb.Append("  TotalDeviceMinutes: ").Append(TotalDeviceMinutes).Append("\n");
            sb.Append("  DevicesNotRunned: ").Append(DevicesNotRunned).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Skipped: ").Append(Skipped).Append("\n");
            sb.Append("  Passed: ").Append(Passed).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  DevicesFinished: ").Append(DevicesFinished).Append("\n");
            sb.Append("  DevicesFailed: ").Append(DevicesFailed).Append("\n");
            sb.Append("  DevicesSkipped: ").Append(DevicesSkipped).Append("\n");
            sb.Append("  StepCount: ").Append(StepCount).Append("\n");
            sb.Append("  Artifacts: ").Append(Artifacts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestReportStats);
        }

        /// <summary>
        /// Returns true if TestReportStats instances are equal
        /// </summary>
        /// <param name="input">Instance of TestReportStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestReportStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Os == input.Os ||
                    (this.Os != null &&
                    this.Os.Equals(input.Os))
                ) && 
                (
                    this.Devices == input.Devices ||
                    (this.Devices != null &&
                    this.Devices.Equals(input.Devices))
                ) && 
                (
                    this.Filesize == input.Filesize ||
                    (this.Filesize != null &&
                    this.Filesize.Equals(input.Filesize))
                ) && 
                (
                    this.TotalDeviceMinutes == input.TotalDeviceMinutes ||
                    (this.TotalDeviceMinutes != null &&
                    this.TotalDeviceMinutes.Equals(input.TotalDeviceMinutes))
                ) && 
                (
                    this.DevicesNotRunned == input.DevicesNotRunned ||
                    (this.DevicesNotRunned != null &&
                    this.DevicesNotRunned.Equals(input.DevicesNotRunned))
                ) && 
                (
                    this.Failed == input.Failed ||
                    (this.Failed != null &&
                    this.Failed.Equals(input.Failed))
                ) && 
                (
                    this.Skipped == input.Skipped ||
                    (this.Skipped != null &&
                    this.Skipped.Equals(input.Skipped))
                ) && 
                (
                    this.Passed == input.Passed ||
                    (this.Passed != null &&
                    this.Passed.Equals(input.Passed))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.DevicesFinished == input.DevicesFinished ||
                    (this.DevicesFinished != null &&
                    this.DevicesFinished.Equals(input.DevicesFinished))
                ) && 
                (
                    this.DevicesFailed == input.DevicesFailed ||
                    (this.DevicesFailed != null &&
                    this.DevicesFailed.Equals(input.DevicesFailed))
                ) && 
                (
                    this.DevicesSkipped == input.DevicesSkipped ||
                    (this.DevicesSkipped != null &&
                    this.DevicesSkipped.Equals(input.DevicesSkipped))
                ) && 
                (
                    this.StepCount == input.StepCount ||
                    (this.StepCount != null &&
                    this.StepCount.Equals(input.StepCount))
                ) && 
                (
                    this.Artifacts == input.Artifacts ||
                    this.Artifacts != null &&
                    input.Artifacts != null &&
                    this.Artifacts.SequenceEqual(input.Artifacts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Os != null)
                    hashCode = hashCode * 59 + this.Os.GetHashCode();
                if (this.Devices != null)
                    hashCode = hashCode * 59 + this.Devices.GetHashCode();
                if (this.Filesize != null)
                    hashCode = hashCode * 59 + this.Filesize.GetHashCode();
                if (this.TotalDeviceMinutes != null)
                    hashCode = hashCode * 59 + this.TotalDeviceMinutes.GetHashCode();
                if (this.DevicesNotRunned != null)
                    hashCode = hashCode * 59 + this.DevicesNotRunned.GetHashCode();
                if (this.Failed != null)
                    hashCode = hashCode * 59 + this.Failed.GetHashCode();
                if (this.Skipped != null)
                    hashCode = hashCode * 59 + this.Skipped.GetHashCode();
                if (this.Passed != null)
                    hashCode = hashCode * 59 + this.Passed.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.DevicesFinished != null)
                    hashCode = hashCode * 59 + this.DevicesFinished.GetHashCode();
                if (this.DevicesFailed != null)
                    hashCode = hashCode * 59 + this.DevicesFailed.GetHashCode();
                if (this.DevicesSkipped != null)
                    hashCode = hashCode * 59 + this.DevicesSkipped.GetHashCode();
                if (this.StepCount != null)
                    hashCode = hashCode * 59 + this.StepCount.GetHashCode();
                if (this.Artifacts != null)
                    hashCode = hashCode * 59 + this.Artifacts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
