/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Export configuration
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "type")]
        public partial class ExportConfiguration :  IEquatable<ExportConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Type of export configuration
        /// </summary>
        /// <value>Type of export configuration</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Blobstorageconnectionstring for value: blob_storage_connection_string
            /// </summary>
            [EnumMember(Value = "blob_storage_connection_string")]
            Blobstorageconnectionstring = 1,
            /// <summary>
            /// Enum Applicationinsightsinstrumentationkey for value: application_insights_instrumentation_key
            /// </summary>
            [EnumMember(Value = "application_insights_instrumentation_key")]
            Applicationinsightsinstrumentationkey = 2,
            /// <summary>
            /// Enum Blobstoragelinkedsubscription for value: blob_storage_linked_subscription
            /// </summary>
            [EnumMember(Value = "blob_storage_linked_subscription")]
            Blobstoragelinkedsubscription = 3,
            /// <summary>
            /// Enum Applicationinsightslinkedsubscription for value: application_insights_linked_subscription
            /// </summary>
            [EnumMember(Value = "application_insights_linked_subscription")]
            Applicationinsightslinkedsubscription = 4        }
        /// <summary>
        /// Type of export configuration
        /// </summary>
        /// <value>Type of export configuration</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines ExportEntities
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ExportEntitiesEnum
        {
            /// <summary>
            /// Enum Crashes for value: crashes
            /// </summary>
            [EnumMember(Value = "crashes")]
            Crashes = 1,
            /// <summary>
            /// Enum Errors for value: errors
            /// </summary>
            [EnumMember(Value = "errors")]
            Errors = 2,
            /// <summary>
            /// Enum Attachments for value: attachments
            /// </summary>
            [EnumMember(Value = "attachments")]
            Attachments = 3,
            /// <summary>
            /// Enum Nologs for value: no_logs
            /// </summary>
            [EnumMember(Value = "no_logs")]
            Nologs = 4        }
        /// <summary>
        /// Gets or Sets ExportEntities
        /// </summary>
        [DataMember(Name="export_entities", EmitDefaultValue=false)]
        public List<ExportEntitiesEnum> ExportEntities { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportConfiguration" /> class.
        /// </summary>
        /// <param name="type">Type of export configuration (required).</param>
        /// <param name="exportEntities">exportEntities.</param>
        /// <param name="resourceName">The resource name on azure.</param>
        /// <param name="resourceGroup">The resource group name on azure.</param>
        /// <param name="backfill">Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation..</param>
        public ExportConfiguration(TypeEnum type = default(TypeEnum), List<ExportEntitiesEnum> exportEntities = default(List<ExportEntitiesEnum>), string resourceName = default(string), string resourceGroup = default(string), bool? backfill = default(bool?))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ExportConfiguration and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.ExportEntities = exportEntities;
            this.ResourceName = resourceName;
            this.ResourceGroup = resourceGroup;
            this.Backfill = backfill;
        }
        


        /// <summary>
        /// The resource name on azure
        /// </summary>
        /// <value>The resource name on azure</value>
        [DataMember(Name="resource_name", EmitDefaultValue=false)]
        public string ResourceName { get; set; }

        /// <summary>
        /// The resource group name on azure
        /// </summary>
        /// <value>The resource group name on azure</value>
        [DataMember(Name="resource_group", EmitDefaultValue=false)]
        public string ResourceGroup { get; set; }

        /// <summary>
        /// Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.
        /// </summary>
        /// <value>Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.</value>
        [DataMember(Name="backfill", EmitDefaultValue=false)]
        public bool? Backfill { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportConfiguration {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ExportEntities: ").Append(ExportEntities).Append("\n");
            sb.Append("  ResourceName: ").Append(ResourceName).Append("\n");
            sb.Append("  ResourceGroup: ").Append(ResourceGroup).Append("\n");
            sb.Append("  Backfill: ").Append(Backfill).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportConfiguration);
        }

        /// <summary>
        /// Returns true if ExportConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ExportEntities == input.ExportEntities ||
                    this.ExportEntities != null &&
                    input.ExportEntities != null &&
                    this.ExportEntities.SequenceEqual(input.ExportEntities)
                ) && 
                (
                    this.ResourceName == input.ResourceName ||
                    (this.ResourceName != null &&
                    this.ResourceName.Equals(input.ResourceName))
                ) && 
                (
                    this.ResourceGroup == input.ResourceGroup ||
                    (this.ResourceGroup != null &&
                    this.ResourceGroup.Equals(input.ResourceGroup))
                ) && 
                (
                    this.Backfill == input.Backfill ||
                    (this.Backfill != null &&
                    this.Backfill.Equals(input.Backfill))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ExportEntities != null)
                    hashCode = hashCode * 59 + this.ExportEntities.GetHashCode();
                if (this.ResourceName != null)
                    hashCode = hashCode * 59 + this.ResourceName.GetHashCode();
                if (this.ResourceGroup != null)
                    hashCode = hashCode * 59 + this.ResourceGroup.GetHashCode();
                if (this.Backfill != null)
                    hashCode = hashCode * 59 + this.Backfill.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
