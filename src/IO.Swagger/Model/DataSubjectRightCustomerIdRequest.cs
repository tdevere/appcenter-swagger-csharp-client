/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DataSubjectRightCustomerIdRequest
    /// </summary>
    [DataContract]
        public partial class DataSubjectRightCustomerIdRequest :  IEquatable<DataSubjectRightCustomerIdRequest>, IValidatableObject
    {
        /// <summary>
        /// type of the customer dataSubjectIdentifier
        /// </summary>
        /// <value>type of the customer dataSubjectIdentifier</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum CustomerAccountId for value: CustomerAccountId
            /// </summary>
            [EnumMember(Value = "CustomerAccountId")]
            CustomerAccountId = 1,
            /// <summary>
            /// Enum CustomerUserId for value: CustomerUserId
            /// </summary>
            [EnumMember(Value = "CustomerUserId")]
            CustomerUserId = 2        }
        /// <summary>
        /// type of the customer dataSubjectIdentifier
        /// </summary>
        /// <value>type of the customer dataSubjectIdentifier</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataSubjectRightCustomerIdRequest" /> class.
        /// </summary>
        /// <param name="dataSubjectIdentifier">customer account id (b2c identifier) / customer user id (free form text) depending on the value of the fied &#x60;type&#x60;.</param>
        /// <param name="type">type of the customer dataSubjectIdentifier.</param>
        public DataSubjectRightCustomerIdRequest(string dataSubjectIdentifier = default(string), TypeEnum? type = default(TypeEnum?))
        {
            this.DataSubjectIdentifier = dataSubjectIdentifier;
            this.Type = type;
        }
        
        /// <summary>
        /// customer account id (b2c identifier) / customer user id (free form text) depending on the value of the fied &#x60;type&#x60;
        /// </summary>
        /// <value>customer account id (b2c identifier) / customer user id (free form text) depending on the value of the fied &#x60;type&#x60;</value>
        [DataMember(Name="dataSubjectIdentifier", EmitDefaultValue=false)]
        public string DataSubjectIdentifier { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataSubjectRightCustomerIdRequest {\n");
            sb.Append("  DataSubjectIdentifier: ").Append(DataSubjectIdentifier).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataSubjectRightCustomerIdRequest);
        }

        /// <summary>
        /// Returns true if DataSubjectRightCustomerIdRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DataSubjectRightCustomerIdRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataSubjectRightCustomerIdRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataSubjectIdentifier == input.DataSubjectIdentifier ||
                    (this.DataSubjectIdentifier != null &&
                    this.DataSubjectIdentifier.Equals(input.DataSubjectIdentifier))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataSubjectIdentifier != null)
                    hashCode = hashCode * 59 + this.DataSubjectIdentifier.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
