/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// a thread representation
    /// </summary>
    [DataContract]
        public partial class Thread :  IEquatable<Thread>, IValidatableObject
    {
        /// <summary>
        /// SDK/Platform this thread is beeing generated from
        /// </summary>
        /// <value>SDK/Platform this thread is beeing generated from</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PlatformEnum
        {
            /// <summary>
            /// Enum Ios for value: ios
            /// </summary>
            [EnumMember(Value = "ios")]
            Ios = 1,
            /// <summary>
            /// Enum Android for value: android
            /// </summary>
            [EnumMember(Value = "android")]
            Android = 2,
            /// <summary>
            /// Enum Xamarin for value: xamarin
            /// </summary>
            [EnumMember(Value = "xamarin")]
            Xamarin = 3,
            /// <summary>
            /// Enum ReactNative for value: react-native
            /// </summary>
            [EnumMember(Value = "react-native")]
            ReactNative = 4,
            /// <summary>
            /// Enum Ndk for value: ndk
            /// </summary>
            [EnumMember(Value = "ndk")]
            Ndk = 5,
            /// <summary>
            /// Enum Unity for value: unity
            /// </summary>
            [EnumMember(Value = "unity")]
            Unity = 6,
            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 7        }
        /// <summary>
        /// SDK/Platform this thread is beeing generated from
        /// </summary>
        /// <value>SDK/Platform this thread is beeing generated from</value>
        [DataMember(Name="platform", EmitDefaultValue=false)]
        public PlatformEnum? Platform { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Thread" /> class.
        /// </summary>
        /// <param name="title">name of the thread (required).</param>
        /// <param name="frames">frames of that thread (required).</param>
        /// <param name="exception">exception.</param>
        /// <param name="relevant">Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true.</param>
        /// <param name="platform">SDK/Platform this thread is beeing generated from.</param>
        /// <param name="crashed">True if this thread crashed.</param>
        public Thread(string title = default(string), List<ExceptionFrames> frames = default(List<ExceptionFrames>), Exception exception = default(Exception), bool? relevant = default(bool?), PlatformEnum? platform = default(PlatformEnum?), bool? crashed = default(bool?))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for Thread and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "frames" is required (not null)
            if (frames == null)
            {
                throw new InvalidDataException("frames is a required property for Thread and cannot be null");
            }
            else
            {
                this.Frames = frames;
            }
            this.Exception = exception;
            this.Relevant = relevant;
            this.Platform = platform;
            this.Crashed = crashed;
        }
        
        /// <summary>
        /// name of the thread
        /// </summary>
        /// <value>name of the thread</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// frames of that thread
        /// </summary>
        /// <value>frames of that thread</value>
        [DataMember(Name="frames", EmitDefaultValue=false)]
        public List<ExceptionFrames> Frames { get; set; }

        /// <summary>
        /// Gets or Sets Exception
        /// </summary>
        [DataMember(Name="exception", EmitDefaultValue=false)]
        public Exception Exception { get; set; }

        /// <summary>
        /// Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true
        /// </summary>
        /// <value>Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true</value>
        [DataMember(Name="relevant", EmitDefaultValue=false)]
        public bool? Relevant { get; set; }


        /// <summary>
        /// True if this thread crashed
        /// </summary>
        /// <value>True if this thread crashed</value>
        [DataMember(Name="crashed", EmitDefaultValue=false)]
        public bool? Crashed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Thread {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Frames: ").Append(Frames).Append("\n");
            sb.Append("  Exception: ").Append(Exception).Append("\n");
            sb.Append("  Relevant: ").Append(Relevant).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Crashed: ").Append(Crashed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Thread);
        }

        /// <summary>
        /// Returns true if Thread instances are equal
        /// </summary>
        /// <param name="input">Instance of Thread to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Thread input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Frames == input.Frames ||
                    this.Frames != null &&
                    input.Frames != null &&
                    this.Frames.SequenceEqual(input.Frames)
                ) && 
                (
                    this.Exception == input.Exception ||
                    (this.Exception != null &&
                    this.Exception.Equals(input.Exception))
                ) && 
                (
                    this.Relevant == input.Relevant ||
                    (this.Relevant != null &&
                    this.Relevant.Equals(input.Relevant))
                ) && 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this.Crashed == input.Crashed ||
                    (this.Crashed != null &&
                    this.Crashed.Equals(input.Crashed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Frames != null)
                    hashCode = hashCode * 59 + this.Frames.GetHashCode();
                if (this.Exception != null)
                    hashCode = hashCode * 59 + this.Exception.GetHashCode();
                if (this.Relevant != null)
                    hashCode = hashCode * 59 + this.Relevant.GetHashCode();
                if (this.Platform != null)
                    hashCode = hashCode * 59 + this.Platform.GetHashCode();
                if (this.Crashed != null)
                    hashCode = hashCode * 59 + this.Crashed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
