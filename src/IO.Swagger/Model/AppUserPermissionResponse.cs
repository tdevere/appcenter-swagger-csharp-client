/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AppUserPermissionResponse
    /// </summary>
    [DataContract]
        public partial class AppUserPermissionResponse :  IEquatable<AppUserPermissionResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines Permissions
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PermissionsEnum
        {
            /// <summary>
            /// Enum Manager for value: manager
            /// </summary>
            [EnumMember(Value = "manager")]
            Manager = 1,
            /// <summary>
            /// Enum Developer for value: developer
            /// </summary>
            [EnumMember(Value = "developer")]
            Developer = 2,
            /// <summary>
            /// Enum Viewer for value: viewer
            /// </summary>
            [EnumMember(Value = "viewer")]
            Viewer = 3,
            /// <summary>
            /// Enum Tester for value: tester
            /// </summary>
            [EnumMember(Value = "tester")]
            Tester = 4        }
        /// <summary>
        /// The permissions the user has for the app
        /// </summary>
        /// <value>The permissions the user has for the app</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<PermissionsEnum> Permissions { get; set; }
        /// <summary>
        /// The creation origin of this app
        /// </summary>
        /// <value>The creation origin of this app</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AppOriginEnum
        {
            /// <summary>
            /// Enum Appcenter for value: appcenter
            /// </summary>
            [EnumMember(Value = "appcenter")]
            Appcenter = 1,
            /// <summary>
            /// Enum Codepush for value: codepush
            /// </summary>
            [EnumMember(Value = "codepush")]
            Codepush = 2        }
        /// <summary>
        /// The creation origin of this app
        /// </summary>
        /// <value>The creation origin of this app</value>
        [DataMember(Name="app_origin", EmitDefaultValue=false)]
        public AppOriginEnum AppOrigin { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppUserPermissionResponse" /> class.
        /// </summary>
        /// <param name="appId">The unique id (UUID) of the app (required).</param>
        /// <param name="permissions">The permissions the user has for the app (required).</param>
        /// <param name="userEmail">The email of the user (required).</param>
        /// <param name="userId">The unique id (UUID) of the user (required).</param>
        /// <param name="appOrigin">The creation origin of this app (required).</param>
        /// <param name="appSecret">A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics (required).</param>
        public AppUserPermissionResponse(Guid? appId = default(Guid?), List<PermissionsEnum> permissions = default(List<PermissionsEnum>), string userEmail = default(string), Guid? userId = default(Guid?), AppOriginEnum appOrigin = default(AppOriginEnum), string appSecret = default(string))
        {
            // to ensure "appId" is required (not null)
            if (appId == null)
            {
                throw new InvalidDataException("appId is a required property for AppUserPermissionResponse and cannot be null");
            }
            else
            {
                this.AppId = appId;
            }
            // to ensure "permissions" is required (not null)
            if (permissions == null)
            {
                throw new InvalidDataException("permissions is a required property for AppUserPermissionResponse and cannot be null");
            }
            else
            {
                this.Permissions = permissions;
            }
            // to ensure "userEmail" is required (not null)
            if (userEmail == null)
            {
                throw new InvalidDataException("userEmail is a required property for AppUserPermissionResponse and cannot be null");
            }
            else
            {
                this.UserEmail = userEmail;
            }
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for AppUserPermissionResponse and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
            // to ensure "appOrigin" is required (not null)
            if (appOrigin == null)
            {
                throw new InvalidDataException("appOrigin is a required property for AppUserPermissionResponse and cannot be null");
            }
            else
            {
                this.AppOrigin = appOrigin;
            }
            // to ensure "appSecret" is required (not null)
            if (appSecret == null)
            {
                throw new InvalidDataException("appSecret is a required property for AppUserPermissionResponse and cannot be null");
            }
            else
            {
                this.AppSecret = appSecret;
            }
        }
        
        /// <summary>
        /// The unique id (UUID) of the app
        /// </summary>
        /// <value>The unique id (UUID) of the app</value>
        [DataMember(Name="app_id", EmitDefaultValue=false)]
        public Guid? AppId { get; set; }


        /// <summary>
        /// The email of the user
        /// </summary>
        /// <value>The email of the user</value>
        [DataMember(Name="user_email", EmitDefaultValue=false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// The unique id (UUID) of the user
        /// </summary>
        /// <value>The unique id (UUID) of the user</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public Guid? UserId { get; set; }


        /// <summary>
        /// A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
        /// </summary>
        /// <value>A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics</value>
        [DataMember(Name="app_secret", EmitDefaultValue=false)]
        public string AppSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppUserPermissionResponse {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AppOrigin: ").Append(AppOrigin).Append("\n");
            sb.Append("  AppSecret: ").Append(AppSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppUserPermissionResponse);
        }

        /// <summary>
        /// Returns true if AppUserPermissionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AppUserPermissionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppUserPermissionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    input.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.UserEmail == input.UserEmail ||
                    (this.UserEmail != null &&
                    this.UserEmail.Equals(input.UserEmail))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.AppOrigin == input.AppOrigin ||
                    (this.AppOrigin != null &&
                    this.AppOrigin.Equals(input.AppOrigin))
                ) && 
                (
                    this.AppSecret == input.AppSecret ||
                    (this.AppSecret != null &&
                    this.AppSecret.Equals(input.AppSecret))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.UserEmail != null)
                    hashCode = hashCode * 59 + this.UserEmail.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.AppOrigin != null)
                    hashCode = hashCode * 59 + this.AppOrigin.GetHashCode();
                if (this.AppSecret != null)
                    hashCode = hashCode * 59 + this.AppSecret.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
