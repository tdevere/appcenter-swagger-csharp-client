/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Details of an uploaded release
    /// </summary>
    [DataContract]
        public partial class PrivateReleaseDetailsResponse :  IEquatable<PrivateReleaseDetailsResponse>, IValidatableObject
    {
        /// <summary>
        /// OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#x27;available&#x27; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; 
        /// </summary>
        /// <value>OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#x27;available&#x27; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Available for value: available
            /// </summary>
            [EnumMember(Value = "available")]
            Available = 1,
            /// <summary>
            /// Enum Unavailable for value: unavailable
            /// </summary>
            [EnumMember(Value = "unavailable")]
            Unavailable = 2        }
        /// <summary>
        /// OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#x27;available&#x27; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; 
        /// </summary>
        /// <value>OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#x27;available&#x27; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// The release&#x27;s origin
        /// </summary>
        /// <value>The release&#x27;s origin</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OriginEnum
        {
            /// <summary>
            /// Enum Hockeyapp for value: hockeyapp
            /// </summary>
            [EnumMember(Value = "hockeyapp")]
            Hockeyapp = 1,
            /// <summary>
            /// Enum Appcenter for value: appcenter
            /// </summary>
            [EnumMember(Value = "appcenter")]
            Appcenter = 2        }
        /// <summary>
        /// The release&#x27;s origin
        /// </summary>
        /// <value>The release&#x27;s origin</value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public OriginEnum? Origin { get; set; }
        /// <summary>
        /// The type of the provisioning profile for the requested app version.
        /// </summary>
        /// <value>The type of the provisioning profile for the requested app version.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ProvisioningProfileTypeEnum
        {
            /// <summary>
            /// Enum Adhoc for value: adhoc
            /// </summary>
            [EnumMember(Value = "adhoc")]
            Adhoc = 1,
            /// <summary>
            /// Enum Enterprise for value: enterprise
            /// </summary>
            [EnumMember(Value = "enterprise")]
            Enterprise = 2,
            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 3        }
        /// <summary>
        /// The type of the provisioning profile for the requested app version.
        /// </summary>
        /// <value>The type of the provisioning profile for the requested app version.</value>
        [DataMember(Name="provisioning_profile_type", EmitDefaultValue=false)]
        public ProvisioningProfileTypeEnum? ProvisioningProfileType { get; set; }
        /// <summary>
        /// The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; 
        /// </summary>
        /// <value>The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DestinationTypeEnum
        {
            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            [EnumMember(Value = "group")]
            Group = 1,
            /// <summary>
            /// Enum Store for value: store
            /// </summary>
            [EnumMember(Value = "store")]
            Store = 2,
            /// <summary>
            /// Enum Tester for value: tester
            /// </summary>
            [EnumMember(Value = "tester")]
            Tester = 3        }
        /// <summary>
        /// The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; 
        /// </summary>
        /// <value>The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; </value>
        [DataMember(Name="destination_type", EmitDefaultValue=false)]
        public DestinationTypeEnum? DestinationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrivateReleaseDetailsResponse" /> class.
        /// </summary>
        /// <param name="id">ID identifying this unique release..</param>
        /// <param name="status">OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#x27;available&#x27; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; .</param>
        /// <param name="appName">The app&#x27;s name (extracted from the uploaded release)..</param>
        /// <param name="appDisplayName">The app&#x27;s display name..</param>
        /// <param name="version">The release&#x27;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. .</param>
        /// <param name="origin">The release&#x27;s origin.</param>
        /// <param name="shortVersion">The release&#x27;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. .</param>
        /// <param name="releaseNotes">The release&#x27;s release notes..</param>
        /// <param name="provisioningProfileName">The release&#x27;s provisioning profile name..</param>
        /// <param name="provisioningProfileType">The type of the provisioning profile for the requested app version..</param>
        /// <param name="isProvisioningProfileSyncing">A flag that determines whether the release&#x27;s provisioning profile is still extracted or not..</param>
        /// <param name="size">The release&#x27;s size in bytes..</param>
        /// <param name="minOs">The release&#x27;s minimum required operating system..</param>
        /// <param name="deviceFamily">The release&#x27;s device family..</param>
        /// <param name="androidMinApiLevel">The release&#x27;s minimum required Android API level..</param>
        /// <param name="bundleIdentifier">The identifier of the apps bundle..</param>
        /// <param name="fingerprint">MD5 checksum of the release binary..</param>
        /// <param name="uploadedAt">UTC time in ISO 8601 format of the uploaded time..</param>
        /// <param name="downloadUrl">The URL that hosts the binary for this release..</param>
        /// <param name="secondaryDownloadUrl">The URL that hosts the secondary binary for this release, such as the apk file for aab releases..</param>
        /// <param name="appIconUrl">A URL to the app&#x27;s icon..</param>
        /// <param name="installUrl">The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;.</param>
        /// <param name="distributionGroupId">the destination where release is distributed.</param>
        /// <param name="publishingStatus">the publishing status of the distributed release.</param>
        /// <param name="destinationType">The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; .</param>
        /// <param name="isExternalBuild">This value determines if a release is external or not..</param>
        public PrivateReleaseDetailsResponse(int? id = default(int?), StatusEnum? status = default(StatusEnum?), string appName = default(string), string appDisplayName = default(string), string version = default(string), OriginEnum? origin = default(OriginEnum?), string shortVersion = default(string), string releaseNotes = default(string), string provisioningProfileName = default(string), ProvisioningProfileTypeEnum? provisioningProfileType = default(ProvisioningProfileTypeEnum?), bool? isProvisioningProfileSyncing = default(bool?), int? size = default(int?), string minOs = default(string), string deviceFamily = default(string), string androidMinApiLevel = default(string), string bundleIdentifier = default(string), string fingerprint = default(string), string uploadedAt = default(string), string downloadUrl = default(string), string secondaryDownloadUrl = default(string), string appIconUrl = default(string), string installUrl = default(string), string distributionGroupId = default(string), string publishingStatus = default(string), DestinationTypeEnum? destinationType = default(DestinationTypeEnum?), bool? isExternalBuild = default(bool?))
        {
            this.Id = id;
            this.Status = status;
            this.AppName = appName;
            this.AppDisplayName = appDisplayName;
            this.Version = version;
            this.Origin = origin;
            this.ShortVersion = shortVersion;
            this.ReleaseNotes = releaseNotes;
            this.ProvisioningProfileName = provisioningProfileName;
            this.ProvisioningProfileType = provisioningProfileType;
            this.IsProvisioningProfileSyncing = isProvisioningProfileSyncing;
            this.Size = size;
            this.MinOs = minOs;
            this.DeviceFamily = deviceFamily;
            this.AndroidMinApiLevel = androidMinApiLevel;
            this.BundleIdentifier = bundleIdentifier;
            this.Fingerprint = fingerprint;
            this.UploadedAt = uploadedAt;
            this.DownloadUrl = downloadUrl;
            this.SecondaryDownloadUrl = secondaryDownloadUrl;
            this.AppIconUrl = appIconUrl;
            this.InstallUrl = installUrl;
            this.DistributionGroupId = distributionGroupId;
            this.PublishingStatus = publishingStatus;
            this.DestinationType = destinationType;
            this.IsExternalBuild = isExternalBuild;
        }
        
        /// <summary>
        /// ID identifying this unique release.
        /// </summary>
        /// <value>ID identifying this unique release.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }


        /// <summary>
        /// The app&#x27;s name (extracted from the uploaded release).
        /// </summary>
        /// <value>The app&#x27;s name (extracted from the uploaded release).</value>
        [DataMember(Name="app_name", EmitDefaultValue=false)]
        public string AppName { get; set; }

        /// <summary>
        /// The app&#x27;s display name.
        /// </summary>
        /// <value>The app&#x27;s display name.</value>
        [DataMember(Name="app_display_name", EmitDefaultValue=false)]
        public string AppDisplayName { get; set; }

        /// <summary>
        /// The release&#x27;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 
        /// </summary>
        /// <value>The release&#x27;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. </value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }


        /// <summary>
        /// The release&#x27;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 
        /// </summary>
        /// <value>The release&#x27;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. </value>
        [DataMember(Name="short_version", EmitDefaultValue=false)]
        public string ShortVersion { get; set; }

        /// <summary>
        /// The release&#x27;s release notes.
        /// </summary>
        /// <value>The release&#x27;s release notes.</value>
        [DataMember(Name="release_notes", EmitDefaultValue=false)]
        public string ReleaseNotes { get; set; }

        /// <summary>
        /// The release&#x27;s provisioning profile name.
        /// </summary>
        /// <value>The release&#x27;s provisioning profile name.</value>
        [DataMember(Name="provisioning_profile_name", EmitDefaultValue=false)]
        public string ProvisioningProfileName { get; set; }


        /// <summary>
        /// A flag that determines whether the release&#x27;s provisioning profile is still extracted or not.
        /// </summary>
        /// <value>A flag that determines whether the release&#x27;s provisioning profile is still extracted or not.</value>
        [DataMember(Name="is_provisioning_profile_syncing", EmitDefaultValue=false)]
        public bool? IsProvisioningProfileSyncing { get; set; }

        /// <summary>
        /// The release&#x27;s size in bytes.
        /// </summary>
        /// <value>The release&#x27;s size in bytes.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// The release&#x27;s minimum required operating system.
        /// </summary>
        /// <value>The release&#x27;s minimum required operating system.</value>
        [DataMember(Name="min_os", EmitDefaultValue=false)]
        public string MinOs { get; set; }

        /// <summary>
        /// The release&#x27;s device family.
        /// </summary>
        /// <value>The release&#x27;s device family.</value>
        [DataMember(Name="device_family", EmitDefaultValue=false)]
        public string DeviceFamily { get; set; }

        /// <summary>
        /// The release&#x27;s minimum required Android API level.
        /// </summary>
        /// <value>The release&#x27;s minimum required Android API level.</value>
        [DataMember(Name="android_min_api_level", EmitDefaultValue=false)]
        public string AndroidMinApiLevel { get; set; }

        /// <summary>
        /// The identifier of the apps bundle.
        /// </summary>
        /// <value>The identifier of the apps bundle.</value>
        [DataMember(Name="bundle_identifier", EmitDefaultValue=false)]
        public string BundleIdentifier { get; set; }

        /// <summary>
        /// MD5 checksum of the release binary.
        /// </summary>
        /// <value>MD5 checksum of the release binary.</value>
        [DataMember(Name="fingerprint", EmitDefaultValue=false)]
        public string Fingerprint { get; set; }

        /// <summary>
        /// UTC time in ISO 8601 format of the uploaded time.
        /// </summary>
        /// <value>UTC time in ISO 8601 format of the uploaded time.</value>
        [DataMember(Name="uploaded_at", EmitDefaultValue=false)]
        public string UploadedAt { get; set; }

        /// <summary>
        /// The URL that hosts the binary for this release.
        /// </summary>
        /// <value>The URL that hosts the binary for this release.</value>
        [DataMember(Name="download_url", EmitDefaultValue=false)]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// The URL that hosts the secondary binary for this release, such as the apk file for aab releases.
        /// </summary>
        /// <value>The URL that hosts the secondary binary for this release, such as the apk file for aab releases.</value>
        [DataMember(Name="secondary_download_url", EmitDefaultValue=false)]
        public string SecondaryDownloadUrl { get; set; }

        /// <summary>
        /// A URL to the app&#x27;s icon.
        /// </summary>
        /// <value>A URL to the app&#x27;s icon.</value>
        [DataMember(Name="app_icon_url", EmitDefaultValue=false)]
        public string AppIconUrl { get; set; }

        /// <summary>
        /// The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;
        /// </summary>
        /// <value>The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;</value>
        [DataMember(Name="install_url", EmitDefaultValue=false)]
        public string InstallUrl { get; set; }

        /// <summary>
        /// the destination where release is distributed
        /// </summary>
        /// <value>the destination where release is distributed</value>
        [DataMember(Name="distribution_group_id", EmitDefaultValue=false)]
        public string DistributionGroupId { get; set; }

        /// <summary>
        /// the publishing status of the distributed release
        /// </summary>
        /// <value>the publishing status of the distributed release</value>
        [DataMember(Name="publishing_status", EmitDefaultValue=false)]
        public string PublishingStatus { get; set; }


        /// <summary>
        /// This value determines if a release is external or not.
        /// </summary>
        /// <value>This value determines if a release is external or not.</value>
        [DataMember(Name="is_external_build", EmitDefaultValue=false)]
        public bool? IsExternalBuild { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrivateReleaseDetailsResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppDisplayName: ").Append(AppDisplayName).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  ShortVersion: ").Append(ShortVersion).Append("\n");
            sb.Append("  ReleaseNotes: ").Append(ReleaseNotes).Append("\n");
            sb.Append("  ProvisioningProfileName: ").Append(ProvisioningProfileName).Append("\n");
            sb.Append("  ProvisioningProfileType: ").Append(ProvisioningProfileType).Append("\n");
            sb.Append("  IsProvisioningProfileSyncing: ").Append(IsProvisioningProfileSyncing).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  MinOs: ").Append(MinOs).Append("\n");
            sb.Append("  DeviceFamily: ").Append(DeviceFamily).Append("\n");
            sb.Append("  AndroidMinApiLevel: ").Append(AndroidMinApiLevel).Append("\n");
            sb.Append("  BundleIdentifier: ").Append(BundleIdentifier).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  UploadedAt: ").Append(UploadedAt).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  SecondaryDownloadUrl: ").Append(SecondaryDownloadUrl).Append("\n");
            sb.Append("  AppIconUrl: ").Append(AppIconUrl).Append("\n");
            sb.Append("  InstallUrl: ").Append(InstallUrl).Append("\n");
            sb.Append("  DistributionGroupId: ").Append(DistributionGroupId).Append("\n");
            sb.Append("  PublishingStatus: ").Append(PublishingStatus).Append("\n");
            sb.Append("  DestinationType: ").Append(DestinationType).Append("\n");
            sb.Append("  IsExternalBuild: ").Append(IsExternalBuild).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrivateReleaseDetailsResponse);
        }

        /// <summary>
        /// Returns true if PrivateReleaseDetailsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PrivateReleaseDetailsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrivateReleaseDetailsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.AppDisplayName == input.AppDisplayName ||
                    (this.AppDisplayName != null &&
                    this.AppDisplayName.Equals(input.AppDisplayName))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.ShortVersion == input.ShortVersion ||
                    (this.ShortVersion != null &&
                    this.ShortVersion.Equals(input.ShortVersion))
                ) && 
                (
                    this.ReleaseNotes == input.ReleaseNotes ||
                    (this.ReleaseNotes != null &&
                    this.ReleaseNotes.Equals(input.ReleaseNotes))
                ) && 
                (
                    this.ProvisioningProfileName == input.ProvisioningProfileName ||
                    (this.ProvisioningProfileName != null &&
                    this.ProvisioningProfileName.Equals(input.ProvisioningProfileName))
                ) && 
                (
                    this.ProvisioningProfileType == input.ProvisioningProfileType ||
                    (this.ProvisioningProfileType != null &&
                    this.ProvisioningProfileType.Equals(input.ProvisioningProfileType))
                ) && 
                (
                    this.IsProvisioningProfileSyncing == input.IsProvisioningProfileSyncing ||
                    (this.IsProvisioningProfileSyncing != null &&
                    this.IsProvisioningProfileSyncing.Equals(input.IsProvisioningProfileSyncing))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.MinOs == input.MinOs ||
                    (this.MinOs != null &&
                    this.MinOs.Equals(input.MinOs))
                ) && 
                (
                    this.DeviceFamily == input.DeviceFamily ||
                    (this.DeviceFamily != null &&
                    this.DeviceFamily.Equals(input.DeviceFamily))
                ) && 
                (
                    this.AndroidMinApiLevel == input.AndroidMinApiLevel ||
                    (this.AndroidMinApiLevel != null &&
                    this.AndroidMinApiLevel.Equals(input.AndroidMinApiLevel))
                ) && 
                (
                    this.BundleIdentifier == input.BundleIdentifier ||
                    (this.BundleIdentifier != null &&
                    this.BundleIdentifier.Equals(input.BundleIdentifier))
                ) && 
                (
                    this.Fingerprint == input.Fingerprint ||
                    (this.Fingerprint != null &&
                    this.Fingerprint.Equals(input.Fingerprint))
                ) && 
                (
                    this.UploadedAt == input.UploadedAt ||
                    (this.UploadedAt != null &&
                    this.UploadedAt.Equals(input.UploadedAt))
                ) && 
                (
                    this.DownloadUrl == input.DownloadUrl ||
                    (this.DownloadUrl != null &&
                    this.DownloadUrl.Equals(input.DownloadUrl))
                ) && 
                (
                    this.SecondaryDownloadUrl == input.SecondaryDownloadUrl ||
                    (this.SecondaryDownloadUrl != null &&
                    this.SecondaryDownloadUrl.Equals(input.SecondaryDownloadUrl))
                ) && 
                (
                    this.AppIconUrl == input.AppIconUrl ||
                    (this.AppIconUrl != null &&
                    this.AppIconUrl.Equals(input.AppIconUrl))
                ) && 
                (
                    this.InstallUrl == input.InstallUrl ||
                    (this.InstallUrl != null &&
                    this.InstallUrl.Equals(input.InstallUrl))
                ) && 
                (
                    this.DistributionGroupId == input.DistributionGroupId ||
                    (this.DistributionGroupId != null &&
                    this.DistributionGroupId.Equals(input.DistributionGroupId))
                ) && 
                (
                    this.PublishingStatus == input.PublishingStatus ||
                    (this.PublishingStatus != null &&
                    this.PublishingStatus.Equals(input.PublishingStatus))
                ) && 
                (
                    this.DestinationType == input.DestinationType ||
                    (this.DestinationType != null &&
                    this.DestinationType.Equals(input.DestinationType))
                ) && 
                (
                    this.IsExternalBuild == input.IsExternalBuild ||
                    (this.IsExternalBuild != null &&
                    this.IsExternalBuild.Equals(input.IsExternalBuild))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.AppName != null)
                    hashCode = hashCode * 59 + this.AppName.GetHashCode();
                if (this.AppDisplayName != null)
                    hashCode = hashCode * 59 + this.AppDisplayName.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.ShortVersion != null)
                    hashCode = hashCode * 59 + this.ShortVersion.GetHashCode();
                if (this.ReleaseNotes != null)
                    hashCode = hashCode * 59 + this.ReleaseNotes.GetHashCode();
                if (this.ProvisioningProfileName != null)
                    hashCode = hashCode * 59 + this.ProvisioningProfileName.GetHashCode();
                if (this.ProvisioningProfileType != null)
                    hashCode = hashCode * 59 + this.ProvisioningProfileType.GetHashCode();
                if (this.IsProvisioningProfileSyncing != null)
                    hashCode = hashCode * 59 + this.IsProvisioningProfileSyncing.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.MinOs != null)
                    hashCode = hashCode * 59 + this.MinOs.GetHashCode();
                if (this.DeviceFamily != null)
                    hashCode = hashCode * 59 + this.DeviceFamily.GetHashCode();
                if (this.AndroidMinApiLevel != null)
                    hashCode = hashCode * 59 + this.AndroidMinApiLevel.GetHashCode();
                if (this.BundleIdentifier != null)
                    hashCode = hashCode * 59 + this.BundleIdentifier.GetHashCode();
                if (this.Fingerprint != null)
                    hashCode = hashCode * 59 + this.Fingerprint.GetHashCode();
                if (this.UploadedAt != null)
                    hashCode = hashCode * 59 + this.UploadedAt.GetHashCode();
                if (this.DownloadUrl != null)
                    hashCode = hashCode * 59 + this.DownloadUrl.GetHashCode();
                if (this.SecondaryDownloadUrl != null)
                    hashCode = hashCode * 59 + this.SecondaryDownloadUrl.GetHashCode();
                if (this.AppIconUrl != null)
                    hashCode = hashCode * 59 + this.AppIconUrl.GetHashCode();
                if (this.InstallUrl != null)
                    hashCode = hashCode * 59 + this.InstallUrl.GetHashCode();
                if (this.DistributionGroupId != null)
                    hashCode = hashCode * 59 + this.DistributionGroupId.GetHashCode();
                if (this.PublishingStatus != null)
                    hashCode = hashCode * 59 + this.PublishingStatus.GetHashCode();
                if (this.DestinationType != null)
                    hashCode = hashCode * 59 + this.DestinationType.GetHashCode();
                if (this.IsExternalBuild != null)
                    hashCode = hashCode * 59 + this.IsExternalBuild.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
