/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReportStatusDownloadBody
    /// </summary>
    [DataContract]
        public partial class ReportStatusDownloadBody :  IEquatable<ReportStatusDownloadBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportStatusDownloadBody" /> class.
        /// </summary>
        /// <param name="deploymentKey">deploymentKey.</param>
        /// <param name="label">label.</param>
        /// <param name="appVersion">appVersion.</param>
        /// <param name="previousDeploymentKey">previousDeploymentKey.</param>
        /// <param name="previousLabelOrAppVersion">previousLabelOrAppVersion.</param>
        /// <param name="status">status.</param>
        /// <param name="clientUniqueId">clientUniqueId.</param>
        public ReportStatusDownloadBody(string deploymentKey = default(string), string label = default(string), string appVersion = default(string), string previousDeploymentKey = default(string), string previousLabelOrAppVersion = default(string), string status = default(string), string clientUniqueId = default(string))
        {
            this.DeploymentKey = deploymentKey;
            this.Label = label;
            this.AppVersion = appVersion;
            this.PreviousDeploymentKey = previousDeploymentKey;
            this.PreviousLabelOrAppVersion = previousLabelOrAppVersion;
            this.Status = status;
            this.ClientUniqueId = clientUniqueId;
        }
        
        /// <summary>
        /// Gets or Sets DeploymentKey
        /// </summary>
        [DataMember(Name="deploymentKey", EmitDefaultValue=false)]
        public string DeploymentKey { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets AppVersion
        /// </summary>
        [DataMember(Name="appVersion", EmitDefaultValue=false)]
        public string AppVersion { get; set; }

        /// <summary>
        /// Gets or Sets PreviousDeploymentKey
        /// </summary>
        [DataMember(Name="previousDeploymentKey", EmitDefaultValue=false)]
        public string PreviousDeploymentKey { get; set; }

        /// <summary>
        /// Gets or Sets PreviousLabelOrAppVersion
        /// </summary>
        [DataMember(Name="previousLabelOrAppVersion", EmitDefaultValue=false)]
        public string PreviousLabelOrAppVersion { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ClientUniqueId
        /// </summary>
        [DataMember(Name="clientUniqueId", EmitDefaultValue=false)]
        public string ClientUniqueId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportStatusDownloadBody {\n");
            sb.Append("  DeploymentKey: ").Append(DeploymentKey).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  PreviousDeploymentKey: ").Append(PreviousDeploymentKey).Append("\n");
            sb.Append("  PreviousLabelOrAppVersion: ").Append(PreviousLabelOrAppVersion).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ClientUniqueId: ").Append(ClientUniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportStatusDownloadBody);
        }

        /// <summary>
        /// Returns true if ReportStatusDownloadBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportStatusDownloadBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportStatusDownloadBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeploymentKey == input.DeploymentKey ||
                    (this.DeploymentKey != null &&
                    this.DeploymentKey.Equals(input.DeploymentKey))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.AppVersion == input.AppVersion ||
                    (this.AppVersion != null &&
                    this.AppVersion.Equals(input.AppVersion))
                ) && 
                (
                    this.PreviousDeploymentKey == input.PreviousDeploymentKey ||
                    (this.PreviousDeploymentKey != null &&
                    this.PreviousDeploymentKey.Equals(input.PreviousDeploymentKey))
                ) && 
                (
                    this.PreviousLabelOrAppVersion == input.PreviousLabelOrAppVersion ||
                    (this.PreviousLabelOrAppVersion != null &&
                    this.PreviousLabelOrAppVersion.Equals(input.PreviousLabelOrAppVersion))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ClientUniqueId == input.ClientUniqueId ||
                    (this.ClientUniqueId != null &&
                    this.ClientUniqueId.Equals(input.ClientUniqueId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeploymentKey != null)
                    hashCode = hashCode * 59 + this.DeploymentKey.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.AppVersion != null)
                    hashCode = hashCode * 59 + this.AppVersion.GetHashCode();
                if (this.PreviousDeploymentKey != null)
                    hashCode = hashCode * 59 + this.PreviousDeploymentKey.GetHashCode();
                if (this.PreviousLabelOrAppVersion != null)
                    hashCode = hashCode * 59 + this.PreviousLabelOrAppVersion.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ClientUniqueId != null)
                    hashCode = hashCode * 59 + this.ClientUniqueId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
