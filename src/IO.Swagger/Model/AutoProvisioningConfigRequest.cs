/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A request containing information for creating a Auto Provisioning Config.
    /// </summary>
    [DataContract]
        public partial class AutoProvisioningConfigRequest :  IEquatable<AutoProvisioningConfigRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoProvisioningConfigRequest" /> class.
        /// </summary>
        /// <param name="appleDeveloperAccountKey">A key to a secret in customer-credential-store. apple_developer_account refers to the user&#x27;s developer account that is used to log into https://developer.apple.com. Normally the user&#x27;s email..</param>
        /// <param name="appleDistributionCertificateKey">A key to a secret in customer-credential-store. distribution_certificate refers to the customer&#x27;s certificate (that holds the private key) that will be used to sign the app..</param>
        /// <param name="allowAutoProvisioning">When *true* enables auto provisioning.</param>
        public AutoProvisioningConfigRequest(string appleDeveloperAccountKey = default(string), string appleDistributionCertificateKey = default(string), bool? allowAutoProvisioning = default(bool?))
        {
            this.AppleDeveloperAccountKey = appleDeveloperAccountKey;
            this.AppleDistributionCertificateKey = appleDistributionCertificateKey;
            this.AllowAutoProvisioning = allowAutoProvisioning;
        }
        
        /// <summary>
        /// A key to a secret in customer-credential-store. apple_developer_account refers to the user&#x27;s developer account that is used to log into https://developer.apple.com. Normally the user&#x27;s email.
        /// </summary>
        /// <value>A key to a secret in customer-credential-store. apple_developer_account refers to the user&#x27;s developer account that is used to log into https://developer.apple.com. Normally the user&#x27;s email.</value>
        [DataMember(Name="apple_developer_account_key", EmitDefaultValue=false)]
        public string AppleDeveloperAccountKey { get; set; }

        /// <summary>
        /// A key to a secret in customer-credential-store. distribution_certificate refers to the customer&#x27;s certificate (that holds the private key) that will be used to sign the app.
        /// </summary>
        /// <value>A key to a secret in customer-credential-store. distribution_certificate refers to the customer&#x27;s certificate (that holds the private key) that will be used to sign the app.</value>
        [DataMember(Name="apple_distribution_certificate_key", EmitDefaultValue=false)]
        public string AppleDistributionCertificateKey { get; set; }

        /// <summary>
        /// When *true* enables auto provisioning
        /// </summary>
        /// <value>When *true* enables auto provisioning</value>
        [DataMember(Name="allow_auto_provisioning", EmitDefaultValue=false)]
        public bool? AllowAutoProvisioning { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutoProvisioningConfigRequest {\n");
            sb.Append("  AppleDeveloperAccountKey: ").Append(AppleDeveloperAccountKey).Append("\n");
            sb.Append("  AppleDistributionCertificateKey: ").Append(AppleDistributionCertificateKey).Append("\n");
            sb.Append("  AllowAutoProvisioning: ").Append(AllowAutoProvisioning).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutoProvisioningConfigRequest);
        }

        /// <summary>
        /// Returns true if AutoProvisioningConfigRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AutoProvisioningConfigRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutoProvisioningConfigRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppleDeveloperAccountKey == input.AppleDeveloperAccountKey ||
                    (this.AppleDeveloperAccountKey != null &&
                    this.AppleDeveloperAccountKey.Equals(input.AppleDeveloperAccountKey))
                ) && 
                (
                    this.AppleDistributionCertificateKey == input.AppleDistributionCertificateKey ||
                    (this.AppleDistributionCertificateKey != null &&
                    this.AppleDistributionCertificateKey.Equals(input.AppleDistributionCertificateKey))
                ) && 
                (
                    this.AllowAutoProvisioning == input.AllowAutoProvisioning ||
                    (this.AllowAutoProvisioning != null &&
                    this.AllowAutoProvisioning.Equals(input.AllowAutoProvisioning))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppleDeveloperAccountKey != null)
                    hashCode = hashCode * 59 + this.AppleDeveloperAccountKey.GetHashCode();
                if (this.AppleDistributionCertificateKey != null)
                    hashCode = hashCode * 59 + this.AppleDistributionCertificateKey.GetHashCode();
                if (this.AllowAutoProvisioning != null)
                    hashCode = hashCode * 59 + this.AllowAutoProvisioning.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
